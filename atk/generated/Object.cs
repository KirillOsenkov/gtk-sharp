// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Object]
	public class Object : GLib.Object {

		[Obsolete]
		protected Object(GLib.GType gtype) : base(gtype) {}
		public Object(IntPtr raw) : base(raw) {}

		protected Object() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[GLib.Property ("accessible-name")]
		public string AtkObjectNamePropertyName {
			get {
				using (GLib.Value val = GetProperty ("accessible-name")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-name", val);
				}
			}
		}

		[GLib.Property ("accessible-description")]
		public string AtkObjectNamePropertyDescription {
			get {
				using (GLib.Value val = GetProperty ("accessible-description")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-description", val);
				}
			}
		}

		[GLib.Property ("accessible-parent")]
		public Atk.Object AtkObjectNamePropertyParent {
			get {
				using (GLib.Value val = GetProperty ("accessible-parent")) {
					Atk.Object ret = (Atk.Object) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-parent", val);
				}
			}
		}

		[GLib.Property ("accessible-value")]
		public double AtkObjectNamePropertyValue {
			get {
				using (GLib.Value val = GetProperty ("accessible-value")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-value", val);
				}
			}
		}

		[GLib.Property ("accessible-role")]
		public int AtkObjectNamePropertyRole {
			get {
				using (GLib.Value val = GetProperty ("accessible-role")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-role", val);
				}
			}
		}

		[GLib.Property ("accessible-component-layer")]
		public int AtkObjectNamePropertyComponentLayer {
			get {
				using (GLib.Value val = GetProperty ("accessible-component-layer")) {
					int ret = (int) val;
					return ret;
				}
			}
		}

		[GLib.Property ("accessible-component-mdi-zorder")]
		public int AtkObjectNamePropertyComponentMdiZorder {
			get {
				using (GLib.Value val = GetProperty ("accessible-component-mdi-zorder")) {
					int ret = (int) val;
					return ret;
				}
			}
		}

		[GLib.Property ("accessible-table-caption")]
		public string AtkObjectNamePropertyTableCaption {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-caption")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-caption", val);
				}
			}
		}

		[GLib.Property ("accessible-table-column-header")]
		public Atk.Object AtkObjectNamePropertyTableColumnHeader {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-column-header")) {
					Atk.Object ret = (Atk.Object) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-column-header", val);
				}
			}
		}

		[GLib.Property ("accessible-table-column-description")]
		public string AtkObjectNamePropertyTableColumnDescription {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-column-description")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-column-description", val);
				}
			}
		}

		[GLib.Property ("accessible-row-header")]
		public Atk.Object AtkObjectNamePropertyTableRowHeader {
			get {
				using (GLib.Value val = GetProperty ("accessible-row-header")) {
					Atk.Object ret = (Atk.Object) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-row-header", val);
				}
			}
		}

		[GLib.Property ("accessible-table-row-description")]
		public string AtkObjectNamePropertyTableRowDescription {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-row-description")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-row-description", val);
				}
			}
		}

		[GLib.Property ("accessible-table-summary")]
		public Atk.Object AtkObjectNamePropertyTableSummary {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-summary")) {
					Atk.Object ret = (Atk.Object) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-summary", val);
				}
			}
		}

		[GLib.Property ("accessible-table-caption-object")]
		public Atk.Object AtkObjectNamePropertyTableCaptionObject {
			get {
				using (GLib.Value val = GetProperty ("accessible-table-caption-object")) {
					Atk.Object ret = (Atk.Object) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accessible-table-caption-object", val);
				}
			}
		}

		[GLib.Property ("accessible-hypertext-nlinks")]
		public int AtkObjectNamePropertyHypertextNumLinks {
			get {
				using (GLib.Value val = GetProperty ("accessible-hypertext-nlinks")) {
					int ret = (int) val;
					return ret;
				}
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_get_description(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_set_description(IntPtr raw, IntPtr description);

		public string Description {
			get  {
				IntPtr raw_ret = atk_object_get_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				atk_object_set_description(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_get_name(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_set_name(IntPtr raw, IntPtr name);

		public string Name {
			get  {
				IntPtr raw_ret = atk_object_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				atk_object_set_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_object_get_role(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_set_role(IntPtr raw, int role);

		public Atk.Role Role {
			get  {
				int raw_ret = atk_object_get_role(Handle);
				Atk.Role ret = (Atk.Role) raw_ret;
				return ret;
			}
			set  {
				atk_object_set_role(Handle, (int) value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_object_get_layer(IntPtr raw);

		public Atk.Layer Layer {
			get  {
				int raw_ret = atk_object_get_layer(Handle);
				Atk.Layer ret = (Atk.Layer) raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChildrenChangedVMDelegate (IntPtr accessible, uint change_index, IntPtr changed_child);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_children_changed (IntPtr gtype, ChildrenChangedVMDelegate cb);

		static ChildrenChangedVMDelegate ChildrenChangedVMCallback;

		static void childrenchanged_cb (IntPtr accessible, uint change_index, IntPtr changed_child)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnChildrenChanged (change_index, changed_child);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChildrenChanged (GLib.GType gtype)
		{
			if (ChildrenChangedVMCallback == null)
				ChildrenChangedVMCallback = new ChildrenChangedVMDelegate (childrenchanged_cb);
			atksharp_object_override_children_changed (gtype.Val, ChildrenChangedVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_children_changed (IntPtr accessible, uint change_index, IntPtr changed_child);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverrideChildrenChanged")]
		protected virtual void OnChildrenChanged (uint change_index, IntPtr changed_child)
		{
			atksharp_object_base_children_changed (Handle, change_index, changed_child);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChildrenChangedSignalDelegate (IntPtr arg0, uint arg1, IntPtr arg2, IntPtr gch);

		static void ChildrenChangedSignalCallback (IntPtr arg0, uint arg1, IntPtr arg2, IntPtr gch)
		{
			Atk.ChildrenChangedArgs args = new Atk.ChildrenChangedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[2];
				args.Args[0] = arg1;
				args.Args[1] = arg2;
				Atk.ChildrenChangedHandler handler = (Atk.ChildrenChangedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.Signal("children_changed")]
		public event Atk.ChildrenChangedHandler ChildrenChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "children_changed", new ChildrenChangedSignalDelegate(ChildrenChangedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "children_changed", new ChildrenChangedSignalDelegate(ChildrenChangedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FocusEventVMDelegate (IntPtr accessible, bool focus_in);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_focus_event (IntPtr gtype, FocusEventVMDelegate cb);

		static FocusEventVMDelegate FocusEventVMCallback;

		static void focusevent_cb (IntPtr accessible, bool focus_in)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnFocusEvent (focus_in);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFocusEvent (GLib.GType gtype)
		{
			if (FocusEventVMCallback == null)
				FocusEventVMCallback = new FocusEventVMDelegate (focusevent_cb);
			atksharp_object_override_focus_event (gtype.Val, FocusEventVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_focus_event (IntPtr accessible, bool focus_in);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverrideFocusEvent")]
		protected virtual void OnFocusEvent (bool focus_in)
		{
			atksharp_object_base_focus_event (Handle, focus_in);
		}

		[GLib.Signal("focus_event")]
		public event Atk.FocusEventHandler FocusEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "focus_event", typeof (Atk.FocusEventArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "focus_event", typeof (Atk.FocusEventArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PropertyChangeVMDelegate (IntPtr accessible, IntPtr values);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_property_change (IntPtr gtype, PropertyChangeVMDelegate cb);

		static PropertyChangeVMDelegate PropertyChangeVMCallback;

		static void propertychange_cb (IntPtr accessible, IntPtr values)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnPropertyChange (Atk.PropertyValues.New (values));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePropertyChange (GLib.GType gtype)
		{
			if (PropertyChangeVMCallback == null)
				PropertyChangeVMCallback = new PropertyChangeVMDelegate (propertychange_cb);
			atksharp_object_override_property_change (gtype.Val, PropertyChangeVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_property_change (IntPtr accessible, ref Atk.PropertyValues values);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverridePropertyChange")]
		protected virtual void OnPropertyChange (Atk.PropertyValues values)
		{
			atksharp_object_base_property_change (Handle, ref values);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PropertyChangeSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void PropertyChangeSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Atk.PropertyChangeArgs args = new Atk.PropertyChangeArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = Atk.PropertyValues.New (arg1);
				Atk.PropertyChangeEventHandler handler = (Atk.PropertyChangeEventHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.Signal("property_change")]
		public event Atk.PropertyChangeEventHandler PropertyChange {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "property_change", new PropertyChangeSignalDelegate(PropertyChangeSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "property_change", new PropertyChangeSignalDelegate(PropertyChangeSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StateChangeVMDelegate (IntPtr accessible, IntPtr name, bool state_set);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_state_change (IntPtr gtype, StateChangeVMDelegate cb);

		static StateChangeVMDelegate StateChangeVMCallback;

		static void statechange_cb (IntPtr accessible, IntPtr name, bool state_set)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnStateChange (GLib.Marshaller.Utf8PtrToString (name), state_set);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStateChange (GLib.GType gtype)
		{
			if (StateChangeVMCallback == null)
				StateChangeVMCallback = new StateChangeVMDelegate (statechange_cb);
			atksharp_object_override_state_change (gtype.Val, StateChangeVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_state_change (IntPtr accessible, IntPtr name, bool state_set);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverrideStateChange")]
		protected virtual void OnStateChange (string name, bool state_set)
		{
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			atksharp_object_base_state_change (Handle, native_name, state_set);
			GLib.Marshaller.Free (native_name);
		}

		[GLib.Signal("state_change")]
		public event Atk.StateChangeHandler StateChange {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "state_change", typeof (Atk.StateChangeArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "state_change", typeof (Atk.StateChangeArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VisibleDataChangedVMDelegate (IntPtr accessible);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_visible_data_changed (IntPtr gtype, VisibleDataChangedVMDelegate cb);

		static VisibleDataChangedVMDelegate VisibleDataChangedVMCallback;

		static void visibledatachanged_cb (IntPtr accessible)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnVisibleDataChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVisibleDataChanged (GLib.GType gtype)
		{
			if (VisibleDataChangedVMCallback == null)
				VisibleDataChangedVMCallback = new VisibleDataChangedVMDelegate (visibledatachanged_cb);
			atksharp_object_override_visible_data_changed (gtype.Val, VisibleDataChangedVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_visible_data_changed (IntPtr accessible);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverrideVisibleDataChanged")]
		protected virtual void OnVisibleDataChanged ()
		{
			atksharp_object_base_visible_data_changed (Handle);
		}

		[GLib.Signal("visible_data_changed")]
		public event System.EventHandler VisibleDataChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "visible_data_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "visible_data_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActiveDescendantChangedVMDelegate (IntPtr accessible, IntPtr child);

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_override_active_descendant_changed (IntPtr gtype, ActiveDescendantChangedVMDelegate cb);

		static ActiveDescendantChangedVMDelegate ActiveDescendantChangedVMCallback;

		static void activedescendantchanged_cb (IntPtr accessible, IntPtr child)
		{
			try {
				Object accessible_managed = GLib.Object.GetObject (accessible, false) as Object;
				accessible_managed.OnActiveDescendantChanged (child);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActiveDescendantChanged (GLib.GType gtype)
		{
			if (ActiveDescendantChangedVMCallback == null)
				ActiveDescendantChangedVMCallback = new ActiveDescendantChangedVMDelegate (activedescendantchanged_cb);
			atksharp_object_override_active_descendant_changed (gtype.Val, ActiveDescendantChangedVMCallback);
		}

		[DllImport ("atksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void atksharp_object_base_active_descendant_changed (IntPtr accessible, IntPtr child);

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Object), ConnectionMethod="OverrideActiveDescendantChanged")]
		protected virtual void OnActiveDescendantChanged (IntPtr child)
		{
			atksharp_object_base_active_descendant_changed (Handle, child);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActiveDescendantChangedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void ActiveDescendantChangedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Atk.ActiveDescendantChangedArgs args = new Atk.ActiveDescendantChangedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = arg1;
				Atk.ActiveDescendantChangedHandler handler = (Atk.ActiveDescendantChangedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.Signal("active_descendant_changed")]
		public event Atk.ActiveDescendantChangedHandler ActiveDescendantChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_descendant_changed", new ActiveDescendantChangedSignalDelegate(ActiveDescendantChangedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_descendant_changed", new ActiveDescendantChangedSignalDelegate(ActiveDescendantChangedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_object_add_relationship(IntPtr raw, int relationship, IntPtr target);

		public bool AddRelationship(Atk.RelationType relationship, Atk.Object target) {
			bool raw_ret = atk_object_add_relationship(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_object_get_index_in_parent(IntPtr raw);

		public int IndexInParent { 
			get {
				int raw_ret = atk_object_get_index_in_parent(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_object_get_mdi_zorder(IntPtr raw);

		public int MdiZorder { 
			get {
				int raw_ret = atk_object_get_mdi_zorder(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_object_get_n_accessible_children(IntPtr raw);

		public int NAccessibleChildren { 
			get {
				int raw_ret = atk_object_get_n_accessible_children(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_get_parent(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_set_parent(IntPtr raw, IntPtr parent);

		public Atk.Object Parent { 
			get {
				IntPtr raw_ret = atk_object_get_parent(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
			set {
				atk_object_set_parent(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_get_type();

		static GLib.GType _gtype = new GLib.GType (atk_object_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_initialize(IntPtr raw, IntPtr data);

		public void Initialize(IntPtr data) {
			atk_object_initialize(Handle, data);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_notify_state_change(IntPtr raw, ulong state, bool value);

		public void NotifyStateChange(ulong state, bool value) {
			atk_object_notify_state_change(Handle, state, value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_ref_accessible_child(IntPtr raw, int i);

		public Atk.Object RefAccessibleChild(int i) {
			IntPtr raw_ret = atk_object_ref_accessible_child(Handle, i);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_ref_relation_set(IntPtr raw);

		public Atk.RelationSet RefRelationSet() {
			IntPtr raw_ret = atk_object_ref_relation_set(Handle);
			Atk.RelationSet ret = GLib.Object.GetObject(raw_ret, true) as Atk.RelationSet;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_ref_state_set(IntPtr raw);

		public Atk.StateSet RefStateSet() {
			IntPtr raw_ret = atk_object_ref_state_set(Handle);
			Atk.StateSet ret = GLib.Object.GetObject(raw_ret, true) as Atk.StateSet;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_object_remove_relationship(IntPtr raw, int relationship, IntPtr target);

		public bool RemoveRelationship(Atk.RelationType relationship, Atk.Object target) {
			bool raw_ret = atk_object_remove_relationship(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Object.custom"
// Object.custom - Atk Object class customizations
//
// Author: Andres G. Aragoneses <aaragoneses@novell.com>
//
// Copyright (c) 2008 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_get_n_children (IntPtr type, NChildrenDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int atksharp_object_base_get_n_children (IntPtr raw);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int NChildrenDelegate (IntPtr raw);

		static NChildrenDelegate NChildrenCallback;

		static int NChildren_cb (IntPtr raw)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				return obj.OnGetNChildren ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return 0;
		}

		static void OverrideNChildren (GLib.GType gtype)
		{
			if (NChildrenCallback == null)
				NChildrenCallback = new NChildrenDelegate (NChildren_cb);
			atksharp_object_override_get_n_children (gtype.Val, NChildrenCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideNChildren")]
		protected virtual int OnGetNChildren() {
			return atksharp_object_base_get_n_children (Handle);
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_ref_child (IntPtr type, RefChildDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atksharp_object_base_ref_child (IntPtr raw, int i);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RefChildDelegate (IntPtr raw, int i);

		static RefChildDelegate RefChildCallback;

		static IntPtr RefChild_cb (IntPtr raw, int i)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				Atk.Object child = obj.OnRefChild (i);
				return child == null ? IntPtr.Zero : child.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return IntPtr.Zero;
		}


		static void OverrideRefChild (GLib.GType gtype)
		{
			if (RefChildCallback == null)
				RefChildCallback = new RefChildDelegate (RefChild_cb);
			atksharp_object_override_ref_child (gtype.Val, RefChildCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideRefChild")]
		protected virtual Atk.Object OnRefChild (int i)
		{
			IntPtr raw = atksharp_object_base_ref_child (Handle, i);
			return GLib.Object.GetObject (raw, true) as Atk.Object;
		}

		protected void EmitChildrenChanged (ChildrenChangedDetail detail, uint child_index, Atk.Object child)
		{
			GLib.Signal.Emit (this,
				"children-changed::" + detail.ToString ().ToLower (),
				child_index, child.Handle);
		}

		protected enum ChildrenChangedDetail
		{
			Add,
			Remove
		}

		protected void EmitVisibleDataChanged ()
		{
			GLib.Signal.Emit (this, "visible-data-changed");
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_ref_state_set (IntPtr type, RefStateSetDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atksharp_object_base_ref_state_set (IntPtr atk_obj);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RefStateSetDelegate (IntPtr raw);

		static RefStateSetDelegate RefStateSetCallback;

		static IntPtr RefStateSet_cb (IntPtr raw)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				Atk.StateSet state_set = obj.OnRefStateSet ();
				return state_set == null ? IntPtr.Zero : state_set.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return IntPtr.Zero;
		}

		static void OverrideRefStateSet (GLib.GType gtype)
		{
			if (RefStateSetCallback == null)
				RefStateSetCallback = new RefStateSetDelegate (RefStateSet_cb);
			atksharp_object_override_ref_state_set (gtype.Val, RefStateSetCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideRefStateSet")]
		protected virtual Atk.StateSet OnRefStateSet ()
		{
			IntPtr raw = atksharp_object_base_ref_state_set (Handle);
			return GLib.Object.GetObject (raw, true) as StateSet;
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_get_index_in_parent (IntPtr type, IndexInParentDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int atksharp_object_base_get_index_in_parent (IntPtr raw);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int IndexInParentDelegate (IntPtr raw);

		static IndexInParentDelegate IndexInParentCallback;

		static int IndexInParent_cb (IntPtr raw)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				return obj.OnGetIndexInParent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return -1;
		}

		static void OverrideIndexInParent (GLib.GType gtype)
		{
			if (IndexInParentCallback == null)
				IndexInParentCallback = new IndexInParentDelegate (IndexInParent_cb);
			atksharp_object_override_get_index_in_parent (gtype.Val, IndexInParentCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideIndexInParent")]
		protected virtual int OnGetIndexInParent() {
			return atksharp_object_base_get_index_in_parent (Handle);
		}

		public void NotifyStateChange (Atk.StateType state, bool value) {
			NotifyStateChange ((ulong)state, value);
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_ref_relation_set (IntPtr type, RefRelationSetDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atksharp_object_base_ref_relation_set (IntPtr atk_obj);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RefRelationSetDelegate (IntPtr raw);

		static RefRelationSetDelegate RefRelationSetCallback;

		static IntPtr RefRelationSet_cb (IntPtr raw)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				Atk.RelationSet relation_set = obj.OnRefRelationSet ();
				return relation_set == null ? IntPtr.Zero : relation_set.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return IntPtr.Zero;
		}


		static void OverrideRefRelationSet (GLib.GType gtype)
		{
			if (RefRelationSetCallback == null)
				RefRelationSetCallback = new RefRelationSetDelegate (RefRelationSet_cb);
			atksharp_object_override_ref_relation_set (gtype.Val, RefRelationSetCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideRefRelationSet")]
		protected virtual Atk.RelationSet OnRefRelationSet ()
		{
			IntPtr raw = atksharp_object_base_ref_relation_set (Handle);
			return GLib.Object.GetObject (raw, true) as RelationSet;
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_object_override_get_attributes (IntPtr type, GetAttributesDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atksharp_object_base_get_attributes (IntPtr raw);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAttributesDelegate (IntPtr raw);

		static GetAttributesDelegate GetAttributesCallback;

		static IntPtr GetAttributes_cb (IntPtr raw)
		{
			try {
				Atk.Object obj = GLib.Object.GetObject (raw, false) as Atk.Object;
				Attribute [] attribute_set = obj.OnGetAttributes ();
				if (attribute_set == null)
					return IntPtr.Zero;
				return new GLib.SList (attribute_set, typeof (Attribute), false, false).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			return IntPtr.Zero;
		}


		static void OverrideGetAttributes (GLib.GType gtype)
		{
			if (GetAttributesCallback == null)
				GetAttributesCallback = new GetAttributesDelegate (GetAttributes_cb);
			atksharp_object_override_get_attributes (gtype.Val, GetAttributesCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof(Atk.Object), ConnectionMethod="OverrideGetAttributes")]
		protected virtual Attribute [] OnGetAttributes ()
		{
			IntPtr raw = atksharp_object_base_get_attributes(Handle);
			if (raw == IntPtr.Zero)
				return new Attribute [0];

			Attribute[] attrs = GLib.Marshaller.ListPtrToArray<Attribute> (raw, typeof(GLib.SList), false, false);
			atk_attribute_set_free(raw);
			return attrs;
		}

		protected void EmitFocusEvent (bool gained)
		{
			GLib.Signal.Emit (this, "focus-event", gained);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_attribute_set_free(IntPtr raw);

		public Atk.Attribute[] Attributes { 
			get {
				return OnGetAttributes();
			}
		}

		static System.Collections.Generic.Dictionary<uint, GCHandle> handlers = new System.Collections.Generic.Dictionary<uint, GCHandle> ();

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_object_connect_property_change_handler(IntPtr raw, AtkSharp.PropertyChangeHandlerNative handler);

		public uint ConnectPropertyChangeHandler(Atk.PropertyChangeHandler handler) {
			AtkSharp.PropertyChangeHandlerWrapper handler_wrapper = new AtkSharp.PropertyChangeHandlerWrapper (handler);
			var gch = GCHandle.Alloc (handler_wrapper);

			uint ret = atk_object_connect_property_change_handler(Handle, handler_wrapper.NativeDelegate);

			if (ret != 0) {
				lock (handlers)
					handlers.Add (ret, gch);
			} else
				gch.Free ();

			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_object_remove_property_change_handler(IntPtr raw, uint handler_id);

		public void RemovePropertyChangeHandler(uint handler_id) {
			atk_object_remove_property_change_handler(Handle, handler_id);

			GCHandle gch;

			lock (handlers) {
				handlers.TryGetValue (handler_id, out gch);
				handlers.Remove (handler_id);
			}
			gch.Free();
		}

#endregion
	}

	internal class ObjectAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_object_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_object_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
