// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GObjectAccessible]
	public class GObjectAccessible : Atk.Object {

		[Obsolete]
		protected GObjectAccessible(GLib.GType gtype) : base(gtype) {}
		public GObjectAccessible(IntPtr raw) : base(raw) {}

		protected GObjectAccessible() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_gobject_accessible_for_object(IntPtr obj);

		public static Atk.Object ForObject(GLib.Object obj) {
			IntPtr raw_ret = atk_gobject_accessible_for_object(obj == null ? IntPtr.Zero : obj.Handle);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_gobject_accessible_get_object(IntPtr raw);

		public GLib.Object Object { 
			get {
				IntPtr raw_ret = atk_gobject_accessible_get_object(Handle);
				GLib.Object ret = GLib.Object.GetObject (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_gobject_accessible_get_type();

		static GLib.GType _gtype = new GLib.GType (atk_gobject_accessible_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class GObjectAccessibleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_gobject_accessible_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_gobject_accessible_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
