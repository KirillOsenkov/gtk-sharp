// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[NoOpObject]
	public class NoOpObject : Atk.Object, Atk.Component, Atk.Action, Atk.EditableText, Atk.Image, Atk.Selection, Atk.Text, Atk.Hypertext, Atk.Value, Atk.Document, Atk.Table {

		[Obsolete]
		protected NoOpObject(GLib.GType gtype) : base(gtype) {}
		public NoOpObject(IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_no_op_object_new(IntPtr obj);

		public NoOpObject (GLib.Object obj) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (NoOpObject)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = atk_no_op_object_new(obj == null ? IntPtr.Zero : obj.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_no_op_object_get_type();

		static GLib.GType _gtype = new GLib.GType (atk_no_op_object_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_contains(IntPtr raw, int x, int y, int coord_type);

		public bool Contains(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_contains(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double atk_component_get_alpha(IntPtr raw);

		public double Alpha { 
			get {
				double raw_ret = atk_component_get_alpha(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_extents(IntPtr raw, out int x, out int y, out int width, out int height, int coord_type);

		public void GetExtents(out int x, out int y, out int width, out int height, Atk.CoordType coord_type) {
			atk_component_get_extents(Handle, out x, out y, out width, out height, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_layer(IntPtr raw);

		public new Atk.Layer Layer { 
			get {
				int raw_ret = atk_component_get_layer(Handle);
				Atk.Layer ret = (Atk.Layer) raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_mdi_zorder(IntPtr raw);

		public new int MdiZorder { 
			get {
				int raw_ret = atk_component_get_mdi_zorder(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetPosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_component_get_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			atk_component_get_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_grab_focus(IntPtr raw);

		public bool GrabFocus() {
			bool raw_ret = atk_component_grab_focus(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_component_ref_accessible_at_point(IntPtr raw, int x, int y, int coord_type);

		public Atk.Object RefAccessibleAtPoint(int x, int y, Atk.CoordType coord_type) {
			IntPtr raw_ret = atk_component_ref_accessible_at_point(Handle, x, y, (int) coord_type);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_extents(IntPtr raw, int x, int y, int width, int height, int coord_type);

		public bool SetExtents(int x, int y, int width, int height, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_extents(Handle, x, y, width, height, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_position(IntPtr raw, int x, int y, int coord_type);

		public bool SetPosition(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_position(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_size(IntPtr raw, int width, int height);

		public bool SetSize(int width, int height) {
			bool raw_ret = atk_component_set_size(Handle, width, height);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BoundsChangedVMDelegate (IntPtr component, IntPtr bounds);

		static BoundsChangedVMDelegate BoundsChangedVMCallback;

		static void boundschanged_cb (IntPtr component, IntPtr bounds)
		{
			try {
				NoOpObject component_managed = GLib.Object.GetObject (component, false) as NoOpObject;
				component_managed.OnBoundsChanged (Atk.Rectangle.New (bounds));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideBoundsChanged (GLib.GType gtype)
		{
			if (BoundsChangedVMCallback == null)
				BoundsChangedVMCallback = new BoundsChangedVMDelegate (boundschanged_cb);
			OverrideVirtualMethod (gtype, "bounds_changed", BoundsChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideBoundsChanged")]
		protected virtual void OnBoundsChanged (Atk.Rectangle bounds)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (bounds)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("bounds_changed")]
		public event Atk.BoundsChangedHandler BoundsChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "bounds_changed", typeof (Atk.BoundsChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "bounds_changed", typeof (Atk.BoundsChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_do_action(IntPtr raw, int i);

		public bool DoAction(int i) {
			bool raw_ret = atk_action_do_action(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_description(IntPtr raw, int i);

		public string GetDescription(int i) {
			IntPtr raw_ret = atk_action_get_description(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_keybinding(IntPtr raw, int i);

		public string GetKeybinding(int i) {
			IntPtr raw_ret = atk_action_get_keybinding(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_localized_name(IntPtr raw, int i);

		public string GetLocalizedName(int i) {
			IntPtr raw_ret = atk_action_get_localized_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_action_get_n_actions(IntPtr raw);

		public int NActions { 
			get {
				int raw_ret = atk_action_get_n_actions(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_name(IntPtr raw, int i);

		public string GetName(int i) {
			IntPtr raw_ret = atk_action_get_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_set_description(IntPtr raw, int i, IntPtr desc);

		public bool SetDescription(int i, string desc) {
			IntPtr native_desc = GLib.Marshaller.StringToPtrGStrdup (desc);
			bool raw_ret = atk_action_set_description(Handle, i, native_desc);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_desc);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_copy_text(IntPtr raw, int start_pos, int end_pos);

		public void CopyText(int start_pos, int end_pos) {
			atk_editable_text_copy_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_cut_text(IntPtr raw, int start_pos, int end_pos);

		public void CutText(int start_pos, int end_pos) {
			atk_editable_text_cut_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_delete_text(IntPtr raw, int start_pos, int end_pos);

		public void DeleteText(int start_pos, int end_pos) {
			atk_editable_text_delete_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_insert_text(IntPtr raw, IntPtr str1ng, int length, ref int position);

		public void InsertText(string str1ng, ref int position) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			atk_editable_text_insert_text(Handle, native_str1ng, System.Text.Encoding.UTF8.GetByteCount (str1ng), ref position);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_paste_text(IntPtr raw, int position);

		public void PasteText(int position) {
			atk_editable_text_paste_text(Handle, position);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_editable_text_set_run_attributes(IntPtr raw, IntPtr attrib_set, int start_offset, int end_offset);

		public bool SetRunAttributes(GLib.SList attrib_set, int start_offset, int end_offset) {
			bool raw_ret = atk_editable_text_set_run_attributes(Handle, attrib_set == null ? IntPtr.Zero : attrib_set.Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_set_text_contents(IntPtr raw, IntPtr str1ng);

		public string TextContents { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				atk_editable_text_set_text_contents(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_description(IntPtr raw);

		public string ImageDescription { 
			get {
				IntPtr raw_ret = atk_image_get_image_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_locale(IntPtr raw);

		public string ImageLocale { 
			get {
				IntPtr raw_ret = atk_image_get_image_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetImagePosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_image_get_image_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_size(IntPtr raw, out int width, out int height);

		public void GetImageSize(out int width, out int height) {
			atk_image_get_image_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_image_set_image_description(IntPtr raw, IntPtr description);

		public bool SetImageDescription(string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			bool raw_ret = atk_image_set_image_description(Handle, native_description);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_description);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_add_selection(IntPtr raw, int i);

		public bool AddSelection(int i) {
			bool raw_ret = atk_selection_add_selection(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_clear_selection(IntPtr raw);

		public bool ClearSelection() {
			bool raw_ret = atk_selection_clear_selection(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_selection_get_selection_count(IntPtr raw);

		public int SelectionCount { 
			get {
				int raw_ret = atk_selection_get_selection_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_is_child_selected(IntPtr raw, int i);

		public bool IsChildSelected(int i) {
			bool raw_ret = atk_selection_is_child_selected(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_selection_ref_selection(IntPtr raw, int i);

		public Atk.Object RefSelection(int i) {
			IntPtr raw_ret = atk_selection_ref_selection(Handle, i);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_remove_selection(IntPtr raw, int i);

		bool Atk.Selection.RemoveSelection(int i) {
			bool raw_ret = atk_selection_remove_selection(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_selection_select_all_selection(IntPtr raw);

		public bool SelectAllSelection() {
			bool raw_ret = atk_selection_select_all_selection(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionChangedVMDelegate (IntPtr selection);

		static SelectionChangedVMDelegate SelectionChangedVMCallback;

		static void selectionchanged_cb (IntPtr selection)
		{
			try {
				NoOpObject selection_managed = GLib.Object.GetObject (selection, false) as NoOpObject;
				selection_managed.OnSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectionChanged (GLib.GType gtype)
		{
			if (SelectionChangedVMCallback == null)
				SelectionChangedVMCallback = new SelectionChangedVMDelegate (selectionchanged_cb);
			OverrideVirtualMethod (gtype, "selection_changed", SelectionChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideSelectionChanged")]
		protected virtual void OnSelectionChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("selection_changed")]
		public event System.EventHandler SelectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_add_selection(IntPtr raw, int start_offset, int end_offset);

		public bool AddSelection(int start_offset, int end_offset) {
			bool raw_ret = atk_text_add_selection(Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_bounded_ranges(IntPtr raw, ref Atk.TextRectangle rect, int coord_type, int x_clip_type, int y_clip_type);

		public Atk.TextRange GetBoundedRanges(Atk.TextRectangle rect, Atk.CoordType coord_type, Atk.TextClipType x_clip_type, Atk.TextClipType y_clip_type) {
			IntPtr raw_ret = atk_text_get_bounded_ranges(Handle, ref rect, (int) coord_type, (int) x_clip_type, (int) y_clip_type);
			Atk.TextRange ret = Atk.TextRange.New (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_caret_offset(IntPtr raw);

		public int CaretOffset { 
			get {
				int raw_ret = atk_text_get_caret_offset(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_text_get_character_at_offset(IntPtr raw, int offset);

		public char GetCharacterAtOffset(int offset) {
			uint raw_ret = atk_text_get_character_at_offset(Handle, offset);
			char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_character_count(IntPtr raw);

		public int CharacterCount { 
			get {
				int raw_ret = atk_text_get_character_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_character_extents(IntPtr raw, int offset, out int x, out int y, out int width, out int height, int coords);

		public void GetCharacterExtents(int offset, out int x, out int y, out int width, out int height, Atk.CoordType coords) {
			atk_text_get_character_extents(Handle, offset, out x, out y, out width, out height, (int) coords);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_n_selections(IntPtr raw);

		public int NSelections { 
			get {
				int raw_ret = atk_text_get_n_selections(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_offset_at_point(IntPtr raw, int x, int y, int coords);

		public int GetOffsetAtPoint(int x, int y, Atk.CoordType coords) {
			int raw_ret = atk_text_get_offset_at_point(Handle, x, y, (int) coords);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_range_extents(IntPtr raw, int start_offset, int end_offset, int coord_type, ref Atk.TextRectangle rect);

		public Atk.TextRectangle GetRangeExtents(int start_offset, int end_offset, Atk.CoordType coord_type) {
			Atk.TextRectangle rect;
			rect = new Atk.TextRectangle();
			atk_text_get_range_extents(Handle, start_offset, end_offset, (int) coord_type, ref rect);
			return rect;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_selection(IntPtr raw, int selection_num, out int start_offset, out int end_offset);

		public string GetSelection(int selection_num, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_selection(Handle, selection_num, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text(IntPtr raw, int start_offset, int end_offset);

		public string GetText(int start_offset, int end_offset) {
			IntPtr raw_ret = atk_text_get_text(Handle, start_offset, end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_after_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAfterOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_after_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_at_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAtOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_at_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_before_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextBeforeOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_before_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_remove_selection(IntPtr raw, int selection_num);

		bool Atk.Text.RemoveSelection(int selection_num) {
			bool raw_ret = atk_text_remove_selection(Handle, selection_num);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_caret_offset(IntPtr raw, int offset);

		public bool SetCaretOffset(int offset) {
			bool raw_ret = atk_text_set_caret_offset(Handle, offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_selection(IntPtr raw, int selection_num, int start_offset, int end_offset);

		public bool SetSelection(int selection_num, int start_offset, int end_offset) {
			bool raw_ret = atk_text_set_selection(Handle, selection_num, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextChangedVMDelegate (IntPtr text, int position, int length);

		static TextChangedVMDelegate TextChangedVMCallback;

		static void textchanged_cb (IntPtr text, int position, int length)
		{
			try {
				NoOpObject text_managed = GLib.Object.GetObject (text, false) as NoOpObject;
				text_managed.OnTextChanged (position, length);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextChanged (GLib.GType gtype)
		{
			if (TextChangedVMCallback == null)
				TextChangedVMCallback = new TextChangedVMDelegate (textchanged_cb);
			OverrideVirtualMethod (gtype, "text_changed", TextChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextChanged")]
		protected virtual void OnTextChanged (int position, int length)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (position)) {
						using (inst_and_params [2] = new GLib.Value (length)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("text_changed")]
		public event Atk.TextChangedHandler TextChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Atk.TextChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Atk.TextChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextCaretMovedVMDelegate (IntPtr text, int location);

		static TextCaretMovedVMDelegate TextCaretMovedVMCallback;

		static void textcaretmoved_cb (IntPtr text, int location)
		{
			try {
				NoOpObject text_managed = GLib.Object.GetObject (text, false) as NoOpObject;
				text_managed.OnTextCaretMoved (location);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextCaretMoved (GLib.GType gtype)
		{
			if (TextCaretMovedVMCallback == null)
				TextCaretMovedVMCallback = new TextCaretMovedVMDelegate (textcaretmoved_cb);
			OverrideVirtualMethod (gtype, "text_caret_moved", TextCaretMovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextCaretMoved")]
		protected virtual void OnTextCaretMoved (int location)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (location)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("text_caret_moved")]
		public event Atk.TextCaretMovedHandler TextCaretMoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_caret_moved", typeof (Atk.TextCaretMovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_caret_moved", typeof (Atk.TextCaretMovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextSelectionChangedVMDelegate (IntPtr text);

		static TextSelectionChangedVMDelegate TextSelectionChangedVMCallback;

		static void textselectionchanged_cb (IntPtr text)
		{
			try {
				NoOpObject text_managed = GLib.Object.GetObject (text, false) as NoOpObject;
				text_managed.OnTextSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextSelectionChanged (GLib.GType gtype)
		{
			if (TextSelectionChangedVMCallback == null)
				TextSelectionChangedVMCallback = new TextSelectionChangedVMDelegate (textselectionchanged_cb);
			OverrideVirtualMethod (gtype, "text_selection_changed", TextSelectionChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextSelectionChanged")]
		protected virtual void OnTextSelectionChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("text_selection_changed")]
		public event System.EventHandler TextSelectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_selection_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_selection_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextAttributesChangedVMDelegate (IntPtr text);

		static TextAttributesChangedVMDelegate TextAttributesChangedVMCallback;

		static void textattributeschanged_cb (IntPtr text)
		{
			try {
				NoOpObject text_managed = GLib.Object.GetObject (text, false) as NoOpObject;
				text_managed.OnTextAttributesChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextAttributesChanged (GLib.GType gtype)
		{
			if (TextAttributesChangedVMCallback == null)
				TextAttributesChangedVMCallback = new TextAttributesChangedVMDelegate (textattributeschanged_cb);
			OverrideVirtualMethod (gtype, "text_attributes_changed", TextAttributesChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideTextAttributesChanged")]
		protected virtual void OnTextAttributesChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("text_attributes_changed")]
		public event System.EventHandler TextAttributesChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_attributes_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_attributes_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hypertext_get_link(IntPtr raw, int link_index);

		public Atk.Hyperlink GetLink(int link_index) {
			IntPtr raw_ret = atk_hypertext_get_link(Handle, link_index);
			Atk.Hyperlink ret = GLib.Object.GetObject(raw_ret) as Atk.Hyperlink;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_link_index(IntPtr raw, int char_index);

		public int GetLinkIndex(int char_index) {
			int raw_ret = atk_hypertext_get_link_index(Handle, char_index);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_n_links(IntPtr raw);

		public int NLinks { 
			get {
				int raw_ret = atk_hypertext_get_n_links(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LinkSelectedVMDelegate (IntPtr hypertext, int link_index);

		static LinkSelectedVMDelegate LinkSelectedVMCallback;

		static void linkselected_cb (IntPtr hypertext, int link_index)
		{
			try {
				NoOpObject hypertext_managed = GLib.Object.GetObject (hypertext, false) as NoOpObject;
				hypertext_managed.OnLinkSelected (link_index);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideLinkSelected (GLib.GType gtype)
		{
			if (LinkSelectedVMCallback == null)
				LinkSelectedVMCallback = new LinkSelectedVMDelegate (linkselected_cb);
			OverrideVirtualMethod (gtype, "link_selected", LinkSelectedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLinkSelected")]
		protected virtual void OnLinkSelected (int link_index)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (link_index)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("link_selected")]
		public event Atk.LinkSelectedHandler LinkSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "link_selected", typeof (Atk.LinkSelectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "link_selected", typeof (Atk.LinkSelectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_current_value(IntPtr raw, ref GLib.Value value);

		public void GetCurrentValue(ref GLib.Value value) {
			atk_value_get_current_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_maximum_value(IntPtr raw, ref GLib.Value value);

		public void GetMaximumValue(ref GLib.Value value) {
			atk_value_get_maximum_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_increment(IntPtr raw, ref GLib.Value value);

		public void GetMinimumIncrement(ref GLib.Value value) {
			atk_value_get_minimum_increment(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_value(IntPtr raw, ref GLib.Value value);

		public void GetMinimumValue(ref GLib.Value value) {
			atk_value_get_minimum_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_value_set_current_value(IntPtr raw, ref GLib.Value value);

		public bool SetCurrentValue(GLib.Value value) {
			bool raw_ret = atk_value_set_current_value(Handle, ref value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attribute_value(IntPtr raw, IntPtr attribute_name);

		public string GetAttributeValue(string attribute_name) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr raw_ret = atk_document_get_attribute_value(Handle, native_attribute_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_attribute_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attributes(IntPtr raw);

		public Atk.Attribute[] Attributes { 
			get {
				IntPtr raw_ret = atk_document_get_attributes(Handle);
				Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document(IntPtr raw);

		public IntPtr TheDocument { 
			get {
				IntPtr raw_ret = atk_document_get_document(Handle);
				IntPtr ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document_type(IntPtr raw);

		public string DocumentType { 
			get {
				IntPtr raw_ret = atk_document_get_document_type(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_locale(IntPtr raw);

		public string Locale { 
			get {
				IntPtr raw_ret = atk_document_get_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_document_set_attribute_value(IntPtr raw, IntPtr attribute_name, IntPtr attribute_value);

		public bool SetAttributeValue(string attribute_name, string attribute_value) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr native_attribute_value = GLib.Marshaller.StringToPtrGStrdup (attribute_value);
			bool raw_ret = atk_document_set_attribute_value(Handle, native_attribute_name, native_attribute_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_attribute_name);
			GLib.Marshaller.Free (native_attribute_value);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LoadCompleteVMDelegate (IntPtr inst);

		static LoadCompleteVMDelegate LoadCompleteVMCallback;

		static void loadcomplete_cb (IntPtr inst)
		{
			try {
				NoOpObject inst_managed = GLib.Object.GetObject (inst, false) as NoOpObject;
				inst_managed.OnLoadComplete ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideLoadComplete (GLib.GType gtype)
		{
			if (LoadCompleteVMCallback == null)
				LoadCompleteVMCallback = new LoadCompleteVMDelegate (loadcomplete_cb);
			OverrideVirtualMethod (gtype, "load_complete", LoadCompleteVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLoadComplete")]
		protected virtual void OnLoadComplete ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("load_complete")]
		public event System.EventHandler LoadComplete {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "load_complete");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "load_complete");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReloadVMDelegate (IntPtr inst);

		static ReloadVMDelegate ReloadVMCallback;

		static void reload_cb (IntPtr inst)
		{
			try {
				NoOpObject inst_managed = GLib.Object.GetObject (inst, false) as NoOpObject;
				inst_managed.OnReload ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideReload (GLib.GType gtype)
		{
			if (ReloadVMCallback == null)
				ReloadVMCallback = new ReloadVMDelegate (reload_cb);
			OverrideVirtualMethod (gtype, "reload", ReloadVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideReload")]
		protected virtual void OnReload ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("reload")]
		public event System.EventHandler Reload {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "reload");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "reload");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LoadStoppedVMDelegate (IntPtr inst);

		static LoadStoppedVMDelegate LoadStoppedVMCallback;

		static void loadstopped_cb (IntPtr inst)
		{
			try {
				NoOpObject inst_managed = GLib.Object.GetObject (inst, false) as NoOpObject;
				inst_managed.OnLoadStopped ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideLoadStopped (GLib.GType gtype)
		{
			if (LoadStoppedVMCallback == null)
				LoadStoppedVMCallback = new LoadStoppedVMDelegate (loadstopped_cb);
			OverrideVirtualMethod (gtype, "load_stopped", LoadStoppedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideLoadStopped")]
		protected virtual void OnLoadStopped ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("load_stopped")]
		public event System.EventHandler LoadStopped {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "load_stopped");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "load_stopped");
				sig.RemoveDelegate (value);
			}
		}

#endregion
#region Customized extensions
#line 1 "NoOpObject.custom"
// This file's code was originally part of the generated NoOpObject implementation
// of the Atk.Table interface, but as part of https://bugzilla.novell.com/show_bug.cgi?id=512477
// it was pulled out here so that the SelectedRows/Columns properties could be manually implemented.

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_n_rows(IntPtr raw);

		public int NRows {
			get {
				int raw_ret = atk_table_get_n_rows(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_add_row_selection(IntPtr raw, int row);

		public bool AddRowSelection(int row) {
			bool raw_ret = atk_table_add_row_selection(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_column_extent_at(IntPtr raw, int row, int column);

		public int GetColumnExtentAt(int row, int column) {
			int raw_ret = atk_table_get_column_extent_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_column_header(IntPtr raw, int column);

		public Atk.Object GetColumnHeader(int column) {
			IntPtr raw_ret = atk_table_get_column_header(Handle, column);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_is_selected(IntPtr raw, int row, int column);

		public bool IsSelected(int row, int column) {
			bool raw_ret = atk_table_is_selected(Handle, row, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_summary(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_summary(IntPtr raw, IntPtr accessible);

		public Atk.Object Summary {
			get {
				IntPtr raw_ret = atk_table_get_summary(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
			set {
				atk_table_set_summary(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_column_description(IntPtr raw, int column);

		public string GetColumnDescription(int column) {
			IntPtr raw_ret = atk_table_get_column_description(Handle, column);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_add_column_selection(IntPtr raw, int column);

		public bool AddColumnSelection(int column) {
			bool raw_ret = atk_table_add_column_selection(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_row_header(IntPtr raw, int row, IntPtr header);

		public void SetRowHeader(int row, Atk.Object header) {
			atk_table_set_row_header(Handle, row, header == null ? IntPtr.Zero : header.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_row_description(IntPtr raw, int row);

		public string GetRowDescription(int row) {
			IntPtr raw_ret = atk_table_get_row_description(Handle, row);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_ref_at(IntPtr raw, int row, int column);

		public Atk.Object RefAt(int row, int column) {
			IntPtr raw_ret = atk_table_ref_at(Handle, row, column);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_column_description(IntPtr raw, int column, IntPtr description);

		public void SetColumnDescription(int column, string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			atk_table_set_column_description(Handle, column, native_description);
			GLib.Marshaller.Free (native_description);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_index_at(IntPtr raw, int row, int column);

		public int GetIndexAt(int row, int column) {
			int raw_ret = atk_table_get_index_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_row_header(IntPtr raw, int row);

		public Atk.Object GetRowHeader(int row) {
			IntPtr raw_ret = atk_table_get_row_header(Handle, row);
			Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_is_column_selected(IntPtr raw, int column);

		public bool IsColumnSelected(int column) {
			bool raw_ret = atk_table_is_column_selected(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_selected_rows(IntPtr raw, out int [] selected);

		public int [] SelectedRows {
            get {
                int [] selected = null;
                int raw_ret = atk_table_get_selected_rows(Handle, out selected);
                return raw_ret == 0 ? Array.Empty<int> () : selected;
            }
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_row_description(IntPtr raw, int row, IntPtr description);

		public void SetRowDescription(int row, string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			atk_table_set_row_description(Handle, row, native_description);
			GLib.Marshaller.Free (native_description);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_is_row_selected(IntPtr raw, int row);

		public bool IsRowSelected(int row) {
			bool raw_ret = atk_table_is_row_selected(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_row_extent_at(IntPtr raw, int row, int column);

		public int GetRowExtentAt(int row, int column) {
			int raw_ret = atk_table_get_row_extent_at(Handle, row, column);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_selected_columns(IntPtr raw, out int [] selected);

		public int [] SelectedColumns {
            get {
                int [] selected = null;
                int raw_ret = atk_table_get_selected_columns(Handle, out selected);
                return raw_ret == 0 ? Array.Empty<int> () : selected;
            }
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_column_at_index(IntPtr raw, int index_);

		public int GetColumnAtIndex(int index_) {
			int raw_ret = atk_table_get_column_at_index(Handle, index_);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_row_at_index(IntPtr raw, int index_);

		public int GetRowAtIndex(int index_) {
			int raw_ret = atk_table_get_row_at_index(Handle, index_);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr atk_table_get_caption(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_caption(IntPtr raw, IntPtr caption);

		public Atk.Object Caption {
			get {
				IntPtr raw_ret = atk_table_get_caption(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
			set {
				atk_table_set_caption(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int atk_table_get_n_columns(IntPtr raw);

		public int NColumns {
			get {
				int raw_ret = atk_table_get_n_columns(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_remove_row_selection(IntPtr raw, int row);

		public bool RemoveRowSelection(int row) {
			bool raw_ret = atk_table_remove_row_selection(Handle, row);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool atk_table_remove_column_selection(IntPtr raw, int column);

		public bool RemoveColumnSelection(int column) {
			bool raw_ret = atk_table_remove_column_selection(Handle, column);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void atk_table_set_column_header(IntPtr raw, int column, IntPtr header);

		public void SetColumnHeader(int column, Atk.Object header) {
			atk_table_set_column_header(Handle, column, header == null ? IntPtr.Zero : header.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnReorderedVMDelegate (IntPtr table);

		static ColumnReorderedVMDelegate ColumnReorderedVMCallback;

		static void columnreordered_cb (IntPtr table)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnColumnReordered ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideColumnReordered (GLib.GType gtype)
		{
			if (ColumnReorderedVMCallback == null)
				ColumnReorderedVMCallback = new ColumnReorderedVMDelegate (columnreordered_cb);
			OverrideVirtualMethod (gtype, "column_reordered", ColumnReorderedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnReordered")]
		protected virtual void OnColumnReordered ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("column_reordered")]
		public event System.EventHandler ColumnReordered {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_reordered");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_reordered");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnDeletedVMDelegate (IntPtr table, int column, int num_deleted);

		static ColumnDeletedVMDelegate ColumnDeletedVMCallback;

		static void columndeleted_cb (IntPtr table, int column, int num_deleted)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnColumnDeleted (column, num_deleted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideColumnDeleted (GLib.GType gtype)
		{
			if (ColumnDeletedVMCallback == null)
				ColumnDeletedVMCallback = new ColumnDeletedVMDelegate (columndeleted_cb);
			OverrideVirtualMethod (gtype, "column_deleted", ColumnDeletedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnDeleted")]
		protected virtual void OnColumnDeleted (int column, int num_deleted)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params [0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (column)) {
						using (inst_and_params [2] = new GLib.Value (num_deleted)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("column_deleted")]
		public event Atk.ColumnDeletedHandler ColumnDeleted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_deleted", typeof (Atk.ColumnDeletedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_deleted", typeof (Atk.ColumnDeletedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowReorderedVMDelegate (IntPtr table);

		static RowReorderedVMDelegate RowReorderedVMCallback;

		static void rowreordered_cb (IntPtr table)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnRowReordered ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRowReordered (GLib.GType gtype)
		{
			if (RowReorderedVMCallback == null)
				RowReorderedVMCallback = new RowReorderedVMDelegate (rowreordered_cb);
			OverrideVirtualMethod (gtype, "row_reordered", RowReorderedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowReordered")]
		protected virtual void OnRowReordered ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params [0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("row_reordered")]
		public event System.EventHandler RowReordered {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_reordered");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_reordered");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnInsertedVMDelegate (IntPtr table, int column, int num_inserted);

		static ColumnInsertedVMDelegate ColumnInsertedVMCallback;

		static void columninserted_cb (IntPtr table, int column, int num_inserted)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnColumnInserted (column, num_inserted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideColumnInserted (GLib.GType gtype)
		{
			if (ColumnInsertedVMCallback == null)
				ColumnInsertedVMCallback = new ColumnInsertedVMDelegate (columninserted_cb);
			OverrideVirtualMethod (gtype, "column_inserted", ColumnInsertedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideColumnInserted")]
		protected virtual void OnColumnInserted (int column, int num_inserted)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params [0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (column)) {
						using (inst_and_params [2] = new GLib.Value (num_inserted)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("column_inserted")]
		public event Atk.ColumnInsertedHandler ColumnInserted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_inserted", typeof (Atk.ColumnInsertedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "column_inserted", typeof (Atk.ColumnInsertedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ModelChangedVMDelegate (IntPtr table);

		static ModelChangedVMDelegate ModelChangedVMCallback;

		static void modelchanged_cb (IntPtr table)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnModelChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideModelChanged (GLib.GType gtype)
		{
			if (ModelChangedVMCallback == null)
				ModelChangedVMCallback = new ModelChangedVMDelegate (modelchanged_cb);
			OverrideVirtualMethod (gtype, "model_changed", ModelChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideModelChanged")]
		protected virtual void OnModelChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params [0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("model_changed")]
		public event System.EventHandler ModelChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "model_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "model_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowInsertedVMDelegate (IntPtr table, int row, int num_inserted);

		static RowInsertedVMDelegate RowInsertedVMCallback;

		static void rowinserted_cb (IntPtr table, int row, int num_inserted)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnRowInserted (row, num_inserted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRowInserted (GLib.GType gtype)
		{
			if (RowInsertedVMCallback == null)
				RowInsertedVMCallback = new RowInsertedVMDelegate (rowinserted_cb);
			OverrideVirtualMethod (gtype, "row_inserted", RowInsertedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowInserted")]
		protected virtual void OnRowInserted (int row, int num_inserted)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params [0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (row)) {
						using (inst_and_params [2] = new GLib.Value (num_inserted)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("row_inserted")]
		public event Atk.RowInsertedHandler RowInserted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_inserted", typeof (Atk.RowInsertedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_inserted", typeof (Atk.RowInsertedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowDeletedVMDelegate (IntPtr table, int row, int num_deleted);

		static RowDeletedVMDelegate RowDeletedVMCallback;

		static void rowdeleted_cb (IntPtr table, int row, int num_deleted)
		{
			try {
				NoOpObject table_managed = GLib.Object.GetObject (table, false) as NoOpObject;
				table_managed.OnRowDeleted (row, num_deleted);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRowDeleted (GLib.GType gtype)
		{
			if (RowDeletedVMCallback == null)
				RowDeletedVMCallback = new RowDeletedVMDelegate (rowdeleted_cb);
			OverrideVirtualMethod (gtype, "row_deleted", RowDeletedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.NoOpObject), ConnectionMethod="OverrideRowDeleted")]
		protected virtual void OnRowDeleted (int row, int num_deleted)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params [0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (row)) {
						using (inst_and_params [2] = new GLib.Value (num_deleted)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("row_deleted")]
		public event Atk.RowDeletedHandler RowDeleted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_deleted", typeof (Atk.RowDeletedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "row_deleted", typeof (Atk.RowDeletedArgs));
				sig.RemoveDelegate (value);
			}
		}
		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_attribute_set_free(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_run_attributes(IntPtr raw, int offset, out int start_offset, out int end_offset);

		public Atk.Attribute[] GetRunAttributes(int offset, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_run_attributes(Handle, offset, out start_offset, out end_offset);
			Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
			atk_attribute_set_free(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_default_attributes(IntPtr raw);

		public Atk.Attribute[] DefaultAttributes { 
			get {
				IntPtr raw_ret = atk_text_get_default_attributes(Handle);
				Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
				atk_attribute_set_free(raw_ret);
				return ret;
			}
		}

		static System.Collections.Generic.Dictionary<uint, GCHandle> handlers = new System.Collections.Generic.Dictionary<uint, GCHandle> ();

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_component_add_focus_handler(IntPtr raw, AtkSharp.FocusHandlerNative handler);

		public uint AddFocusHandler(Atk.FocusHandler handler) {
			AtkSharp.FocusHandlerWrapper handler_wrapper = new AtkSharp.FocusHandlerWrapper (handler);
			var gch = GCHandle.Alloc (handler_wrapper);

			uint ret = atk_component_add_focus_handler(Handle, handler_wrapper.NativeDelegate);

			if (ret != 0) {
				lock (handlers)
					handlers.Add (ret, gch);
			} else
				gch.Free ();

			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_remove_focus_handler(IntPtr raw, uint handler_id);

		public void RemoveFocusHandler(uint handler_id) {
			atk_component_remove_focus_handler(Handle, handler_id);

			GCHandle gch;

			lock (handlers) {
				handlers.TryGetValue (handler_id, out gch);
				handlers.Remove (handler_id);
			}
			gch.Free();
		}

#endregion
	}

	internal class NoOpObjectAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_no_op_object_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_no_op_object_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
