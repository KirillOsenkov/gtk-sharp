// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_default_registry();

		public static Atk.Registry DefaultRegistry { 
			get {
				IntPtr raw_ret = atk_get_default_registry();
				Atk.Registry ret = GLib.Object.GetObject(raw_ret) as Atk.Registry;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_focus_object();

		public static Atk.Object FocusObject { 
			get {
				IntPtr raw_ret = atk_get_focus_object();
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_root();

		public static Atk.Object Root { 
			get {
				IntPtr raw_ret = atk_get_root();
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_toolkit_name();

		public static string ToolkitName { 
			get {
				IntPtr raw_ret = atk_get_toolkit_name();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_toolkit_version();

		public static string ToolkitVersion { 
			get {
				IntPtr raw_ret = atk_get_toolkit_version();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_get_version();

		public static string Version { 
			get {
				IntPtr raw_ret = atk_get_version();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_remove_global_event_listener(uint listener_id);

		public static void RemoveGlobalEventListener(uint listener_id) {
			atk_remove_global_event_listener(listener_id);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_role_for_name(IntPtr name);

		public static Atk.Role RoleForName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_role_for_name(native_name);
			Atk.Role ret = (Atk.Role) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_role_get_localized_name(int role);

		public static string RoleGetLocalizedName(Atk.Role role) {
			IntPtr raw_ret = atk_role_get_localized_name((int) role);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_role_get_name(int role);

		public static string RoleGetName(Atk.Role role) {
			IntPtr raw_ret = atk_role_get_name((int) role);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_role_register(IntPtr name);

		public static Atk.Role RoleRegister(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_role_register(native_name);
			Atk.Role ret = (Atk.Role) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Global.custom"
// Global.custom - Atk Global class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2008 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libatk-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern uint atk_add_global_event_listener (GLib.Signal.EmissionHookNative hook, IntPtr event_type);
		
		public static uint AddGlobalEventListener (GLib.Signal.EmissionHook hook, string event_type)
		{
			IntPtr native_event_type = GLib.Marshaller.StringToPtrGStrdup (event_type);
			uint id = atk_add_global_event_listener (new GLib.Signal.EmissionHookMarshaler (hook).Callback, native_event_type);
			GLib.Marshaller.Free (native_event_type);
			return id;
		}

		static System.Collections.Generic.Dictionary<uint, GCHandle> keyListeners = new System.Collections.Generic.Dictionary<uint, GCHandle> ();

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_add_key_event_listener(AtkSharp.KeySnoopFuncNative listener, IntPtr data);

		public static uint AddKeyEventListener(Atk.KeySnoopFunc listener) {
			GCHandle gch = GCHandle.Alloc (listener);
			uint ret = atk_add_key_event_listener(AtkSharp.KeySnoopFuncWrapper.NativeDelegate, (IntPtr)gch);

			if (ret != 0) {
				lock (keyListeners)
					keyListeners.Add (ret, gch);
			} else
				gch.Free ();

			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_remove_key_event_listener(uint listener_id);

		public static void RemoveKeyEventListener(uint listener_id) {
			atk_remove_key_event_listener(listener_id);

			GCHandle gch;

			lock (keyListeners) {
				keyListeners.TryGetValue (listener_id, out gch);
				keyListeners.Remove (listener_id);
			}
			gch.Free();
		}

		static System.Collections.Generic.Dictionary<uint, GCHandle> focusTrackers = new System.Collections.Generic.Dictionary<uint, GCHandle> ();

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_add_focus_tracker(AtkSharp.EventListenerNative focus_tracker);

		public static uint AddFocusTracker(Atk.EventListener focus_tracker) {
			AtkSharp.EventListenerWrapper focus_tracker_wrapper = new AtkSharp.EventListenerWrapper (focus_tracker);
			GCHandle gch = GCHandle.Alloc (focus_tracker_wrapper);

			uint ret = atk_add_focus_tracker(focus_tracker_wrapper.NativeDelegate);

			if (ret != 0) {
				lock (focusTrackers)
					focusTrackers.Add (ret, gch);
			} else
				gch.Free ();

			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_remove_focus_tracker(uint tracker_id);

		public static void RemoveFocusTracker(uint tracker_id) {
			atk_remove_focus_tracker(tracker_id);

			GCHandle gch;

			lock (focusTrackers) {
				focusTrackers.TryGetValue (tracker_id, out gch);
				focusTrackers.Remove (tracker_id);
			}
			gch.Free();
		}
               

#endregion
	}
}
