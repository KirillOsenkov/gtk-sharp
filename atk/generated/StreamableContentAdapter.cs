// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class StreamableContentAdapter : GLib.GInterfaceAdapter, Atk.StreamableContent {

		static StreamableContentIface iface;

		struct StreamableContentIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetNMimeTypesDelegate get_n_mime_types;
			public GetMimeTypeDelegate get_mime_type;
			public GetStreamDelegate get_stream;
			public GetUriDelegate get_uri;
		}

		static StreamableContentAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(StreamableContentAdapter));
			iface.get_n_mime_types = new GetNMimeTypesDelegate (GetNMimeTypesCallback);
			iface.get_mime_type = new GetMimeTypeDelegate (GetMimeTypeCallback);
			iface.get_stream = new GetStreamDelegate (GetStreamCallback);
			iface.get_uri = new GetUriDelegate (GetUriCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetNMimeTypesDelegate (IntPtr streamable);

		static int GetNMimeTypesCallback (IntPtr streamable)
		{
			try {
				Atk.StreamableContentImplementor __obj = GLib.Object.GetObject (streamable, false) as Atk.StreamableContentImplementor;
				int __result = __obj.NMimeTypes;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetMimeTypeDelegate (IntPtr streamable, int i);

		static IntPtr GetMimeTypeCallback (IntPtr streamable, int i)
		{
			try {
				Atk.StreamableContentImplementor __obj = GLib.Object.GetObject (streamable, false) as Atk.StreamableContentImplementor;
				string __result = __obj.GetMimeType (i);
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetStreamDelegate (IntPtr streamable, IntPtr mime_type);

		static IntPtr GetStreamCallback (IntPtr streamable, IntPtr mime_type)
		{
			try {
				Atk.StreamableContentImplementor __obj = GLib.Object.GetObject (streamable, false) as Atk.StreamableContentImplementor;
				IntPtr __result = __obj.GetStream (GLib.Marshaller.Utf8PtrToString (mime_type));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetUriDelegate (IntPtr streamable, IntPtr mime_type);

		static IntPtr GetUriCallback (IntPtr streamable, IntPtr mime_type)
		{
			try {
				Atk.StreamableContentImplementor __obj = GLib.Object.GetObject (streamable, false) as Atk.StreamableContentImplementor;
				string __result = __obj.GetUri (GLib.Marshaller.Utf8PtrToString (mime_type));
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			StreamableContentIface native_iface = Marshal.PtrToStructure<StreamableContentIface> (ifaceptr);
			native_iface.get_n_mime_types = iface.get_n_mime_types;
			native_iface.get_mime_type = iface.get_mime_type;
			native_iface.get_stream = iface.get_stream;
			native_iface.get_uri = iface.get_uri;
			Marshal.StructureToPtr<StreamableContentIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public StreamableContentAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		StreamableContentImplementor implementor;

		public StreamableContentAdapter (StreamableContentImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public StreamableContentAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_streamable_content_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_streamable_content_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static StreamableContent GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static StreamableContent GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is StreamableContentImplementor)
				return new StreamableContentAdapter (obj as StreamableContentImplementor);
			else if (obj as StreamableContent == null)
				return new StreamableContentAdapter (obj.Handle);
			else
				return obj as StreamableContent;
		}

		public StreamableContentImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_streamable_content_get_mime_type(IntPtr raw, int i);

		public string GetMimeType(int i) {
			IntPtr raw_ret = atk_streamable_content_get_mime_type(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_streamable_content_get_n_mime_types(IntPtr raw);

		public int NMimeTypes { 
			get {
				int raw_ret = atk_streamable_content_get_n_mime_types(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_streamable_content_get_stream(IntPtr raw, IntPtr mime_type);

		public IntPtr GetStream(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr raw_ret = atk_streamable_content_get_stream(Handle, native_mime_type);
			IntPtr ret = raw_ret;
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_streamable_content_get_uri(IntPtr raw, IntPtr mime_type);

		public string GetUri(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr raw_ret = atk_streamable_content_get_uri(Handle, native_mime_type);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

#endregion
	}
}
