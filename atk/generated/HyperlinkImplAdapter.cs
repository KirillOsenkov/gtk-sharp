// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class HyperlinkImplAdapter : GLib.GInterfaceAdapter, Atk.HyperlinkImpl {

		static HyperlinkImplIface iface;

		struct HyperlinkImplIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetHyperlinkDelegate get_hyperlink;
		}

		static HyperlinkImplAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(HyperlinkImplAdapter));
			iface.get_hyperlink = new GetHyperlinkDelegate (GetHyperlinkCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetHyperlinkDelegate (IntPtr impl);

		static IntPtr GetHyperlinkCallback (IntPtr impl)
		{
			try {
				Atk.HyperlinkImplImplementor __obj = GLib.Object.GetObject (impl, false) as Atk.HyperlinkImplImplementor;
				Atk.Hyperlink __result = __obj.Hyperlink;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			HyperlinkImplIface native_iface = Marshal.PtrToStructure<HyperlinkImplIface> (ifaceptr);
			native_iface.get_hyperlink = iface.get_hyperlink;
			Marshal.StructureToPtr<HyperlinkImplIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public HyperlinkImplAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		HyperlinkImplImplementor implementor;

		public HyperlinkImplAdapter (HyperlinkImplImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public HyperlinkImplAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hyperlink_impl_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_hyperlink_impl_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static HyperlinkImpl GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static HyperlinkImpl GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is HyperlinkImplImplementor)
				return new HyperlinkImplAdapter (obj as HyperlinkImplImplementor);
			else if (obj as HyperlinkImpl == null)
				return new HyperlinkImplAdapter (obj.Handle);
			else
				return obj as HyperlinkImpl;
		}

		public HyperlinkImplImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hyperlink_impl_get_hyperlink(IntPtr raw);

		public Atk.Hyperlink Hyperlink { 
			get {
				IntPtr raw_ret = atk_hyperlink_impl_get_hyperlink(Handle);
				Atk.Hyperlink ret = GLib.Object.GetObject(raw_ret, true) as Atk.Hyperlink;
				return ret;
			}
		}

#endregion
	}
}
