// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ImageAdapter : GLib.GInterfaceAdapter, Atk.Image {

		static ImageIface iface;

		struct ImageIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetImagePositionDelegate get_image_position;
			public GetImageDescriptionDelegate get_image_description;
			public GetImageSizeDelegate get_image_size;
			public SetImageDescriptionDelegate set_image_description;
			public GetImageLocaleDelegate get_image_locale;
		}

		static ImageAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ImageAdapter));
			iface.get_image_position = new GetImagePositionDelegate (GetImagePositionCallback);
			iface.get_image_description = new GetImageDescriptionDelegate (GetImageDescriptionCallback);
			iface.get_image_size = new GetImageSizeDelegate (GetImageSizeCallback);
			iface.set_image_description = new SetImageDescriptionDelegate (SetImageDescriptionCallback);
			iface.get_image_locale = new GetImageLocaleDelegate (GetImageLocaleCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetImagePositionDelegate (IntPtr image, out int x, out int y, int coord_type);

		static void GetImagePositionCallback (IntPtr image, out int x, out int y, int coord_type)
		{
			try {
				Atk.ImageImplementor __obj = GLib.Object.GetObject (image, false) as Atk.ImageImplementor;
				__obj.GetImagePosition (out x, out y, (Atk.CoordType) coord_type);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetImageDescriptionDelegate (IntPtr image);

		static IntPtr GetImageDescriptionCallback (IntPtr image)
		{
			try {
				Atk.ImageImplementor __obj = GLib.Object.GetObject (image, false) as Atk.ImageImplementor;
				string __result = __obj.ImageDescription;
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetImageSizeDelegate (IntPtr image, out int width, out int height);

		static void GetImageSizeCallback (IntPtr image, out int width, out int height)
		{
			try {
				Atk.ImageImplementor __obj = GLib.Object.GetObject (image, false) as Atk.ImageImplementor;
				__obj.GetImageSize (out width, out height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetImageDescriptionDelegate (IntPtr image, IntPtr description);

		static bool SetImageDescriptionCallback (IntPtr image, IntPtr description)
		{
			try {
				Atk.ImageImplementor __obj = GLib.Object.GetObject (image, false) as Atk.ImageImplementor;
				bool __result = __obj.SetImageDescription (GLib.Marshaller.Utf8PtrToString (description));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetImageLocaleDelegate (IntPtr image);

		static IntPtr GetImageLocaleCallback (IntPtr image)
		{
			try {
				Atk.ImageImplementor __obj = GLib.Object.GetObject (image, false) as Atk.ImageImplementor;
				string __result = __obj.ImageLocale;
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ImageIface native_iface = Marshal.PtrToStructure<ImageIface> (ifaceptr);
			native_iface.get_image_position = iface.get_image_position;
			native_iface.get_image_description = iface.get_image_description;
			native_iface.get_image_size = iface.get_image_size;
			native_iface.set_image_description = iface.set_image_description;
			native_iface.get_image_locale = iface.get_image_locale;
			Marshal.StructureToPtr<ImageIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ImageAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ImageImplementor implementor;

		public ImageAdapter (ImageImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ImageAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_image_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Image GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Image GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ImageImplementor)
				return new ImageAdapter (obj as ImageImplementor);
			else if (obj as Image == null)
				return new ImageAdapter (obj.Handle);
			else
				return obj as Image;
		}

		public ImageImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_description(IntPtr raw);

		public string ImageDescription { 
			get {
				IntPtr raw_ret = atk_image_get_image_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_image_get_image_locale(IntPtr raw);

		public string ImageLocale { 
			get {
				IntPtr raw_ret = atk_image_get_image_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetImagePosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_image_get_image_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_image_get_image_size(IntPtr raw, out int width, out int height);

		public void GetImageSize(out int width, out int height) {
			atk_image_get_image_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_image_set_image_description(IntPtr raw, IntPtr description);

		public bool SetImageDescription(string description) {
			IntPtr native_description = GLib.Marshaller.StringToPtrGStrdup (description);
			bool raw_ret = atk_image_set_image_description(Handle, native_description);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_description);
			return ret;
		}

#endregion
	}
}
