// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ComponentAdapter : GLib.GInterfaceAdapter, Atk.Component {

		static ComponentIface iface;

		struct ComponentIface {
			public IntPtr gtype;
			public IntPtr itype;

			public AddFocusHandlerDelegate add_focus_handler;
			public ContainsDelegate contains;
			public RefAccessibleAtPointDelegate ref_accessible_at_point;
			public GetExtentsDelegate get_extents;
			public GetPositionDelegate get_position;
			public GetSizeDelegate get_size;
			public GrabFocusDelegate grab_focus;
			public RemoveFocusHandlerDelegate remove_focus_handler;
			public SetExtentsDelegate set_extents;
			public SetPositionDelegate set_position;
			public SetSizeDelegate set_size;
			public GetLayerDelegate get_layer;
			public GetMdiZorderDelegate get_mdi_zorder;
			public IntPtr bounds_changed;
			public GetAlphaDelegate get_alpha;
		}

		static ComponentAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ComponentAdapter));
			iface.add_focus_handler = new AddFocusHandlerDelegate (AddFocusHandlerCallback);
			iface.contains = new ContainsDelegate (ContainsCallback);
			iface.ref_accessible_at_point = new RefAccessibleAtPointDelegate (RefAccessibleAtPointCallback);
			iface.get_extents = new GetExtentsDelegate (GetExtentsCallback);
			iface.get_position = new GetPositionDelegate (GetPositionCallback);
			iface.get_size = new GetSizeDelegate (GetSizeCallback);
			iface.grab_focus = new GrabFocusDelegate (GrabFocusCallback);
			iface.remove_focus_handler = new RemoveFocusHandlerDelegate (RemoveFocusHandlerCallback);
			iface.set_extents = new SetExtentsDelegate (SetExtentsCallback);
			iface.set_position = new SetPositionDelegate (SetPositionCallback);
			iface.set_size = new SetSizeDelegate (SetSizeCallback);
			iface.get_layer = new GetLayerDelegate (GetLayerCallback);
			iface.get_mdi_zorder = new GetMdiZorderDelegate (GetMdiZorderCallback);
			iface.get_alpha = new GetAlphaDelegate (GetAlphaCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint AddFocusHandlerDelegate (IntPtr component, AtkSharp.FocusHandlerNative handler);

		static uint AddFocusHandlerCallback (IntPtr component, AtkSharp.FocusHandlerNative handler)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				AtkSharp.FocusHandlerInvoker handler_invoker = new AtkSharp.FocusHandlerInvoker (handler);
				uint __result = __obj.AddFocusHandler (handler_invoker.Handler);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ContainsDelegate (IntPtr component, int x, int y, int coord_type);

		static bool ContainsCallback (IntPtr component, int x, int y, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				bool __result = __obj.Contains (x, y, (Atk.CoordType) coord_type);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RefAccessibleAtPointDelegate (IntPtr component, int x, int y, int coord_type);

		static IntPtr RefAccessibleAtPointCallback (IntPtr component, int x, int y, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				Atk.Object __result = __obj.RefAccessibleAtPoint (x, y, (Atk.CoordType) coord_type);
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetExtentsDelegate (IntPtr component, out int x, out int y, out int width, out int height, int coord_type);

		static void GetExtentsCallback (IntPtr component, out int x, out int y, out int width, out int height, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				__obj.GetExtents (out x, out y, out width, out height, (Atk.CoordType) coord_type);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPositionDelegate (IntPtr component, out int x, out int y, int coord_type);

		static void GetPositionCallback (IntPtr component, out int x, out int y, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				__obj.GetPosition (out x, out y, (Atk.CoordType) coord_type);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetSizeDelegate (IntPtr component, out int width, out int height);

		static void GetSizeCallback (IntPtr component, out int width, out int height)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				__obj.GetSize (out width, out height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GrabFocusDelegate (IntPtr component);

		static bool GrabFocusCallback (IntPtr component)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				bool __result = __obj.GrabFocus ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RemoveFocusHandlerDelegate (IntPtr component, uint handler_id);

		static void RemoveFocusHandlerCallback (IntPtr component, uint handler_id)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				__obj.RemoveFocusHandler (handler_id);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetExtentsDelegate (IntPtr component, int x, int y, int width, int height, int coord_type);

		static bool SetExtentsCallback (IntPtr component, int x, int y, int width, int height, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				bool __result = __obj.SetExtents (x, y, width, height, (Atk.CoordType) coord_type);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetPositionDelegate (IntPtr component, int x, int y, int coord_type);

		static bool SetPositionCallback (IntPtr component, int x, int y, int coord_type)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				bool __result = __obj.SetPosition (x, y, (Atk.CoordType) coord_type);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetSizeDelegate (IntPtr component, int width, int height);

		static bool SetSizeCallback (IntPtr component, int width, int height)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				bool __result = __obj.SetSize (width, height);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetLayerDelegate (IntPtr component);

		static int GetLayerCallback (IntPtr component)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				Atk.Layer __result = __obj.Layer;
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetMdiZorderDelegate (IntPtr component);

		static int GetMdiZorderCallback (IntPtr component)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				int __result = __obj.MdiZorder;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double GetAlphaDelegate (IntPtr component);

		static double GetAlphaCallback (IntPtr component)
		{
			try {
				Atk.ComponentImplementor __obj = GLib.Object.GetObject (component, false) as Atk.ComponentImplementor;
				double __result = __obj.Alpha;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ComponentIface native_iface = Marshal.PtrToStructure<ComponentIface> (ifaceptr);
			native_iface.add_focus_handler = iface.add_focus_handler;
			native_iface.contains = iface.contains;
			native_iface.ref_accessible_at_point = iface.ref_accessible_at_point;
			native_iface.get_extents = iface.get_extents;
			native_iface.get_position = iface.get_position;
			native_iface.get_size = iface.get_size;
			native_iface.grab_focus = iface.grab_focus;
			native_iface.remove_focus_handler = iface.remove_focus_handler;
			native_iface.set_extents = iface.set_extents;
			native_iface.set_position = iface.set_position;
			native_iface.set_size = iface.set_size;
			native_iface.get_layer = iface.get_layer;
			native_iface.get_mdi_zorder = iface.get_mdi_zorder;
			native_iface.get_alpha = iface.get_alpha;
			Marshal.StructureToPtr<ComponentIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ComponentAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ComponentImplementor implementor;

		public ComponentAdapter (ComponentImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ComponentAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_component_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_component_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Component GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Component GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ComponentImplementor)
				return new ComponentAdapter (obj as ComponentImplementor);
			else if (obj as Component == null)
				return new ComponentAdapter (obj.Handle);
			else
				return obj as Component;
		}

		public ComponentImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("bounds_changed")]
		public event Atk.BoundsChangedHandler BoundsChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "bounds_changed", typeof (Atk.BoundsChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "bounds_changed", typeof (Atk.BoundsChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_component_add_focus_handler(IntPtr raw, AtkSharp.FocusHandlerNative handler);

		public uint AddFocusHandler(Atk.FocusHandler handler) {
			AtkSharp.FocusHandlerWrapper handler_wrapper = new AtkSharp.FocusHandlerWrapper (handler);
			uint raw_ret = atk_component_add_focus_handler(Handle, handler_wrapper.NativeDelegate);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_contains(IntPtr raw, int x, int y, int coord_type);

		public bool Contains(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_contains(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double atk_component_get_alpha(IntPtr raw);

		public double Alpha { 
			get {
				double raw_ret = atk_component_get_alpha(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_extents(IntPtr raw, out int x, out int y, out int width, out int height, int coord_type);

		public void GetExtents(out int x, out int y, out int width, out int height, Atk.CoordType coord_type) {
			atk_component_get_extents(Handle, out x, out y, out width, out height, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_layer(IntPtr raw);

		public Atk.Layer Layer { 
			get {
				int raw_ret = atk_component_get_layer(Handle);
				Atk.Layer ret = (Atk.Layer) raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_component_get_mdi_zorder(IntPtr raw);

		public int MdiZorder { 
			get {
				int raw_ret = atk_component_get_mdi_zorder(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_position(IntPtr raw, out int x, out int y, int coord_type);

		public void GetPosition(out int x, out int y, Atk.CoordType coord_type) {
			atk_component_get_position(Handle, out x, out y, (int) coord_type);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			atk_component_get_size(Handle, out width, out height);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_grab_focus(IntPtr raw);

		public bool GrabFocus() {
			bool raw_ret = atk_component_grab_focus(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_component_ref_accessible_at_point(IntPtr raw, int x, int y, int coord_type);

		public Atk.Object RefAccessibleAtPoint(int x, int y, Atk.CoordType coord_type) {
			IntPtr raw_ret = atk_component_ref_accessible_at_point(Handle, x, y, (int) coord_type);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_component_remove_focus_handler(IntPtr raw, uint handler_id);

		public void RemoveFocusHandler(uint handler_id) {
			atk_component_remove_focus_handler(Handle, handler_id);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_extents(IntPtr raw, int x, int y, int width, int height, int coord_type);

		public bool SetExtents(int x, int y, int width, int height, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_extents(Handle, x, y, width, height, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_position(IntPtr raw, int x, int y, int coord_type);

		public bool SetPosition(int x, int y, Atk.CoordType coord_type) {
			bool raw_ret = atk_component_set_position(Handle, x, y, (int) coord_type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_component_set_size(IntPtr raw, int width, int height);

		public bool SetSize(int width, int height) {
			bool raw_ret = atk_component_set_size(Handle, width, height);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
