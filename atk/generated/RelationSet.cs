// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RelationSet]
	public class RelationSet : GLib.Object {

		[Obsolete]
		protected RelationSet(GLib.GType gtype) : base(gtype) {}
		public RelationSet(IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_new();

		public RelationSet () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RelationSet)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = atk_relation_set_new();
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add(IntPtr raw, IntPtr relation);

		public void Add(Atk.Relation relation) {
			atk_relation_set_add(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add_relation_by_type(IntPtr raw, int relationship, IntPtr target);

		public void AddRelationByType(Atk.RelationType relationship, Atk.Object target) {
			atk_relation_set_add_relation_by_type(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_relation_set_contains(IntPtr raw, int relationship);

		public bool Contains(Atk.RelationType relationship) {
			bool raw_ret = atk_relation_set_contains(Handle, (int) relationship);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_set_get_n_relations(IntPtr raw);

		public int NRelations { 
			get {
				int raw_ret = atk_relation_set_get_n_relations(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation(IntPtr raw, int i);

		public Atk.Relation GetRelation(int i) {
			IntPtr raw_ret = atk_relation_set_get_relation(Handle, i);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation_by_type(IntPtr raw, int relationship);

		public Atk.Relation GetRelationByType(Atk.RelationType relationship) {
			IntPtr raw_ret = atk_relation_set_get_relation_by_type(Handle, (int) relationship);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_type();

		static GLib.GType _gtype = new GLib.GType (atk_relation_set_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_remove(IntPtr raw, IntPtr relation);

		public void Remove(Atk.Relation relation) {
			atk_relation_set_remove(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}

#endregion
	}

	internal class RelationSetAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_relation_set_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
