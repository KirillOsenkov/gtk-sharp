// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ValueAdapter : GLib.GInterfaceAdapter, Atk.Value {

		static ValueIface iface;

		struct ValueIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetCurrentValueDelegate get_current_value;
			public GetMaximumValueDelegate get_maximum_value;
			public GetMinimumValueDelegate get_minimum_value;
			public SetCurrentValueDelegate set_current_value;
			public GetMinimumIncrementDelegate get_minimum_increment;
		}

		static ValueAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ValueAdapter));
			iface.get_current_value = new GetCurrentValueDelegate (GetCurrentValueCallback);
			iface.get_maximum_value = new GetMaximumValueDelegate (GetMaximumValueCallback);
			iface.get_minimum_value = new GetMinimumValueDelegate (GetMinimumValueCallback);
			iface.set_current_value = new SetCurrentValueDelegate (SetCurrentValueCallback);
			iface.get_minimum_increment = new GetMinimumIncrementDelegate (GetMinimumIncrementCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetCurrentValueDelegate (IntPtr obj, ref GLib.Value value);

		static void GetCurrentValueCallback (IntPtr obj, ref GLib.Value value)
		{
			try {
				Atk.ValueImplementor __obj = GLib.Object.GetObject (obj, false) as Atk.ValueImplementor;
				__obj.GetCurrentValue (ref value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetMaximumValueDelegate (IntPtr obj, ref GLib.Value value);

		static void GetMaximumValueCallback (IntPtr obj, ref GLib.Value value)
		{
			try {
				Atk.ValueImplementor __obj = GLib.Object.GetObject (obj, false) as Atk.ValueImplementor;
				__obj.GetMaximumValue (ref value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetMinimumValueDelegate (IntPtr obj, ref GLib.Value value);

		static void GetMinimumValueCallback (IntPtr obj, ref GLib.Value value)
		{
			try {
				Atk.ValueImplementor __obj = GLib.Object.GetObject (obj, false) as Atk.ValueImplementor;
				__obj.GetMinimumValue (ref value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetCurrentValueDelegate (IntPtr obj, ref GLib.Value value);

		static bool SetCurrentValueCallback (IntPtr obj, ref GLib.Value value)
		{
			try {
				Atk.ValueImplementor __obj = GLib.Object.GetObject (obj, false) as Atk.ValueImplementor;
				bool __result = __obj.SetCurrentValue (value);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetMinimumIncrementDelegate (IntPtr obj, ref GLib.Value value);

		static void GetMinimumIncrementCallback (IntPtr obj, ref GLib.Value value)
		{
			try {
				Atk.ValueImplementor __obj = GLib.Object.GetObject (obj, false) as Atk.ValueImplementor;
				__obj.GetMinimumIncrement (ref value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ValueIface native_iface = Marshal.PtrToStructure<ValueIface> (ifaceptr);
			native_iface.get_current_value = iface.get_current_value;
			native_iface.get_maximum_value = iface.get_maximum_value;
			native_iface.get_minimum_value = iface.get_minimum_value;
			native_iface.set_current_value = iface.set_current_value;
			native_iface.get_minimum_increment = iface.get_minimum_increment;
			Marshal.StructureToPtr<ValueIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ValueAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ValueImplementor implementor;

		public ValueAdapter (ValueImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ValueAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_value_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_value_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Value GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Value GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ValueImplementor)
				return new ValueAdapter (obj as ValueImplementor);
			else if (obj as Value == null)
				return new ValueAdapter (obj.Handle);
			else
				return obj as Value;
		}

		public ValueImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_current_value(IntPtr raw, ref GLib.Value value);

		public void GetCurrentValue(ref GLib.Value value) {
			atk_value_get_current_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_maximum_value(IntPtr raw, ref GLib.Value value);

		public void GetMaximumValue(ref GLib.Value value) {
			atk_value_get_maximum_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_increment(IntPtr raw, ref GLib.Value value);

		public void GetMinimumIncrement(ref GLib.Value value) {
			atk_value_get_minimum_increment(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_value_get_minimum_value(IntPtr raw, ref GLib.Value value);

		public void GetMinimumValue(ref GLib.Value value) {
			atk_value_get_minimum_value(Handle, ref value);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_value_set_current_value(IntPtr raw, ref GLib.Value value);

		public bool SetCurrentValue(GLib.Value value) {
			bool raw_ret = atk_value_set_current_value(Handle, ref value);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
