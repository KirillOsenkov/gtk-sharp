// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ImplementorAdapter : GLib.GInterfaceAdapter, Atk.Implementor {

		static ImplementorIface iface;

		struct ImplementorIface {
			public IntPtr gtype;
			public IntPtr itype;

			public RefAccessibleDelegate ref_accessible;
		}

		static ImplementorAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ImplementorAdapter));
			iface.ref_accessible = new RefAccessibleDelegate (RefAccessibleCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RefAccessibleDelegate (IntPtr implementor);

		static IntPtr RefAccessibleCallback (IntPtr implementor)
		{
			try {
				Atk.ImplementorImplementor __obj = GLib.Object.GetObject (implementor, false) as Atk.ImplementorImplementor;
				Atk.Object __result = __obj.RefAccessible ();
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ImplementorIface native_iface = Marshal.PtrToStructure<ImplementorIface> (ifaceptr);
			native_iface.ref_accessible = iface.ref_accessible;
			Marshal.StructureToPtr<ImplementorIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ImplementorAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ImplementorImplementor implementor;

		public ImplementorAdapter (ImplementorImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ImplementorAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_implementor_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_implementor_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Implementor GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Implementor GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ImplementorImplementor)
				return new ImplementorAdapter (obj as ImplementorImplementor);
			else if (obj as Implementor == null)
				return new ImplementorAdapter (obj.Handle);
			else
				return obj as Implementor;
		}

		public ImplementorImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_implementor_ref_accessible(IntPtr raw);

		public Atk.Object RefAccessible() {
			IntPtr raw_ret = atk_implementor_ref_accessible(Handle);
			Atk.Object ret = GLib.Object.GetObject(raw_ret, true) as Atk.Object;
			return ret;
		}

#endregion
	}
}
