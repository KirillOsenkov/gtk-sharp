// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Registry]
	public class Registry : GLib.Object {

		[Obsolete]
		protected Registry(GLib.GType gtype) : base(gtype) {}
		public Registry(IntPtr raw) : base(raw) {}

		protected Registry() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_factory(IntPtr raw, IntPtr type);

		public Atk.ObjectFactory GetFactory(GLib.GType type) {
			IntPtr raw_ret = atk_registry_get_factory(Handle, type.Val);
			Atk.ObjectFactory ret = GLib.Object.GetObject(raw_ret) as Atk.ObjectFactory;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_factory_type(IntPtr raw, IntPtr type);

		public GLib.GType GetFactoryType(GLib.GType type) {
			IntPtr raw_ret = atk_registry_get_factory_type(Handle, type.Val);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_type();

		static GLib.GType _gtype = new GLib.GType (atk_registry_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_registry_set_factory_type(IntPtr raw, IntPtr type, IntPtr factory_type);

		public void SetFactoryType(GLib.GType type, GLib.GType factory_type) {
			atk_registry_set_factory_type(Handle, type.Val, factory_type.Val);
		}

#endregion
	}

	internal class RegistryAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_registry_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
