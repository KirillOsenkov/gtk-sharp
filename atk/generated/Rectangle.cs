// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[Rectangle]
	public struct Rectangle {

		public int X;
		public int Y;
		public int Width;
		public int Height;

		public static Atk.Rectangle Zero = new Atk.Rectangle ();

		public static Atk.Rectangle New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Atk.Rectangle.Zero;
			unsafe { return *(Atk.Rectangle*)raw; }
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_rectangle_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_rectangle_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Atk.Rectangle boxed);

		public static explicit operator GLib.Value (Atk.Rectangle boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (RectangleAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Atk.Rectangle (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}

	internal class RectangleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_rectangle_get_type ();

		private static GLib.GType _gtype = new GLib.GType (atk_rectangle_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
