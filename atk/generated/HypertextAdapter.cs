// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class HypertextAdapter : GLib.GInterfaceAdapter, Atk.Hypertext {

		static HypertextIface iface;

		struct HypertextIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetLinkDelegate get_link;
			public GetNLinksDelegate get_n_links;
			public GetLinkIndexDelegate get_link_index;
			public IntPtr link_selected;
		}

		static HypertextAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(HypertextAdapter));
			iface.get_link = new GetLinkDelegate (GetLinkCallback);
			iface.get_n_links = new GetNLinksDelegate (GetNLinksCallback);
			iface.get_link_index = new GetLinkIndexDelegate (GetLinkIndexCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetLinkDelegate (IntPtr hypertext, int link_index);

		static IntPtr GetLinkCallback (IntPtr hypertext, int link_index)
		{
			try {
				Atk.HypertextImplementor __obj = GLib.Object.GetObject (hypertext, false) as Atk.HypertextImplementor;
				Atk.Hyperlink __result = __obj.GetLink (link_index);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetNLinksDelegate (IntPtr hypertext);

		static int GetNLinksCallback (IntPtr hypertext)
		{
			try {
				Atk.HypertextImplementor __obj = GLib.Object.GetObject (hypertext, false) as Atk.HypertextImplementor;
				int __result = __obj.NLinks;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetLinkIndexDelegate (IntPtr hypertext, int char_index);

		static int GetLinkIndexCallback (IntPtr hypertext, int char_index)
		{
			try {
				Atk.HypertextImplementor __obj = GLib.Object.GetObject (hypertext, false) as Atk.HypertextImplementor;
				int __result = __obj.GetLinkIndex (char_index);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			HypertextIface native_iface = Marshal.PtrToStructure<HypertextIface> (ifaceptr);
			native_iface.get_link = iface.get_link;
			native_iface.get_n_links = iface.get_n_links;
			native_iface.get_link_index = iface.get_link_index;
			Marshal.StructureToPtr<HypertextIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public HypertextAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		HypertextImplementor implementor;

		public HypertextAdapter (HypertextImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public HypertextAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hypertext_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_hypertext_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Hypertext GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Hypertext GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is HypertextImplementor)
				return new HypertextAdapter (obj as HypertextImplementor);
			else if (obj as Hypertext == null)
				return new HypertextAdapter (obj.Handle);
			else
				return obj as Hypertext;
		}

		public HypertextImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("link_selected")]
		public event Atk.LinkSelectedHandler LinkSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "link_selected", typeof (Atk.LinkSelectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "link_selected", typeof (Atk.LinkSelectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_hypertext_get_link(IntPtr raw, int link_index);

		public Atk.Hyperlink GetLink(int link_index) {
			IntPtr raw_ret = atk_hypertext_get_link(Handle, link_index);
			Atk.Hyperlink ret = GLib.Object.GetObject(raw_ret) as Atk.Hyperlink;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_link_index(IntPtr raw, int char_index);

		public int GetLinkIndex(int char_index) {
			int raw_ret = atk_hypertext_get_link_index(Handle, char_index);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_hypertext_get_n_links(IntPtr raw);

		public int NLinks { 
			get {
				int raw_ret = atk_hypertext_get_n_links(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
