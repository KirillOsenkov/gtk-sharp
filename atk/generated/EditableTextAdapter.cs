// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class EditableTextAdapter : GLib.GInterfaceAdapter, Atk.EditableText {

		static EditableTextIface iface;

		struct EditableTextIface {
			public IntPtr gtype;
			public IntPtr itype;

			public SetRunAttributesDelegate set_run_attributes;
			public SetTextContentsDelegate set_text_contents;
			public InsertTextDelegate insert_text;
			public CopyTextDelegate copy_text;
			public CutTextDelegate cut_text;
			public DeleteTextDelegate delete_text;
			public PasteTextDelegate paste_text;
		}

		static EditableTextAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(EditableTextAdapter));
			iface.set_run_attributes = new SetRunAttributesDelegate (SetRunAttributesCallback);
			iface.set_text_contents = new SetTextContentsDelegate (SetTextContentsCallback);
			iface.insert_text = new InsertTextDelegate (InsertTextCallback);
			iface.copy_text = new CopyTextDelegate (CopyTextCallback);
			iface.cut_text = new CutTextDelegate (CutTextCallback);
			iface.delete_text = new DeleteTextDelegate (DeleteTextCallback);
			iface.paste_text = new PasteTextDelegate (PasteTextCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetRunAttributesDelegate (IntPtr text, IntPtr attrib_set, int start_offset, int end_offset);

		static bool SetRunAttributesCallback (IntPtr text, IntPtr attrib_set, int start_offset, int end_offset)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				bool __result = __obj.SetRunAttributes (new GLib.SList(attrib_set), start_offset, end_offset);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetTextContentsDelegate (IntPtr text, IntPtr str1ng);

		static void SetTextContentsCallback (IntPtr text, IntPtr str1ng)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.TextContents = GLib.Marshaller.Utf8PtrToString (str1ng);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InsertTextDelegate (IntPtr text, IntPtr str1ng, int length, ref int position);

		static void InsertTextCallback (IntPtr text, IntPtr str1ng, int length, ref int position)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.InsertText (GLib.Marshaller.Utf8PtrToString (str1ng), ref position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CopyTextDelegate (IntPtr text, int start_pos, int end_pos);

		static void CopyTextCallback (IntPtr text, int start_pos, int end_pos)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.CopyText (start_pos, end_pos);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CutTextDelegate (IntPtr text, int start_pos, int end_pos);

		static void CutTextCallback (IntPtr text, int start_pos, int end_pos)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.CutText (start_pos, end_pos);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeleteTextDelegate (IntPtr text, int start_pos, int end_pos);

		static void DeleteTextCallback (IntPtr text, int start_pos, int end_pos)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.DeleteText (start_pos, end_pos);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PasteTextDelegate (IntPtr text, int position);

		static void PasteTextCallback (IntPtr text, int position)
		{
			try {
				Atk.EditableTextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.EditableTextImplementor;
				__obj.PasteText (position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			EditableTextIface native_iface = Marshal.PtrToStructure<EditableTextIface> (ifaceptr);
			native_iface.set_run_attributes = iface.set_run_attributes;
			native_iface.set_text_contents = iface.set_text_contents;
			native_iface.insert_text = iface.insert_text;
			native_iface.copy_text = iface.copy_text;
			native_iface.cut_text = iface.cut_text;
			native_iface.delete_text = iface.delete_text;
			native_iface.paste_text = iface.paste_text;
			Marshal.StructureToPtr<EditableTextIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public EditableTextAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		EditableTextImplementor implementor;

		public EditableTextAdapter (EditableTextImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public EditableTextAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_editable_text_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_editable_text_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static EditableText GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static EditableText GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is EditableTextImplementor)
				return new EditableTextAdapter (obj as EditableTextImplementor);
			else if (obj as EditableText == null)
				return new EditableTextAdapter (obj.Handle);
			else
				return obj as EditableText;
		}

		public EditableTextImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_copy_text(IntPtr raw, int start_pos, int end_pos);

		public void CopyText(int start_pos, int end_pos) {
			atk_editable_text_copy_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_cut_text(IntPtr raw, int start_pos, int end_pos);

		public void CutText(int start_pos, int end_pos) {
			atk_editable_text_cut_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_delete_text(IntPtr raw, int start_pos, int end_pos);

		public void DeleteText(int start_pos, int end_pos) {
			atk_editable_text_delete_text(Handle, start_pos, end_pos);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_insert_text(IntPtr raw, IntPtr str1ng, int length, ref int position);

		public void InsertText(string str1ng, ref int position) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			atk_editable_text_insert_text(Handle, native_str1ng, System.Text.Encoding.UTF8.GetByteCount (str1ng), ref position);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_paste_text(IntPtr raw, int position);

		public void PasteText(int position) {
			atk_editable_text_paste_text(Handle, position);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_editable_text_set_run_attributes(IntPtr raw, IntPtr attrib_set, int start_offset, int end_offset);

		public bool SetRunAttributes(GLib.SList attrib_set, int start_offset, int end_offset) {
			bool raw_ret = atk_editable_text_set_run_attributes(Handle, attrib_set == null ? IntPtr.Zero : attrib_set.Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_editable_text_set_text_contents(IntPtr raw, IntPtr str1ng);

		public string TextContents { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				atk_editable_text_set_text_contents(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
