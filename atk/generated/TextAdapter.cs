// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class TextAdapter : GLib.GInterfaceAdapter, Atk.Text {

		static TextIface iface;

		struct TextIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetTextDelegate get_text;
			public GetTextAfterOffsetDelegate get_text_after_offset;
			public GetTextAtOffsetDelegate get_text_at_offset;
			public GetCharacterAtOffsetDelegate get_character_at_offset;
			public GetTextBeforeOffsetDelegate get_text_before_offset;
			public GetCaretOffsetDelegate get_caret_offset;
			public IntPtr get_run_attributes;
			public IntPtr get_default_attributes;
			public GetCharacterExtentsDelegate get_character_extents;
			public GetCharacterCountDelegate get_character_count;
			public GetOffsetAtPointDelegate get_offset_at_point;
			public GetNSelectionsDelegate get_n_selections;
			public GetSelectionDelegate get_selection;
			public AddSelectionDelegate add_selection;
			public RemoveSelectionDelegate remove_selection;
			public SetSelectionDelegate set_selection;
			public SetCaretOffsetDelegate set_caret_offset;
			public IntPtr text_changed;
			public IntPtr text_caret_moved;
			public IntPtr text_selection_changed;
			public IntPtr text_attributes_changed;
			public GetRangeExtentsDelegate get_range_extents;
			public GetBoundedRangesDelegate get_bounded_ranges;
		}

		static TextAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(TextAdapter));
			iface.get_text = new GetTextDelegate (GetTextCallback);
			iface.get_text_after_offset = new GetTextAfterOffsetDelegate (GetTextAfterOffsetCallback);
			iface.get_text_at_offset = new GetTextAtOffsetDelegate (GetTextAtOffsetCallback);
			iface.get_character_at_offset = new GetCharacterAtOffsetDelegate (GetCharacterAtOffsetCallback);
			iface.get_text_before_offset = new GetTextBeforeOffsetDelegate (GetTextBeforeOffsetCallback);
			iface.get_caret_offset = new GetCaretOffsetDelegate (GetCaretOffsetCallback);
			iface.get_character_extents = new GetCharacterExtentsDelegate (GetCharacterExtentsCallback);
			iface.get_character_count = new GetCharacterCountDelegate (GetCharacterCountCallback);
			iface.get_offset_at_point = new GetOffsetAtPointDelegate (GetOffsetAtPointCallback);
			iface.get_n_selections = new GetNSelectionsDelegate (GetNSelectionsCallback);
			iface.get_selection = new GetSelectionDelegate (GetSelectionCallback);
			iface.add_selection = new AddSelectionDelegate (AddSelectionCallback);
			iface.remove_selection = new RemoveSelectionDelegate (RemoveSelectionCallback);
			iface.set_selection = new SetSelectionDelegate (SetSelectionCallback);
			iface.set_caret_offset = new SetCaretOffsetDelegate (SetCaretOffsetCallback);
			iface.get_range_extents = new GetRangeExtentsDelegate (GetRangeExtentsCallback);
			iface.get_bounded_ranges = new GetBoundedRangesDelegate (GetBoundedRangesCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTextDelegate (IntPtr text, int start_offset, int end_offset);

		static IntPtr GetTextCallback (IntPtr text, int start_offset, int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				string __result = __obj.GetText (start_offset, end_offset);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTextAfterOffsetDelegate (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset);

		static IntPtr GetTextAfterOffsetCallback (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				string __result = __obj.GetTextAfterOffset (offset, (Atk.TextBoundary) boundary_type, out start_offset, out end_offset);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTextAtOffsetDelegate (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset);

		static IntPtr GetTextAtOffsetCallback (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				string __result = __obj.GetTextAtOffset (offset, (Atk.TextBoundary) boundary_type, out start_offset, out end_offset);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint GetCharacterAtOffsetDelegate (IntPtr text, int offset);

		static uint GetCharacterAtOffsetCallback (IntPtr text, int offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				char __result = __obj.GetCharacterAtOffset (offset);
				return GLib.Marshaller.CharToGUnichar (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTextBeforeOffsetDelegate (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset);

		static IntPtr GetTextBeforeOffsetCallback (IntPtr text, int offset, int boundary_type, out int start_offset, out int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				string __result = __obj.GetTextBeforeOffset (offset, (Atk.TextBoundary) boundary_type, out start_offset, out end_offset);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetCaretOffsetDelegate (IntPtr text);

		static int GetCaretOffsetCallback (IntPtr text)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				int __result = __obj.CaretOffset;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetCharacterExtentsDelegate (IntPtr text, int offset, out int x, out int y, out int width, out int height, int coords);

		static void GetCharacterExtentsCallback (IntPtr text, int offset, out int x, out int y, out int width, out int height, int coords)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				__obj.GetCharacterExtents (offset, out x, out y, out width, out height, (Atk.CoordType) coords);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetCharacterCountDelegate (IntPtr text);

		static int GetCharacterCountCallback (IntPtr text)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				int __result = __obj.CharacterCount;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetOffsetAtPointDelegate (IntPtr text, int x, int y, int coords);

		static int GetOffsetAtPointCallback (IntPtr text, int x, int y, int coords)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				int __result = __obj.GetOffsetAtPoint (x, y, (Atk.CoordType) coords);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetNSelectionsDelegate (IntPtr text);

		static int GetNSelectionsCallback (IntPtr text)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				int __result = __obj.NSelections;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetSelectionDelegate (IntPtr text, int selection_num, out int start_offset, out int end_offset);

		static IntPtr GetSelectionCallback (IntPtr text, int selection_num, out int start_offset, out int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				string __result = __obj.GetSelection (selection_num, out start_offset, out end_offset);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AddSelectionDelegate (IntPtr text, int start_offset, int end_offset);

		static bool AddSelectionCallback (IntPtr text, int start_offset, int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				bool __result = __obj.AddSelection (start_offset, end_offset);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RemoveSelectionDelegate (IntPtr text, int selection_num);

		static bool RemoveSelectionCallback (IntPtr text, int selection_num)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				bool __result = __obj.RemoveSelection (selection_num);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetSelectionDelegate (IntPtr text, int selection_num, int start_offset, int end_offset);

		static bool SetSelectionCallback (IntPtr text, int selection_num, int start_offset, int end_offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				bool __result = __obj.SetSelection (selection_num, start_offset, end_offset);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetCaretOffsetDelegate (IntPtr text, int offset);

		static bool SetCaretOffsetCallback (IntPtr text, int offset)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				bool __result = __obj.SetCaretOffset (offset);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetRangeExtentsDelegate (IntPtr text, int start_offset, int end_offset, int coord_type, IntPtr rect);

		static void GetRangeExtentsCallback (IntPtr text, int start_offset, int end_offset, int coord_type, IntPtr rect)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				Atk.TextRectangle myrect;
				__obj.GetRangeExtents (start_offset, end_offset, (Atk.CoordType) coord_type, out myrect);
				unsafe { if (rect != IntPtr.Zero) *(Atk.TextRectangle*)rect = myrect; }
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetBoundedRangesDelegate (IntPtr text, IntPtr rect, int coord_type, int x_clip_type, int y_clip_type);

		static IntPtr GetBoundedRangesCallback (IntPtr text, IntPtr rect, int coord_type, int x_clip_type, int y_clip_type)
		{
			try {
				Atk.TextImplementor __obj = GLib.Object.GetObject (text, false) as Atk.TextImplementor;
				Atk.TextRange __result = __obj.GetBoundedRanges (Atk.TextRectangle.New (rect), (Atk.CoordType) coord_type, (Atk.TextClipType) x_clip_type, (Atk.TextClipType) y_clip_type);
				return GLib.Marshaller.StructureToPtrAlloc<Atk.TextRange> (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			TextIface native_iface = Marshal.PtrToStructure<TextIface> (ifaceptr);
			native_iface.get_text = iface.get_text;
			native_iface.get_text_after_offset = iface.get_text_after_offset;
			native_iface.get_text_at_offset = iface.get_text_at_offset;
			native_iface.get_character_at_offset = iface.get_character_at_offset;
			native_iface.get_text_before_offset = iface.get_text_before_offset;
			native_iface.get_caret_offset = iface.get_caret_offset;
			native_iface.get_run_attributes = iface.get_run_attributes;
			native_iface.get_default_attributes = iface.get_default_attributes;
			native_iface.get_character_extents = iface.get_character_extents;
			native_iface.get_character_count = iface.get_character_count;
			native_iface.get_offset_at_point = iface.get_offset_at_point;
			native_iface.get_n_selections = iface.get_n_selections;
			native_iface.get_selection = iface.get_selection;
			native_iface.add_selection = iface.add_selection;
			native_iface.remove_selection = iface.remove_selection;
			native_iface.set_selection = iface.set_selection;
			native_iface.set_caret_offset = iface.set_caret_offset;
			native_iface.get_range_extents = iface.get_range_extents;
			native_iface.get_bounded_ranges = iface.get_bounded_ranges;
			Marshal.StructureToPtr<TextIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public TextAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		TextImplementor implementor;

		public TextAdapter (TextImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public TextAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_text_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Text GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Text GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is TextImplementor)
				return new TextAdapter (obj as TextImplementor);
			else if (obj as Text == null)
				return new TextAdapter (obj.Handle);
			else
				return obj as Text;
		}

		public TextImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("text_changed")]
		public event Atk.TextChangedHandler TextChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_changed", typeof (Atk.TextChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_changed", typeof (Atk.TextChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("text_caret_moved")]
		public event Atk.TextCaretMovedHandler TextCaretMoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_caret_moved", typeof (Atk.TextCaretMovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_caret_moved", typeof (Atk.TextCaretMovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("text_selection_changed")]
		public event System.EventHandler TextSelectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_selection_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_selection_changed");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("text_attributes_changed")]
		public event System.EventHandler TextAttributesChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_attributes_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "text_attributes_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_add_selection(IntPtr raw, int start_offset, int end_offset);

		public bool AddSelection(int start_offset, int end_offset) {
			bool raw_ret = atk_text_add_selection(Handle, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_attribute_for_name(IntPtr name);

		public static Atk.TextAttribute AttributeForName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_text_attribute_for_name(native_name);
			Atk.TextAttribute ret = (Atk.TextAttribute) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_attribute_get_name(int attr);

		public static string AttributeGetName(Atk.TextAttribute attr) {
			IntPtr raw_ret = atk_text_attribute_get_name((int) attr);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_attribute_get_value(int attr, int index_);

		public static string AttributeGetValue(Atk.TextAttribute attr, int index_) {
			IntPtr raw_ret = atk_text_attribute_get_value((int) attr, index_);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_attribute_register(IntPtr name);

		public static Atk.TextAttribute AttributeRegister(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_text_attribute_register(native_name);
			Atk.TextAttribute ret = (Atk.TextAttribute) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_free_ranges(ref Atk.TextRange ranges);

		public static void FreeRanges(Atk.TextRange ranges) {
			atk_text_free_ranges(ref ranges);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_bounded_ranges(IntPtr raw, ref Atk.TextRectangle rect, int coord_type, int x_clip_type, int y_clip_type);

		public Atk.TextRange GetBoundedRanges(Atk.TextRectangle rect, Atk.CoordType coord_type, Atk.TextClipType x_clip_type, Atk.TextClipType y_clip_type) {
			IntPtr raw_ret = atk_text_get_bounded_ranges(Handle, ref rect, (int) coord_type, (int) x_clip_type, (int) y_clip_type);
			Atk.TextRange ret = Atk.TextRange.New (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_caret_offset(IntPtr raw);

		public int CaretOffset { 
			get {
				int raw_ret = atk_text_get_caret_offset(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint atk_text_get_character_at_offset(IntPtr raw, int offset);

		public char GetCharacterAtOffset(int offset) {
			uint raw_ret = atk_text_get_character_at_offset(Handle, offset);
			char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_character_count(IntPtr raw);

		public int CharacterCount { 
			get {
				int raw_ret = atk_text_get_character_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_character_extents(IntPtr raw, int offset, out int x, out int y, out int width, out int height, int coords);

		public void GetCharacterExtents(int offset, out int x, out int y, out int width, out int height, Atk.CoordType coords) {
			atk_text_get_character_extents(Handle, offset, out x, out y, out width, out height, (int) coords);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_n_selections(IntPtr raw);

		public int NSelections { 
			get {
				int raw_ret = atk_text_get_n_selections(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_text_get_offset_at_point(IntPtr raw, int x, int y, int coords);

		public int GetOffsetAtPoint(int x, int y, Atk.CoordType coords) {
			int raw_ret = atk_text_get_offset_at_point(Handle, x, y, (int) coords);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_text_get_range_extents(IntPtr raw, int start_offset, int end_offset, int coord_type, ref Atk.TextRectangle rect);

		public Atk.TextRectangle GetRangeExtents(int start_offset, int end_offset, Atk.CoordType coord_type) {
			Atk.TextRectangle rect;
			rect = new Atk.TextRectangle();
			atk_text_get_range_extents(Handle, start_offset, end_offset, (int) coord_type, ref rect);
			return rect;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_selection(IntPtr raw, int selection_num, out int start_offset, out int end_offset);

		public string GetSelection(int selection_num, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_selection(Handle, selection_num, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text(IntPtr raw, int start_offset, int end_offset);

		public string GetText(int start_offset, int end_offset) {
			IntPtr raw_ret = atk_text_get_text(Handle, start_offset, end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_after_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAfterOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_after_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_at_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextAtOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_at_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_text_before_offset(IntPtr raw, int offset, int boundary_type, out int start_offset, out int end_offset);

		public string GetTextBeforeOffset(int offset, Atk.TextBoundary boundary_type, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_text_before_offset(Handle, offset, (int) boundary_type, out start_offset, out end_offset);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_remove_selection(IntPtr raw, int selection_num);

		public bool RemoveSelection(int selection_num) {
			bool raw_ret = atk_text_remove_selection(Handle, selection_num);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_caret_offset(IntPtr raw, int offset);

		public bool SetCaretOffset(int offset) {
			bool raw_ret = atk_text_set_caret_offset(Handle, offset);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_text_set_selection(IntPtr raw, int selection_num, int start_offset, int end_offset);

		public bool SetSelection(int selection_num, int start_offset, int end_offset) {
			bool raw_ret = atk_text_set_selection(Handle, selection_num, start_offset, end_offset);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "TextAdapter.custom"
// TextAdapter.custom - Atk TextAdapter class customizations
//
// Author: Brad Taylor <brad@getcoded.net>
//
// Copyright (c) 2008 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
		
		public void EmitTextChanged (TextChangedDetail detail, int position, int length)
		{
			GLib.Signal.Emit (GLib.Object.GetObject (Handle),
			                  "text_changed::" + detail.ToString ().ToLower (),
			                  position, length);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_attribute_set_free(IntPtr raw);

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_run_attributes(IntPtr raw, int offset, out int start_offset, out int end_offset);

		public Atk.Attribute[] GetRunAttributes(int offset, out int start_offset, out int end_offset) {
			IntPtr raw_ret = atk_text_get_run_attributes(Handle, offset, out start_offset, out end_offset);
			Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
			atk_attribute_set_free(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_get_default_attributes(IntPtr raw);

		public Atk.Attribute[] DefaultAttributes { 
			get {
				IntPtr raw_ret = atk_text_get_default_attributes(Handle);
				Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
				atk_attribute_set_free(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
