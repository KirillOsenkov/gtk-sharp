// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ActionAdapter : GLib.GInterfaceAdapter, Atk.Action {

		static ActionIface iface;

		struct ActionIface {
			public IntPtr gtype;
			public IntPtr itype;

			public DoActionDelegate do_action;
			public GetNActionsDelegate get_n_actions;
			public GetDescriptionDelegate get_description;
			public GetNameDelegate get_name;
			public GetKeybindingDelegate get_keybinding;
			public SetDescriptionDelegate set_description;
			public GetLocalizedNameDelegate get_localized_name;
		}

		static ActionAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ActionAdapter));
			iface.do_action = new DoActionDelegate (DoActionCallback);
			iface.get_n_actions = new GetNActionsDelegate (GetNActionsCallback);
			iface.get_description = new GetDescriptionDelegate (GetDescriptionCallback);
			iface.get_name = new GetNameDelegate (GetNameCallback);
			iface.get_keybinding = new GetKeybindingDelegate (GetKeybindingCallback);
			iface.set_description = new SetDescriptionDelegate (SetDescriptionCallback);
			iface.get_localized_name = new GetLocalizedNameDelegate (GetLocalizedNameCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DoActionDelegate (IntPtr action, int i);

		static bool DoActionCallback (IntPtr action, int i)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				bool __result = __obj.DoAction (i);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetNActionsDelegate (IntPtr action);

		static int GetNActionsCallback (IntPtr action)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				int __result = __obj.NActions;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDescriptionDelegate (IntPtr action, int i);

		static IntPtr GetDescriptionCallback (IntPtr action, int i)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				string __result = __obj.GetDescription (i);
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetNameDelegate (IntPtr action, int i);

		static IntPtr GetNameCallback (IntPtr action, int i)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				string __result = __obj.GetName (i);
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetKeybindingDelegate (IntPtr action, int i);

		static IntPtr GetKeybindingCallback (IntPtr action, int i)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				string __result = __obj.GetKeybinding (i);
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetDescriptionDelegate (IntPtr action, int i, IntPtr desc);

		static bool SetDescriptionCallback (IntPtr action, int i, IntPtr desc)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				bool __result = __obj.SetDescription (i, GLib.Marshaller.Utf8PtrToString (desc));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetLocalizedNameDelegate (IntPtr action, int i);

		static IntPtr GetLocalizedNameCallback (IntPtr action, int i)
		{
			try {
				Atk.ActionImplementor __obj = GLib.Object.GetObject (action, false) as Atk.ActionImplementor;
				string __result = __obj.GetLocalizedName (i);
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ActionIface native_iface = Marshal.PtrToStructure<ActionIface> (ifaceptr);
			native_iface.do_action = iface.do_action;
			native_iface.get_n_actions = iface.get_n_actions;
			native_iface.get_description = iface.get_description;
			native_iface.get_name = iface.get_name;
			native_iface.get_keybinding = iface.get_keybinding;
			native_iface.set_description = iface.set_description;
			native_iface.get_localized_name = iface.get_localized_name;
			Marshal.StructureToPtr<ActionIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ActionAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ActionImplementor implementor;

		public ActionAdapter (ActionImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ActionAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_action_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Action GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Action GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ActionImplementor)
				return new ActionAdapter (obj as ActionImplementor);
			else if (obj as Action == null)
				return new ActionAdapter (obj.Handle);
			else
				return obj as Action;
		}

		public ActionImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_do_action(IntPtr raw, int i);

		public bool DoAction(int i) {
			bool raw_ret = atk_action_do_action(Handle, i);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_description(IntPtr raw, int i);

		public string GetDescription(int i) {
			IntPtr raw_ret = atk_action_get_description(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_keybinding(IntPtr raw, int i);

		public string GetKeybinding(int i) {
			IntPtr raw_ret = atk_action_get_keybinding(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_localized_name(IntPtr raw, int i);

		public string GetLocalizedName(int i) {
			IntPtr raw_ret = atk_action_get_localized_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_action_get_n_actions(IntPtr raw);

		public int NActions { 
			get {
				int raw_ret = atk_action_get_n_actions(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_action_get_name(IntPtr raw, int i);

		public string GetName(int i) {
			IntPtr raw_ret = atk_action_get_name(Handle, i);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_action_set_description(IntPtr raw, int i, IntPtr desc);

		public bool SetDescription(int i, string desc) {
			IntPtr native_desc = GLib.Marshaller.StringToPtrGStrdup (desc);
			bool raw_ret = atk_action_set_description(Handle, i, native_desc);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_desc);
			return ret;
		}

#endregion
	}
}
