// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DocumentAdapter : GLib.GInterfaceAdapter, Atk.Document {

		static DocumentIface iface;

		struct DocumentIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetDocumentTypeDelegate get_document_type;
			public GetTheDocumentDelegate get_document;
			public GetLocaleDelegate get_document_locale;
			public GetAttributesDelegate get_document_attributes;
			public GetAttributeValueDelegate get_document_attribute_value;
			public SetAttributeValueDelegate set_document_attribute;
			public IntPtr load_complete;
			public IntPtr reload;
			public IntPtr load_stopped;
		}

		static DocumentAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(DocumentAdapter));
			iface.get_document_type = new GetDocumentTypeDelegate (GetDocumentTypeCallback);
			iface.get_document = new GetTheDocumentDelegate (GetTheDocumentCallback);
			iface.get_document_locale = new GetLocaleDelegate (GetLocaleCallback);
			iface.get_document_attributes = new GetAttributesDelegate (GetAttributesCallback);
			iface.get_document_attribute_value = new GetAttributeValueDelegate (GetAttributeValueCallback);
			iface.set_document_attribute = new SetAttributeValueDelegate (SetAttributeValueCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDocumentTypeDelegate (IntPtr document);

		static IntPtr GetDocumentTypeCallback (IntPtr document)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				string __result = __obj.DocumentType;
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTheDocumentDelegate (IntPtr document);

		static IntPtr GetTheDocumentCallback (IntPtr document)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				IntPtr __result = __obj.TheDocument;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetLocaleDelegate (IntPtr document);

		static IntPtr GetLocaleCallback (IntPtr document)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				string __result = __obj.Locale;
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAttributesDelegate (IntPtr document);

		static IntPtr GetAttributesCallback (IntPtr document)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				Atk.Attribute[] __result = __obj.Attributes;
				return new GLib.SList(__result, typeof (Atk.Attribute), false, false) == null ? IntPtr.Zero : new GLib.SList(__result, typeof (Atk.Attribute), false, false).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetAttributeValueDelegate (IntPtr document, IntPtr attribute_name);

		static IntPtr GetAttributeValueCallback (IntPtr document, IntPtr attribute_name)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				string __result = __obj.GetAttributeValue (GLib.Marshaller.Utf8PtrToString (attribute_name));
				return GLib.Marshaller.StringToPtrGStrdup (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetAttributeValueDelegate (IntPtr document, IntPtr attribute_name, IntPtr attribute_value);

		static bool SetAttributeValueCallback (IntPtr document, IntPtr attribute_name, IntPtr attribute_value)
		{
			try {
				Atk.DocumentImplementor __obj = GLib.Object.GetObject (document, false) as Atk.DocumentImplementor;
				bool __result = __obj.SetAttributeValue (GLib.Marshaller.Utf8PtrToString (attribute_name), GLib.Marshaller.Utf8PtrToString (attribute_value));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			DocumentIface native_iface = Marshal.PtrToStructure<DocumentIface> (ifaceptr);
			native_iface.get_document_type = iface.get_document_type;
			native_iface.get_document = iface.get_document;
			native_iface.get_document_locale = iface.get_document_locale;
			native_iface.get_document_attributes = iface.get_document_attributes;
			native_iface.get_document_attribute_value = iface.get_document_attribute_value;
			native_iface.set_document_attribute = iface.set_document_attribute;
			Marshal.StructureToPtr<DocumentIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public DocumentAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		DocumentImplementor implementor;

		public DocumentAdapter (DocumentImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public DocumentAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_type();

		private static GLib.GType _gtype = new GLib.GType (atk_document_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Document GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Document GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is DocumentImplementor)
				return new DocumentAdapter (obj as DocumentImplementor);
			else if (obj as Document == null)
				return new DocumentAdapter (obj.Handle);
			else
				return obj as Document;
		}

		public DocumentImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("load_complete")]
		public event System.EventHandler LoadComplete {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "load_complete");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "load_complete");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("reload")]
		public event System.EventHandler Reload {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "reload");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "reload");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("load_stopped")]
		public event System.EventHandler LoadStopped {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "load_stopped");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "load_stopped");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attribute_value(IntPtr raw, IntPtr attribute_name);

		public string GetAttributeValue(string attribute_name) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr raw_ret = atk_document_get_attribute_value(Handle, native_attribute_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_attribute_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_attributes(IntPtr raw);

		public Atk.Attribute[] Attributes { 
			get {
				IntPtr raw_ret = atk_document_get_attributes(Handle);
				Atk.Attribute[] ret = GLib.Marshaller.ListPtrToArray<Atk.Attribute> (raw_ret, typeof(GLib.SList), false, false);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document(IntPtr raw);

		public IntPtr TheDocument { 
			get {
				IntPtr raw_ret = atk_document_get_document(Handle);
				IntPtr ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_document_type(IntPtr raw);

		public string DocumentType { 
			get {
				IntPtr raw_ret = atk_document_get_document_type(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_document_get_locale(IntPtr raw);

		public string Locale { 
			get {
				IntPtr raw_ret = atk_document_get_locale(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_document_set_attribute_value(IntPtr raw, IntPtr attribute_name, IntPtr attribute_value);

		public bool SetAttributeValue(string attribute_name, string attribute_value) {
			IntPtr native_attribute_name = GLib.Marshaller.StringToPtrGStrdup (attribute_name);
			IntPtr native_attribute_value = GLib.Marshaller.StringToPtrGStrdup (attribute_value);
			bool raw_ret = atk_document_set_attribute_value(Handle, native_attribute_name, native_attribute_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_attribute_name);
			GLib.Marshaller.Free (native_attribute_value);
			return ret;
		}

#endregion
	}
}
