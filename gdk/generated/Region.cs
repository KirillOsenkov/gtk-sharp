// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.GTypeOpaque]
	public class Region : GLib.Opaque {

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_region_copy(IntPtr raw);

		public Gdk.Region Copy() {
			IntPtr raw_ret = gdk_region_copy(Handle);
			Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), true);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_region_empty(IntPtr raw);

		public bool Empty() {
			bool raw_ret = gdk_region_empty(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_region_equal(IntPtr raw, IntPtr region2);

		public bool Equal(Gdk.Region region2) {
			bool raw_ret = gdk_region_equal(Handle, region2 == null ? IntPtr.Zero : region2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_get_clipbox(IntPtr raw, ref Gdk.Rectangle rectangle);

		public Gdk.Rectangle Clipbox { 
			get {
				Gdk.Rectangle rectangle;
				rectangle = new Gdk.Rectangle();
				gdk_region_get_clipbox(Handle, ref rectangle);
				return rectangle;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_intersect(IntPtr raw, IntPtr source2);

		public void Intersect(Gdk.Region source2) {
			gdk_region_intersect(Handle, source2 == null ? IntPtr.Zero : source2.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_offset(IntPtr raw, int dx, int dy);

		public void Offset(int dx, int dy) {
			gdk_region_offset(Handle, dx, dy);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_region_point_in(IntPtr raw, int x, int y);

		public bool PointIn(int x, int y) {
			bool raw_ret = gdk_region_point_in(Handle, x, y);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_region_polygon(Gdk.Point[] points, int n_points, int fill_rule);

		public static Gdk.Region Polygon(Gdk.Point[] points, Gdk.FillRule fill_rule) {
			IntPtr raw_ret = gdk_region_polygon(points, (points == null ? 0 : points.Length), (int) fill_rule);
			Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_region_rect_in(IntPtr raw, ref Gdk.Rectangle rectangle);

		public Gdk.OverlapType RectIn(Gdk.Rectangle rectangle) {
			int raw_ret = gdk_region_rect_in(Handle, ref rectangle);
			Gdk.OverlapType ret = (Gdk.OverlapType) raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_region_rectangle(ref Gdk.Rectangle rectangle);

		public static Gdk.Region Rectangle(Gdk.Rectangle rectangle) {
			IntPtr raw_ret = gdk_region_rectangle(ref rectangle);
			Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_shrink(IntPtr raw, int dx, int dy);

		public void Shrink(int dx, int dy) {
			gdk_region_shrink(Handle, dx, dy);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_spans_intersect_foreach(IntPtr raw, ref Gdk.Span spans, int n_spans, bool sorted, GdkSharp.SpanFuncNative function, IntPtr data);

		public void SpansIntersectForeach(Gdk.Span spans, int n_spans, bool sorted, Gdk.SpanFunc function) {
			GCHandle gch = GCHandle.Alloc (function);
			gdk_region_spans_intersect_foreach(Handle, ref spans, n_spans, sorted, (function == null) ? null : GdkSharp.SpanFuncWrapper.NativeDelegate, (IntPtr)gch);
			gch.Free();
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_subtract(IntPtr raw, IntPtr source2);

		public void Subtract(Gdk.Region source2) {
			gdk_region_subtract(Handle, source2 == null ? IntPtr.Zero : source2.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_union(IntPtr raw, IntPtr source2);

		public void Union(Gdk.Region source2) {
			gdk_region_union(Handle, source2 == null ? IntPtr.Zero : source2.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_union_with_rect(IntPtr raw, ref Gdk.Rectangle rect);

		public void UnionWithRect(Gdk.Rectangle rect) {
			gdk_region_union_with_rect(Handle, ref rect);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_xor(IntPtr raw, IntPtr source2);

		public void Xor(Gdk.Region source2) {
			gdk_region_xor(Handle, source2 == null ? IntPtr.Zero : source2.Handle);
		}

		public Region(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_region_new();

		public Region () 
		{
			Raw = gdk_region_new();
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_region_destroy(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gdk_region_destroy (raw);
		}

		[Obsolete("Gdk.Region is now freed automatically")]
		public void Destroy () {}

#endregion
#region Customized extensions
#line 1 "Region.custom"
// Gdk.Region.custom - Gdk Region class customizations
//
// Author: Joshua Tauberer <tauberer@for.net>
//
// Copyright (c) 2004 Joshua Tauberer
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void g_free (IntPtr mem);

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void gdk_region_get_rectangles(IntPtr raw, out IntPtr rectangles, out int n_rectangles);

public Rectangle[] GetRectangles ()
{
	int n;
	IntPtr rectangles;
	gdk_region_get_rectangles(Handle, out rectangles, out n);

	Rectangle[] ret = new Rectangle[n];
	int step = Marshal.SizeOf(typeof(Rectangle));
	long ptr = (long)rectangles;
	for (int i = 0; i < n; i++) {
		ret[i] = (Rectangle)Marshal.PtrToStructure((IntPtr)ptr, typeof(Rectangle));
		ptr += step;
	}
		
	g_free(rectangles);
		
	return ret;
}


#endregion
	}
}
