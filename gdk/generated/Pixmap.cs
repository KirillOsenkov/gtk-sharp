// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Pixmap]
	public class Pixmap : Gdk.Drawable {

		[Obsolete]
		protected Pixmap(GLib.GType gtype) : base(gtype) {}
		public Pixmap(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_new(IntPtr drawable, int width, int height, int depth);

		public Pixmap (Gdk.Drawable drawable, int width, int height, int depth) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pixmap)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_pixmap_new(drawable == null ? IntPtr.Zero : drawable.Handle, width, height, depth);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_colormap_create_from_xpm(IntPtr drawable, IntPtr colormap, out IntPtr mask, ref Gdk.Color transparent_color, IntPtr filename);

		public static Gdk.Pixmap ColormapCreateFromXpm(Gdk.Drawable drawable, Gdk.Colormap colormap, out Gdk.Pixmap mask, Gdk.Color transparent_color, string filename) {
			IntPtr native_mask;
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gdk_pixmap_colormap_create_from_xpm(drawable == null ? IntPtr.Zero : drawable.Handle, colormap == null ? IntPtr.Zero : colormap.Handle, out native_mask, ref transparent_color, native_filename);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_colormap_create_from_xpm_d(IntPtr drawable, IntPtr colormap, out IntPtr mask, ref Gdk.Color transparent_color, IntPtr[] data);

		public static Gdk.Pixmap ColormapCreateFromXpmD(Gdk.Drawable drawable, Gdk.Colormap colormap, out Gdk.Pixmap mask, Gdk.Color transparent_color, string[] data) {
			IntPtr native_mask;
			int cnt_data = data == null ? 0 : data.Length;
			IntPtr[] native_data = new IntPtr [cnt_data];
			for (int i = 0; i < cnt_data; i++) {
				native_data [i] = GLib.Marshaller.StringToPtrGStrdup(data[i]);
			}
			IntPtr raw_ret = gdk_pixmap_colormap_create_from_xpm_d(drawable == null ? IntPtr.Zero : drawable.Handle, colormap == null ? IntPtr.Zero : colormap.Handle, out native_mask, ref transparent_color, native_data);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
			for (int i = 0; i < cnt_data; i++) {
				GLib.Marshaller.Free (native_data[i]);
			}
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_create_from_data(IntPtr drawable, IntPtr data, int width, int height, int depth, ref Gdk.Color fg, ref Gdk.Color bg);

		public static Gdk.Pixmap CreateFromData(Gdk.Drawable drawable, string data, int width, int height, int depth, Gdk.Color fg, Gdk.Color bg) {
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr raw_ret = gdk_pixmap_create_from_data(drawable == null ? IntPtr.Zero : drawable.Handle, native_data, width, height, depth, ref fg, ref bg);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			GLib.Marshaller.Free (native_data);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_create_from_xpm(IntPtr drawable, out IntPtr mask, ref Gdk.Color transparent_color, IntPtr filename);

		public static Gdk.Pixmap CreateFromXpm(Gdk.Drawable drawable, out Gdk.Pixmap mask, Gdk.Color transparent_color, string filename) {
			IntPtr native_mask;
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gdk_pixmap_create_from_xpm(drawable == null ? IntPtr.Zero : drawable.Handle, out native_mask, ref transparent_color, native_filename);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_create_from_xpm_d(IntPtr drawable, out IntPtr mask, ref Gdk.Color transparent_color, IntPtr[] data);

		public static Gdk.Pixmap CreateFromXpmD(Gdk.Drawable drawable, out Gdk.Pixmap mask, Gdk.Color transparent_color, string[] data) {
			IntPtr native_mask;
			int cnt_data = data == null ? 0 : data.Length;
			IntPtr[] native_data = new IntPtr [cnt_data];
			for (int i = 0; i < cnt_data; i++) {
				native_data [i] = GLib.Marshaller.StringToPtrGStrdup(data[i]);
			}
			IntPtr raw_ret = gdk_pixmap_create_from_xpm_d(drawable == null ? IntPtr.Zero : drawable.Handle, out native_mask, ref transparent_color, native_data);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
			for (int i = 0; i < cnt_data; i++) {
				GLib.Marshaller.Free (native_data[i]);
			}
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_foreign_new(uint anid);

		public static Gdk.Pixmap ForeignNew(uint anid) {
			IntPtr raw_ret = gdk_pixmap_foreign_new(anid);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_foreign_new_for_display(IntPtr display, uint anid);

		public static Gdk.Pixmap ForeignNewForDisplay(Gdk.Display display, uint anid) {
			IntPtr raw_ret = gdk_pixmap_foreign_new_for_display(display == null ? IntPtr.Zero : display.Handle, anid);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_foreign_new_for_screen(IntPtr screen, uint anid, int width, int height, int depth);

		public static Gdk.Pixmap ForeignNewForScreen(Gdk.Screen screen, uint anid, int width, int height, int depth) {
			IntPtr raw_ret = gdk_pixmap_foreign_new_for_screen(screen == null ? IntPtr.Zero : screen.Handle, anid, width, height, depth);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_pixmap_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_lookup(uint anid);

		public static Gdk.Pixmap Lookup(uint anid) {
			IntPtr raw_ret = gdk_pixmap_lookup(anid);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_lookup_for_display(IntPtr display, uint anid);

		public static Gdk.Pixmap LookupForDisplay(Gdk.Display display, uint anid) {
			IntPtr raw_ret = gdk_pixmap_lookup_for_display(display == null ? IntPtr.Zero : display.Handle, anid);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_bitmap_create_from_data(IntPtr drawable, IntPtr data, int width, int height);

		public static Gdk.Pixmap CreateBitmapFromData(Gdk.Drawable drawable, string data, int width, int height) {
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr raw_ret = gdk_bitmap_create_from_data(drawable == null ? IntPtr.Zero : drawable.Handle, native_data, width, height);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
			GLib.Marshaller.Free (native_data);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Pixmap.custom"
// Gdk.Pixmap.custom - Pixmap extensions
//
// Authors:  Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004  Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public Pixmap (Gdk.Drawable drawable, int width, int height) : this (drawable, width, height, -1) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_colormap_create_from_xpm (IntPtr drawable, IntPtr colormap, IntPtr mask, IntPtr transparent_color, IntPtr filename);

		public static Gdk.Pixmap ColormapCreateFromXpm(Gdk.Drawable drawable, Gdk.Colormap colormap, string filename) 
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gdk_pixmap_colormap_create_from_xpm (drawable.Handle, colormap.Handle, IntPtr.Zero, IntPtr.Zero, native);
			GLib.Marshaller.Free (native);
			return GLib.Object.GetObject (raw_ret) as Gdk.Pixmap;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_colormap_create_from_xpm_d (IntPtr drawable, IntPtr colormap, IntPtr mask, IntPtr transparent_color, IntPtr data);

		public static Gdk.Pixmap ColormapCreateFromXpmD(Gdk.Drawable drawable, Gdk.Colormap colormap, string data) 
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr raw_ret = gdk_pixmap_colormap_create_from_xpm_d (drawable.Handle, colormap.Handle, IntPtr.Zero, IntPtr.Zero, native);
			GLib.Marshaller.Free (native);
			return GLib.Object.GetObject (raw_ret) as Gdk.Pixmap;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_create_from_xpm (IntPtr drawable, IntPtr mask, IntPtr transparent_color, IntPtr filename);

		public static Gdk.Pixmap CreateFromXpm(Gdk.Drawable drawable, string filename) 
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gdk_pixmap_create_from_xpm (drawable.Handle, IntPtr.Zero, IntPtr.Zero, native);
			GLib.Marshaller.Free (native);
			return GLib.Object.GetObject (raw_ret) as Gdk.Pixmap;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_create_from_xpm_d (IntPtr drawable, IntPtr mask, IntPtr transparent_color, IntPtr data);

		public static Gdk.Pixmap CreateFromXpmD(Gdk.Drawable drawable, string data) 
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr raw_ret = gdk_pixmap_create_from_xpm_d (drawable.Handle, IntPtr.Zero, IntPtr.Zero, native);
			GLib.Marshaller.Free (native);
			return GLib.Object.GetObject (raw_ret) as Gdk.Pixmap;
		}


#endregion
	}

	internal class PixmapAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixmap_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_pixmap_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
