// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Screen]
	public class Screen : GLib.Object {

		[Obsolete]
		protected Screen(GLib.GType gtype) : base(gtype) {}
		public Screen(IntPtr raw) : base(raw) {}

		protected Screen() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gdk_screen_get_resolution(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_screen_set_resolution(IntPtr raw, double dpi);

		[GLib.Property ("resolution")]
		public double Resolution {
			get  {
				double raw_ret = gdk_screen_get_resolution(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gdk_screen_set_resolution(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SizeChangedVMDelegate (IntPtr screen);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_screen_override_size_changed (IntPtr gtype, SizeChangedVMDelegate cb);

		static SizeChangedVMDelegate SizeChangedVMCallback;

		static void sizechanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnSizeChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSizeChanged (GLib.GType gtype)
		{
			if (SizeChangedVMCallback == null)
				SizeChangedVMCallback = new SizeChangedVMDelegate (sizechanged_cb);
			gdksharp_screen_override_size_changed (gtype.Val, SizeChangedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_screen_base_size_changed (IntPtr screen);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Screen), ConnectionMethod="OverrideSizeChanged")]
		protected virtual void OnSizeChanged ()
		{
			gdksharp_screen_base_size_changed (Handle);
		}

		[GLib.Signal("size_changed")]
		public event System.EventHandler SizeChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "size_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "size_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CompositedChangedVMDelegate (IntPtr screen);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_screen_override_composited_changed (IntPtr gtype, CompositedChangedVMDelegate cb);

		static CompositedChangedVMDelegate CompositedChangedVMCallback;

		static void compositedchanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnCompositedChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCompositedChanged (GLib.GType gtype)
		{
			if (CompositedChangedVMCallback == null)
				CompositedChangedVMCallback = new CompositedChangedVMDelegate (compositedchanged_cb);
			gdksharp_screen_override_composited_changed (gtype.Val, CompositedChangedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_screen_base_composited_changed (IntPtr screen);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Screen), ConnectionMethod="OverrideCompositedChanged")]
		protected virtual void OnCompositedChanged ()
		{
			gdksharp_screen_base_composited_changed (Handle);
		}

		[GLib.Signal("composited_changed")]
		public event System.EventHandler CompositedChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "composited_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "composited_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_screen_broadcast_client_message(IntPtr raw, IntPtr evnt);

		public void BroadcastClientMessage(Gdk.Event evnt) {
			gdk_screen_broadcast_client_message(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_active_window(IntPtr raw);

		public Gdk.Window ActiveWindow { 
			get {
				IntPtr raw_ret = gdk_screen_get_active_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_default();

		public static Gdk.Screen Default { 
			get {
				IntPtr raw_ret = gdk_screen_get_default();
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_default_colormap(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_screen_set_default_colormap(IntPtr raw, IntPtr colormap);

		public Gdk.Colormap DefaultColormap { 
			get {
				IntPtr raw_ret = gdk_screen_get_default_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
			set {
				gdk_screen_set_default_colormap(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_display(IntPtr raw);

		public Gdk.Display Display { 
			get {
				IntPtr raw_ret = gdk_screen_get_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_height(IntPtr raw);

		public int Height { 
			get {
				int raw_ret = gdk_screen_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_height_mm(IntPtr raw);

		public int HeightMm { 
			get {
				int raw_ret = gdk_screen_get_height_mm(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_monitor_at_point(IntPtr raw, int x, int y);

		public int GetMonitorAtPoint(int x, int y) {
			int raw_ret = gdk_screen_get_monitor_at_point(Handle, x, y);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_monitor_at_window(IntPtr raw, IntPtr window);

		public int GetMonitorAtWindow(Gdk.Window window) {
			int raw_ret = gdk_screen_get_monitor_at_window(Handle, window == null ? IntPtr.Zero : window.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_screen_get_monitor_geometry(IntPtr raw, int monitor_num, ref Gdk.Rectangle dest);

		public Gdk.Rectangle GetMonitorGeometry(int monitor_num) {
			Gdk.Rectangle dest;
			dest = new Gdk.Rectangle();
			gdk_screen_get_monitor_geometry(Handle, monitor_num, ref dest);
			return dest;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_n_monitors(IntPtr raw);

		public int NMonitors { 
			get {
				int raw_ret = gdk_screen_get_n_monitors(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_number(IntPtr raw);

		public int Number { 
			get {
				int raw_ret = gdk_screen_get_number(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_rgb_colormap(IntPtr raw);

		public Gdk.Colormap RgbColormap { 
			get {
				IntPtr raw_ret = gdk_screen_get_rgb_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_rgb_visual(IntPtr raw);

		public Gdk.Visual RgbVisual { 
			get {
				IntPtr raw_ret = gdk_screen_get_rgb_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_rgba_colormap(IntPtr raw);

		public Gdk.Colormap RgbaColormap { 
			get {
				IntPtr raw_ret = gdk_screen_get_rgba_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_rgba_visual(IntPtr raw);

		public Gdk.Visual RgbaVisual { 
			get {
				IntPtr raw_ret = gdk_screen_get_rgba_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_root_window(IntPtr raw);

		public Gdk.Window RootWindow { 
			get {
				IntPtr raw_ret = gdk_screen_get_root_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_screen_get_setting(IntPtr raw, IntPtr name, ref GLib.Value value);

		public bool GetSetting(string name, GLib.Value value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gdk_screen_get_setting(Handle, native_name, ref value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_system_colormap(IntPtr raw);

		public Gdk.Colormap SystemColormap { 
			get {
				IntPtr raw_ret = gdk_screen_get_system_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_system_visual(IntPtr raw);

		public Gdk.Visual SystemVisual { 
			get {
				IntPtr raw_ret = gdk_screen_get_system_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_screen_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_width(IntPtr raw);

		public int Width { 
			get {
				int raw_ret = gdk_screen_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_screen_get_width_mm(IntPtr raw);

		public int WidthMm { 
			get {
				int raw_ret = gdk_screen_get_width_mm(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_window_stack(IntPtr raw);

		public Gdk.Window[] WindowStack { 
			get {
				IntPtr raw_ret = gdk_screen_get_window_stack(Handle);
				Gdk.Window[] ret = GLib.Marshaller.ListPtrToArray<Gdk.Window> (raw_ret, typeof(GLib.List), true, true);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_screen_is_composited(IntPtr raw);

		public bool IsComposited { 
			get {
				bool raw_ret = gdk_screen_is_composited(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_make_display_name(IntPtr raw);

		public string MakeDisplayName() {
			IntPtr raw_ret = gdk_screen_make_display_name(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Screen.custom"
// Screen.custom - customizations to Gdk.Screen
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_toplevel_windows (IntPtr raw);

		public Window[] ToplevelWindows
		{
			get {
				IntPtr raw_ret = gdk_screen_get_toplevel_windows (Handle);
				if (raw_ret == IntPtr.Zero)
					return new Window [0];

				return GLib.Marshaller.ListPtrToArray<Window> (raw_ret, typeof (GLib.List), true, false);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_list_visuals (IntPtr raw);

		public Visual[] ListVisuals ()
		{
			IntPtr raw_ret = gdk_screen_list_visuals (Handle);
			if (raw_ret == IntPtr.Zero)
				return new Visual [0];

			return GLib.Marshaller.ListPtrToArray<Visual> (raw_ret, typeof (GLib.List), true, false);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_font_options(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_screen_set_font_options(IntPtr raw, IntPtr options);

		[GLib.Property ("font-options")]
		public Cairo.FontOptions FontOptions {
			get  {
				IntPtr raw_ret = gdk_screen_get_font_options(Handle);
				if (raw_ret == IntPtr.Zero)
					return null;
				System.Reflection.BindingFlags flags = System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance;
				return Activator.CreateInstance (typeof (Cairo.FontOptions), flags, null, new object [] {raw_ret}, null) as Cairo.FontOptions;
			}
			set  {
				gdk_screen_set_font_options(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


#endregion
	}

	internal class ScreenAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_screen_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_screen_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
