// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Input {

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_input_remove(int tag);

		[Obsolete]
		public static void Remove(int tag) {
			gdk_input_remove(tag);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_input_set_extension_events(IntPtr window, int mask, int mode);

		public static void SetExtensionEvents(Gdk.Window window, int mask, Gdk.ExtensionMode mode) {
			gdk_input_set_extension_events(window == null ? IntPtr.Zero : window.Handle, mask, (int) mode);
		}

#endregion
#region Customized extensions
#line 1 "Input.custom"
// Gdk.Input.custom - Gdk Input class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2005, 2007 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int gdk_input_add_full (int source, int condition, GdkSharp.InputFunctionNative function, IntPtr data, GLib.DestroyNotify destroy);

		[Obsolete]
		public static int AddFull (int source, Gdk.InputCondition condition, Gdk.InputFunction function, IntPtr data, Gdk.DestroyNotify destroy) 
		{
			GCHandle gch = GCHandle.Alloc (function);
			return gdk_input_add_full (source, (int) condition, GdkSharp.InputFunctionWrapper.NativeDelegate, (IntPtr) gch, GLib.DestroyHelper.NotifyHandler);
		}

		[Obsolete]
		public static int Add (int source, Gdk.InputCondition condition, Gdk.InputFunction function) 
		{
			GCHandle gch = GCHandle.Alloc (function);
			return gdk_input_add_full (source, (int) condition, GdkSharp.InputFunctionWrapper.NativeDelegate, (IntPtr) gch, GLib.DestroyHelper.NotifyHandler);
		}

#endregion
	}
}
