// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Colormap]
	public class Colormap : GLib.Object {

		[Obsolete]
		protected Colormap(GLib.GType gtype) : base(gtype) {}
		public Colormap(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_new(IntPtr visual, bool allocate);

		public Colormap (Gdk.Visual visual, bool allocate) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Colormap)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_colormap_new(visual == null ? IntPtr.Zero : visual.Handle, allocate);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_colormap_get_size_offset ();

		static uint size_offset = gdksharp_gdk_colormap_get_size_offset ();
		public int Size {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + size_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_get_visual(IntPtr raw);

		public Gdk.Visual Visual {
			get  {
				IntPtr raw_ret = gdk_colormap_get_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_colormap_alloc_color(IntPtr raw, ref Gdk.Color color, bool writeable, bool best_match);

		public bool AllocColor(ref Gdk.Color color, bool writeable, bool best_match) {
			bool raw_ret = gdk_colormap_alloc_color(Handle, ref color, writeable, best_match);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_colormap_alloc_colors(IntPtr raw, Gdk.Color[] colors, int ncolors, bool writeable, bool best_match, bool[] success);

		public int AllocColors(Gdk.Color[] colors, int ncolors, bool writeable, bool best_match, bool[] success) {
			int raw_ret = gdk_colormap_alloc_colors(Handle, colors, ncolors, writeable, best_match, success);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_colormap_change(IntPtr raw, int ncolors);

		[Obsolete]
		public void Change(int ncolors) {
			gdk_colormap_change(Handle, ncolors);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_colormap_free_colors(IntPtr raw, Gdk.Color[] colors, int ncolors);

		public void FreeColors(Gdk.Color[] colors, int ncolors) {
			gdk_colormap_free_colors(Handle, colors, ncolors);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gdk_colormap_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_get_system();

		public static Gdk.Colormap System { 
			get {
				IntPtr raw_ret = gdk_colormap_get_system();
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_colormap_get_system_size();

		[Obsolete]
		public static int SystemSize { 
			get {
				int raw_ret = gdk_colormap_get_system_size();
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_colormap_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_colormap_query_color(IntPtr raw, UIntPtr pixel, ref Gdk.Color result);

		public void QueryColor(ulong pixel, ref Gdk.Color result) {
			gdk_colormap_query_color(Handle, new UIntPtr (pixel), ref result);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_ref(IntPtr raw);

		[Obsolete]
		public Gdk.Colormap Ref() {
			IntPtr raw_ret = gdk_colormap_ref(Handle);
			Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_colormap_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_colormap_unref(Handle);
		}

#endregion
	}

	internal class ColormapAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_colormap_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_colormap_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
