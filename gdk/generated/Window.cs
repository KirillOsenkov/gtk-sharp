// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Window]
	public class Window : Gdk.Drawable {

		[Obsolete]
		protected Window(GLib.GType gtype) : base(gtype) {}
		public Window(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_new(IntPtr parent, ref Gdk.WindowAttr attributes, int attributes_mask);

		public Window (Gdk.Window parent, Gdk.WindowAttr attributes, int attributes_mask) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Window)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_window_new(parent == null ? IntPtr.Zero : parent.Handle, ref attributes, attributes_mask);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_at_pointer(out int win_x, out int win_y);

		public static Gdk.Window AtPointer(out int win_x, out int win_y) {
			IntPtr raw_ret = gdk_window_at_pointer(out win_x, out win_y);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_beep(IntPtr raw);

		public void Beep() {
			gdk_window_beep(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_begin_move_drag(IntPtr raw, int button, int root_x, int root_y, uint timestamp);

		public void BeginMoveDrag(int button, int root_x, int root_y, uint timestamp) {
			gdk_window_begin_move_drag(Handle, button, root_x, root_y, timestamp);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_begin_paint_rect(IntPtr raw, ref Gdk.Rectangle rectangle);

		public void BeginPaintRect(Gdk.Rectangle rectangle) {
			gdk_window_begin_paint_rect(Handle, ref rectangle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_begin_paint_region(IntPtr raw, IntPtr region);

		public void BeginPaintRegion(Gdk.Region region) {
			gdk_window_begin_paint_region(Handle, region == null ? IntPtr.Zero : region.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_begin_resize_drag(IntPtr raw, int edge, int button, int root_x, int root_y, uint timestamp);

		public void BeginResizeDrag(Gdk.WindowEdge edge, int button, int root_x, int root_y, uint timestamp) {
			gdk_window_begin_resize_drag(Handle, (int) edge, button, root_x, root_y, timestamp);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_clear(IntPtr raw);

		public void Clear() {
			gdk_window_clear(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_clear_area(IntPtr raw, int x, int y, int width, int height);

		public void ClearArea(int x, int y, int width, int height) {
			gdk_window_clear_area(Handle, x, y, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_clear_area_e(IntPtr raw, int x, int y, int width, int height);

		public void ClearAreaE(int x, int y, int width, int height) {
			gdk_window_clear_area_e(Handle, x, y, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_configure_finished(IntPtr raw);

		public void ConfigureFinished() {
			gdk_window_configure_finished(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_constrain_size(ref Gdk.Geometry geometry, uint flags, int width, int height, out int new_width, out int new_height);

		public static void ConstrainSize(Gdk.Geometry geometry, uint flags, int width, int height, out int new_width, out int new_height) {
			gdk_window_constrain_size(ref geometry, flags, width, height, out new_width, out new_height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_deiconify(IntPtr raw);

		public void Deiconify() {
			gdk_window_deiconify(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_enable_synchronized_configure(IntPtr raw);

		public void EnableSynchronizedConfigure() {
			gdk_window_enable_synchronized_configure(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_end_paint(IntPtr raw);

		public void EndPaint() {
			gdk_window_end_paint(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_focus(IntPtr raw, uint timestamp);

		public void Focus(uint timestamp) {
			gdk_window_focus(Handle, timestamp);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_foreign_new(uint anid);

		public static Gdk.Window ForeignNew(uint anid) {
			IntPtr raw_ret = gdk_window_foreign_new(anid);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_foreign_new_for_display(IntPtr display, uint anid);

		public static Gdk.Window ForeignNewForDisplay(Gdk.Display display, uint anid) {
			IntPtr raw_ret = gdk_window_foreign_new_for_display(display == null ? IntPtr.Zero : display.Handle, anid);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_freeze_updates(IntPtr raw);

		public void FreezeUpdates() {
			gdk_window_freeze_updates(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_fullscreen(IntPtr raw);

		public void Fullscreen() {
			gdk_window_fullscreen(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_window_get_decorations(IntPtr raw, out int decorations);

		public bool GetDecorations(out Gdk.WMDecoration decorations) {
			int native_decorations;
			bool raw_ret = gdk_window_get_decorations(Handle, out native_decorations);
			bool ret = raw_ret;
			decorations = (Gdk.WMDecoration) native_decorations;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_window_get_deskrelative_origin(IntPtr raw, out int x, out int y);

		[Obsolete]
		public bool GetDeskrelativeOrigin(out int x, out int y) {
			bool raw_ret = gdk_window_get_deskrelative_origin(Handle, out x, out y);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_window_get_events(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_events(IntPtr raw, int event_mask);

		public Gdk.EventMask Events { 
			get {
				int raw_ret = gdk_window_get_events(Handle);
				Gdk.EventMask ret = (Gdk.EventMask) raw_ret;
				return ret;
			}
			set {
				gdk_window_set_events(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_get_frame_extents(IntPtr raw, ref Gdk.Rectangle rect);

		public Gdk.Rectangle FrameExtents { 
			get {
				Gdk.Rectangle rect;
				rect = new Gdk.Rectangle();
				gdk_window_get_frame_extents(Handle, ref rect);
				return rect;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_get_geometry(IntPtr raw, out int x, out int y, out int width, out int height, out int depth);

		public void GetGeometry(out int x, out int y, out int width, out int height, out int depth) {
			gdk_window_get_geometry(Handle, out x, out y, out width, out height, out depth);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_get_group(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_group(IntPtr raw, IntPtr leader);

		public Gdk.Window Group { 
			get {
				IntPtr raw_ret = gdk_window_get_group(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
			set {
				gdk_window_set_group(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_get_internal_paint_info(IntPtr raw, out IntPtr real_drawable, out int x_offset, out int y_offset);

		public void GetInternalPaintInfo(out Gdk.Drawable real_drawable, out int x_offset, out int y_offset) {
			IntPtr native_real_drawable;
			gdk_window_get_internal_paint_info(Handle, out native_real_drawable, out x_offset, out y_offset);
			real_drawable = GLib.Object.GetObject(native_real_drawable) as Gdk.Drawable;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_window_get_origin(IntPtr raw, out int x, out int y);

		public int GetOrigin(out int x, out int y) {
			int raw_ret = gdk_window_get_origin(Handle, out x, out y);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_get_parent(IntPtr raw);

		public Gdk.Window Parent { 
			get {
				IntPtr raw_ret = gdk_window_get_parent(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_get_pointer(IntPtr raw, out int x, out int y, out int mask);

		public Gdk.Window GetPointer(out int x, out int y, out Gdk.ModifierType mask) {
			int native_mask;
			IntPtr raw_ret = gdk_window_get_pointer(Handle, out x, out y, out native_mask);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			mask = (Gdk.ModifierType) native_mask;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_get_position(IntPtr raw, out int x, out int y);

		public void GetPosition(out int x, out int y) {
			gdk_window_get_position(Handle, out x, out y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_get_root_origin(IntPtr raw, out int x, out int y);

		public void GetRootOrigin(out int x, out int y) {
			gdk_window_get_root_origin(Handle, out x, out y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_window_get_state(IntPtr raw);

		public Gdk.WindowState State { 
			get {
				int raw_ret = gdk_window_get_state(Handle);
				Gdk.WindowState ret = (Gdk.WindowState) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_get_toplevel(IntPtr raw);

		public Gdk.Window Toplevel { 
			get {
				IntPtr raw_ret = gdk_window_get_toplevel(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_window_get_type_hint(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_type_hint(IntPtr raw, int hint);

		public Gdk.WindowTypeHint TypeHint { 
			get {
				int raw_ret = gdk_window_get_type_hint(Handle);
				Gdk.WindowTypeHint ret = (Gdk.WindowTypeHint) raw_ret;
				return ret;
			}
			set {
				gdk_window_set_type_hint(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_get_update_area(IntPtr raw);

		public Gdk.Region UpdateArea { 
			get {
				IntPtr raw_ret = gdk_window_get_update_area(Handle);
				Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_window_get_window_type(IntPtr raw);

		public Gdk.WindowType WindowType { 
			get {
				int raw_ret = gdk_window_get_window_type(Handle);
				Gdk.WindowType ret = (Gdk.WindowType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_hide(IntPtr raw);

		public void Hide() {
			gdk_window_hide(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_iconify(IntPtr raw);

		public void Iconify() {
			gdk_window_iconify(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_input_shape_combine_mask(IntPtr raw, IntPtr mask, int x, int y);

		public void InputShapeCombineMask(Gdk.Pixmap mask, int x, int y) {
			gdk_window_input_shape_combine_mask(Handle, mask == null ? IntPtr.Zero : mask.Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_input_shape_combine_region(IntPtr raw, IntPtr shape_region, int offset_x, int offset_y);

		public void InputShapeCombineRegion(Gdk.Region shape_region, int offset_x, int offset_y) {
			gdk_window_input_shape_combine_region(Handle, shape_region == null ? IntPtr.Zero : shape_region.Handle, offset_x, offset_y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_invalidate_maybe_recurse(IntPtr raw, IntPtr region, GdkSharp.InvalidateMaybeRecurseChildFuncNative child_func, IntPtr user_data);

		public void InvalidateMaybeRecurse(Gdk.Region region, Gdk.InvalidateMaybeRecurseChildFunc child_func) {
			GdkSharp.InvalidateMaybeRecurseChildFuncWrapper child_func_wrapper = new GdkSharp.InvalidateMaybeRecurseChildFuncWrapper (child_func);
			gdk_window_invalidate_maybe_recurse(Handle, region == null ? IntPtr.Zero : region.Handle, child_func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_invalidate_rect(IntPtr raw, ref Gdk.Rectangle rect, bool invalidate_children);

		public void InvalidateRect(Gdk.Rectangle rect, bool invalidate_children) {
			gdk_window_invalidate_rect(Handle, ref rect, invalidate_children);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_invalidate_region(IntPtr raw, IntPtr region, bool invalidate_children);

		public void InvalidateRegion(Gdk.Region region, bool invalidate_children) {
			gdk_window_invalidate_region(Handle, region == null ? IntPtr.Zero : region.Handle, invalidate_children);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_window_is_viewable(IntPtr raw);

		public bool IsViewable { 
			get {
				bool raw_ret = gdk_window_is_viewable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_window_is_visible(IntPtr raw);

		public bool IsVisible { 
			get {
				bool raw_ret = gdk_window_is_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_lookup(uint anid);

		public static Gdk.Window Lookup(uint anid) {
			IntPtr raw_ret = gdk_window_lookup(anid);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_lookup_for_display(IntPtr display, uint anid);

		public static Gdk.Window LookupForDisplay(Gdk.Display display, uint anid) {
			IntPtr raw_ret = gdk_window_lookup_for_display(display == null ? IntPtr.Zero : display.Handle, anid);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_lower(IntPtr raw);

		public void Lower() {
			gdk_window_lower(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_maximize(IntPtr raw);

		public void Maximize() {
			gdk_window_maximize(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_merge_child_input_shapes(IntPtr raw);

		public void MergeChildInputShapes() {
			gdk_window_merge_child_input_shapes(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_merge_child_shapes(IntPtr raw);

		public void MergeChildShapes() {
			gdk_window_merge_child_shapes(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_move(IntPtr raw, int x, int y);

		public void Move(int x, int y) {
			gdk_window_move(Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_move_region(IntPtr raw, IntPtr region, int dx, int dy);

		public void MoveRegion(Gdk.Region region, int dx, int dy) {
			gdk_window_move_region(Handle, region == null ? IntPtr.Zero : region.Handle, dx, dy);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_move_resize(IntPtr raw, int x, int y, int width, int height);

		public void MoveResize(int x, int y, int width, int height) {
			gdk_window_move_resize(Handle, x, y, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_process_all_updates();

		public static void ProcessAllUpdates() {
			gdk_window_process_all_updates();
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_process_updates(IntPtr raw, bool update_children);

		public void ProcessUpdates(bool update_children) {
			gdk_window_process_updates(Handle, update_children);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_raise(IntPtr raw);

		public void Raise() {
			gdk_window_raise(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_register_dnd(IntPtr raw);

		public void RegisterDnd() {
			gdk_window_register_dnd(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_reparent(IntPtr raw, IntPtr new_parent, int x, int y);

		public void Reparent(Gdk.Window new_parent, int x, int y) {
			gdk_window_reparent(Handle, new_parent == null ? IntPtr.Zero : new_parent.Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_resize(IntPtr raw, int width, int height);

		public void Resize(int width, int height) {
			gdk_window_resize(Handle, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_scroll(IntPtr raw, int dx, int dy);

		public void Scroll(int dx, int dy) {
			gdk_window_scroll(Handle, dx, dy);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_accept_focus(IntPtr raw, bool accept_focus);

		public bool AcceptFocus { 
			set {
				gdk_window_set_accept_focus(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_back_pixmap(IntPtr raw, IntPtr pixmap, bool parent_relative);

		public void SetBackPixmap(Gdk.Pixmap pixmap, bool parent_relative) {
			gdk_window_set_back_pixmap(Handle, pixmap == null ? IntPtr.Zero : pixmap.Handle, parent_relative);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_background(IntPtr raw, ref Gdk.Color value);

		public Gdk.Color Background { 
			set {
				gdk_window_set_background(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_child_input_shapes(IntPtr raw);

		public void SetChildInputShapes() {
			gdk_window_set_child_input_shapes(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_child_shapes(IntPtr raw);

		public void SetChildShapes() {
			gdk_window_set_child_shapes(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_composited(IntPtr raw, bool composited);

		public bool Composited { 
			set {
				gdk_window_set_composited(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_cursor(IntPtr raw, IntPtr cursor);

		public Gdk.Cursor Cursor { 
			set {
				gdk_window_set_cursor(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_debug_updates(bool setting);

		public static bool DebugUpdates { 
			set {
				gdk_window_set_debug_updates(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_decorations(IntPtr raw, int decorations);

		public void SetDecorations(Gdk.WMDecoration decorations) {
			gdk_window_set_decorations(Handle, (int) decorations);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_focus_on_map(IntPtr raw, bool focus_on_map);

		public bool FocusOnMap { 
			set {
				gdk_window_set_focus_on_map(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_functions(IntPtr raw, int functions);

		public Gdk.WMFunction Functions { 
			set {
				gdk_window_set_functions(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_geometry_hints(IntPtr raw, ref Gdk.Geometry geometry, int geom_mask);

		public void SetGeometryHints(Gdk.Geometry geometry, Gdk.WindowHints geom_mask) {
			gdk_window_set_geometry_hints(Handle, ref geometry, (int) geom_mask);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_hints(IntPtr raw, int x, int y, int min_width, int min_height, int max_width, int max_height, int flags);

		[Obsolete]
		public void SetHints(int x, int y, int min_width, int min_height, int max_width, int max_height, int flags) {
			gdk_window_set_hints(Handle, x, y, min_width, min_height, max_width, max_height, flags);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_icon(IntPtr raw, IntPtr icon_window, IntPtr pixmap, IntPtr mask);

		public void SetIcon(Gdk.Window icon_window, Gdk.Pixmap pixmap, Gdk.Pixmap mask) {
			gdk_window_set_icon(Handle, icon_window == null ? IntPtr.Zero : icon_window.Handle, pixmap == null ? IntPtr.Zero : pixmap.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_icon_name(IntPtr raw, IntPtr name);

		public string IconName { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_window_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_keep_above(IntPtr raw, bool setting);

		public bool KeepAbove { 
			set {
				gdk_window_set_keep_above(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_keep_below(IntPtr raw, bool setting);

		public bool KeepBelow { 
			set {
				gdk_window_set_keep_below(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_modal_hint(IntPtr raw, bool modal);

		public bool ModalHint { 
			set {
				gdk_window_set_modal_hint(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_opacity(IntPtr raw, double opacity);

		public double Opacity { 
			set {
				gdk_window_set_opacity(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_override_redirect(IntPtr raw, bool override_redirect);

		public bool OverrideRedirect { 
			set {
				gdk_window_set_override_redirect(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_role(IntPtr raw, IntPtr role);

		public string Role { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_window_set_role(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_skip_pager_hint(IntPtr raw, bool skips_pager);

		public bool SkipPagerHint { 
			set {
				gdk_window_set_skip_pager_hint(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_skip_taskbar_hint(IntPtr raw, bool skips_taskbar);

		public bool SkipTaskbarHint { 
			set {
				gdk_window_set_skip_taskbar_hint(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_startup_id(IntPtr raw, IntPtr startup_id);

		public string StartupId { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_window_set_startup_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_window_set_static_gravities(IntPtr raw, bool use_static);

		public bool SetStaticGravities(bool use_static) {
			bool raw_ret = gdk_window_set_static_gravities(Handle, use_static);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_title(IntPtr raw, IntPtr title);

		public string Title { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_window_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_transient_for(IntPtr raw, IntPtr parent);

		public Gdk.Window TransientFor { 
			set {
				gdk_window_set_transient_for(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_set_urgency_hint(IntPtr raw, bool urgent);

		public bool UrgencyHint { 
			set {
				gdk_window_set_urgency_hint(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_shape_combine_mask(IntPtr raw, IntPtr mask, int x, int y);

		public void ShapeCombineMask(Gdk.Pixmap mask, int x, int y) {
			gdk_window_shape_combine_mask(Handle, mask == null ? IntPtr.Zero : mask.Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_shape_combine_region(IntPtr raw, IntPtr shape_region, int offset_x, int offset_y);

		public void ShapeCombineRegion(Gdk.Region shape_region, int offset_x, int offset_y) {
			gdk_window_shape_combine_region(Handle, shape_region == null ? IntPtr.Zero : shape_region.Handle, offset_x, offset_y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_show(IntPtr raw);

		public void Show() {
			gdk_window_show(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_show_unraised(IntPtr raw);

		public void ShowUnraised() {
			gdk_window_show_unraised(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_stick(IntPtr raw);

		public void Stick() {
			gdk_window_stick(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_thaw_updates(IntPtr raw);

		public void ThawUpdates() {
			gdk_window_thaw_updates(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_unfullscreen(IntPtr raw);

		public void Unfullscreen() {
			gdk_window_unfullscreen(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_unmaximize(IntPtr raw);

		public void Unmaximize() {
			gdk_window_unmaximize(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_unstick(IntPtr raw);

		public void Unstick() {
			gdk_window_unstick(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_window_withdraw(IntPtr raw);

		public void Withdraw() {
			gdk_window_withdraw(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_object_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_window_object_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "Window.custom"
// Gdk.Window.custom - Gdk Window class customizations
//
// Author: Moritz Balz <ich@mbalz.de>
//         Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2003 Moritz Balz
// Copyright (c) 2004 - 2008 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

	public Window (Gdk.Window parent, Gdk.WindowAttr attributes, Gdk.WindowAttributesType attributes_mask) : this (parent, attributes, (int)attributes_mask) {}

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern IntPtr gdk_window_get_children(IntPtr raw);

	public Window[] Children {
		get {
			IntPtr raw_ret = gdk_window_get_children(Handle);
			if (raw_ret == IntPtr.Zero)
				return new Window [0];
			return GLib.Marshaller.ListPtrToArray<Window> (raw_ret, typeof (GLib.List), true, false);
		}
	}

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_set_icon_list(IntPtr raw, IntPtr pixbufs);

	public Pixbuf[] IconList {
		set {
			GLib.List list = new GLib.List(IntPtr.Zero, typeof(Pixbuf), true, false);
			foreach (Pixbuf val in value)
				list.Append (val.Handle);
			gdk_window_set_icon_list(Handle, list.Handle);
		}
	}

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern IntPtr gdk_window_get_toplevels();

	public static Window[] Toplevels {
		get {
			IntPtr raw_ret = gdk_window_get_toplevels();
			if (raw_ret == IntPtr.Zero)
				return new Window [0];
			return GLib.Marshaller.ListPtrToArray<Window> (raw_ret, typeof(GLib.List), true, false);
		}
	}

	[DllImport("libgobject-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern IntPtr g_object_ref (IntPtr raw);

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_destroy(IntPtr raw);

	public void Destroy () 
	{
		// native method assumes an outstanding normal ref, but we hold a
		// toggle ref.  take out a normal ref for it to release,  and let 
		// Dispose release our toggle ref.
		g_object_ref (Handle);
		gdk_window_destroy(Handle);
		Dispose ();
	}

	public void MoveResize (Gdk.Rectangle rect) {
		gdk_window_move_resize (Handle, rect.X, rect.Y, rect.Width, rect.Height);
	}

	public void ClearArea (Gdk.Rectangle rect, bool expose) {
		if (expose)
			gdk_window_clear_area_e (Handle, rect.X, rect.Y, rect.Width, rect.Height);
		else
			gdk_window_clear_area (Handle, rect.X, rect.Y, rect.Width, rect.Height);
	}

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_get_user_data (IntPtr raw, out IntPtr data);

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_set_user_data(IntPtr raw, IntPtr user_data);
	public IntPtr UserData {
		get {
			IntPtr data;
			gdk_window_get_user_data (Handle, out data);
			return data;
		}
		set {
			gdk_window_set_user_data(Handle, value);
		}
	} 

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_add_filter (IntPtr handle, GdkSharp.FilterFuncNative wrapper, IntPtr data);

	[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
	static extern void gdk_window_remove_filter (IntPtr handle, GdkSharp.FilterFuncNative wrapper, IntPtr data);

	static Hashtable filter_all_hash;
	static Hashtable FilterAllHash {
		get {
			if (filter_all_hash == null)
				filter_all_hash = new Hashtable ();
			return filter_all_hash;
		}
	}

	public static void AddFilterForAll (FilterFunc func)
	{
		var gch = GCHandle.Alloc (func);
		FilterAllHash [func] = gch;
		gdk_window_add_filter (IntPtr.Zero, GdkSharp.FilterFuncWrapper.NativeDelegate, (IntPtr)gch);
	}

	public static void RemoveFilterForAll (FilterFunc func)
	{
		var ret = FilterAllHash [func];
		if (ret == null)
			return;
		GCHandle gch = (GCHandle)ret;
		FilterAllHash.Remove (func);
		gdk_window_remove_filter (IntPtr.Zero, GdkSharp.FilterFuncWrapper.NativeDelegate, (IntPtr)gch);
		gch.Free();
	}

	public void AddFilter (FilterFunc function)
	{
		if (!PersistentData.Contains ("filter_func_hash"))
			PersistentData ["filter_func_hash"] = new Hashtable ();
		Hashtable hash = PersistentData ["filter_func_hash"] as Hashtable;
		var gch = GCHandle.Alloc (function);
		hash [function] = gch;
		gdk_window_add_filter (Handle, GdkSharp.FilterFuncWrapper.NativeDelegate, (IntPtr)gch);
	}

	public void RemoveFilter (FilterFunc function)
	{
		Hashtable hash = PersistentData ["filter_func_hash"] as Hashtable;
		var ret = hash [function];
		if (ret == null)
			return;
		GCHandle gch = (GCHandle)ret;
		hash.Remove (function);
		gdk_window_remove_filter (Handle, GdkSharp.FilterFuncWrapper.NativeDelegate, (IntPtr)gch);
		gch.Free();
	}

#if MANLY_ENOUGH_TO_INCLUDE
	public Cairo.Graphics CairoGraphics (out int offset_x, out int offset_y)
	{
		IntPtr real_drawable;
		Cairo.Graphics o = new Cairo.Graphics ();

		gdk_window_get_internal_paint_info (Handle, out real_drawable, out offset_x, out offset_y);
		IntPtr x11 = gdk_x11_drawable_get_xid (real_drawable);
		IntPtr display = gdk_x11_drawable_get_xdisplay (real_drawable);
		o.SetTargetDrawable (display, x11);

		return o;
	}


	public override Cairo.Graphics CairoGraphics ()
	{
		int x, y;
		return CairoGraphics (out x, out y);
	}
#endif

#endregion
	}

	internal class WindowAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_window_object_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_window_object_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
