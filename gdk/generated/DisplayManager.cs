// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[DisplayManager]
	public class DisplayManager : GLib.Object {

		[Obsolete]
		protected DisplayManager(GLib.GType gtype) : base(gtype) {}
		public DisplayManager(IntPtr raw) : base(raw) {}

		protected DisplayManager() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_default_display(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_manager_set_default_display(IntPtr raw, IntPtr display);

		[GLib.Property ("default-display")]
		public Gdk.Display DefaultDisplay {
			get  {
				IntPtr raw_ret = gdk_display_manager_get_default_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
			set  {
				gdk_display_manager_set_default_display(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DisplayOpenedVMDelegate (IntPtr display_manager, IntPtr display);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_displaymanager_override_display_opened (IntPtr gtype, DisplayOpenedVMDelegate cb);

		static DisplayOpenedVMDelegate DisplayOpenedVMCallback;

		static void displayopened_cb (IntPtr display_manager, IntPtr display)
		{
			try {
				DisplayManager display_manager_managed = GLib.Object.GetObject (display_manager, false) as DisplayManager;
				display_manager_managed.OnDisplayOpened (GLib.Object.GetObject(display) as Gdk.Display);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDisplayOpened (GLib.GType gtype)
		{
			if (DisplayOpenedVMCallback == null)
				DisplayOpenedVMCallback = new DisplayOpenedVMDelegate (displayopened_cb);
			gdksharp_displaymanager_override_display_opened (gtype.Val, DisplayOpenedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_displaymanager_base_display_opened (IntPtr display_manager, IntPtr display);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.DisplayManager), ConnectionMethod="OverrideDisplayOpened")]
		protected virtual void OnDisplayOpened (Gdk.Display display)
		{
			gdksharp_displaymanager_base_display_opened (Handle, display == null ? IntPtr.Zero : display.Handle);
		}

		[GLib.Signal("display_opened")]
		public event Gdk.DisplayOpenedHandler DisplayOpened {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "display_opened", typeof (Gdk.DisplayOpenedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "display_opened", typeof (Gdk.DisplayOpenedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get();

		public static Gdk.DisplayManager Get() {
			IntPtr raw_ret = gdk_display_manager_get();
			Gdk.DisplayManager ret = GLib.Object.GetObject(raw_ret) as Gdk.DisplayManager;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_display_manager_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "DisplayManager.custom"
// DisplayManager.custom - customizations to Gdk.DisplayManager
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_list_displays (IntPtr raw);

		public Display[] ListDisplays ()
		{
			IntPtr raw_ret = gdk_display_manager_list_displays (Handle);
			if (raw_ret == IntPtr.Zero)
				return new Display [0];
			return GLib.Marshaller.ListPtrToArray<Display> (raw_ret, typeof (GLib.SList), true, false);
		}


#endregion
	}

	internal class DisplayManagerAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_manager_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_display_manager_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
