// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PangoHelper {

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_context_get();

		public static Pango.Context ContextGet() {
			IntPtr raw_ret = gdk_pango_context_get();
			Pango.Context ret = GLib.Object.GetObject(raw_ret) as Pango.Context;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_context_get_for_screen(IntPtr screen);

		public static Pango.Context ContextGetForScreen(Gdk.Screen screen) {
			IntPtr raw_ret = gdk_pango_context_get_for_screen(screen == null ? IntPtr.Zero : screen.Handle);
			Pango.Context ret = GLib.Object.GetObject(raw_ret) as Pango.Context;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pango_context_set_colormap(IntPtr context, IntPtr colormap);

		[Obsolete]
		public static void ContextSetColormap(Pango.Context context, Gdk.Colormap colormap) {
			gdk_pango_context_set_colormap(context == null ? IntPtr.Zero : context.Handle, colormap == null ? IntPtr.Zero : colormap.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_layout_get_clip_region(IntPtr layout, int x_origin, int y_origin, out int index_ranges, int n_ranges);

		public static Gdk.Region LayoutGetClipRegion(Pango.Layout layout, int x_origin, int y_origin, out int index_ranges, int n_ranges) {
			IntPtr raw_ret = gdk_pango_layout_get_clip_region(layout == null ? IntPtr.Zero : layout.Handle, x_origin, y_origin, out index_ranges, n_ranges);
			Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_layout_line_get_clip_region(IntPtr line, int x_origin, int y_origin, out int index_ranges, int n_ranges);

		public static Gdk.Region LayoutLineGetClipRegion(Pango.LayoutLine line, int x_origin, int y_origin, out int index_ranges, int n_ranges) {
			IntPtr raw_ret = gdk_pango_layout_line_get_clip_region(line == null ? IntPtr.Zero : line.Handle, x_origin, y_origin, out index_ranges, n_ranges);
			Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
			return ret;
		}

#endregion
	}
}
