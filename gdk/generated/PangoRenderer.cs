// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PangoRenderer]
	public class PangoRenderer : Pango.Renderer {

		[Obsolete]
		protected PangoRenderer(GLib.GType gtype) : base(gtype) {}
		public PangoRenderer(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_renderer_new(IntPtr screen);

		public PangoRenderer (Gdk.Screen screen) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PangoRenderer)) {
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (screen != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("screen");
						vals[param_count++] = new GLib.Value (screen);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			owned = true;
			Raw = gdk_pango_renderer_new(screen == null ? IntPtr.Zero : screen.Handle);
		}

		[GLib.Property ("screen")]
		public Gdk.Screen Screen {
			get {
				using (GLib.Value val = GetProperty ("screen")) {
					Gdk.Screen ret = (Gdk.Screen) val;
					return ret;
				}
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_renderer_get_default(IntPtr screen);

		public static Gdk.PangoRenderer GetDefault(Gdk.Screen screen) {
			IntPtr raw_ret = gdk_pango_renderer_get_default(screen == null ? IntPtr.Zero : screen.Handle);
			Gdk.PangoRenderer ret = GLib.Object.GetObject(raw_ret) as Gdk.PangoRenderer;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_renderer_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_pango_renderer_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pango_renderer_set_drawable(IntPtr raw, IntPtr drawable);

		public Gdk.Drawable Drawable { 
			set {
				gdk_pango_renderer_set_drawable(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pango_renderer_set_gc(IntPtr raw, IntPtr gc);

		public Gdk.GC Gc { 
			set {
				gdk_pango_renderer_set_gc(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pango_renderer_set_override_color(IntPtr raw, int part, ref Gdk.Color color);

		public void SetOverrideColor(Pango.RenderPart part, Gdk.Color color) {
			gdk_pango_renderer_set_override_color(Handle, (int) part, ref color);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pango_renderer_set_stipple(IntPtr raw, int part, IntPtr stipple);

		public void SetStipple(Pango.RenderPart part, Gdk.Pixmap stipple) {
			gdk_pango_renderer_set_stipple(Handle, (int) part, stipple == null ? IntPtr.Zero : stipple.Handle);
		}

#endregion
	}

	internal class PangoRendererAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pango_renderer_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_pango_renderer_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
