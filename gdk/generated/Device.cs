// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Device]
	public class Device : GLib.Object {

		[Obsolete]
		protected Device(GLib.GType gtype) : base(gtype) {}
		public Device(IntPtr raw) : base(raw) {}

		protected Device() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_name_offset ();

		static uint name_offset = gdksharp_gdk_device_get_name_offset ();
		public string Name {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + name_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_source_offset ();

		static uint source_offset = gdksharp_gdk_device_get_source_offset ();
		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_device_set_source(IntPtr raw, int source);

		public Gdk.InputSource Source {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + source_offset);
					return (Gdk.InputSource) (*raw_ptr);
				}
			}
			set  {
				gdk_device_set_source(Handle, (int) value);
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_mode_offset ();

		static uint mode_offset = gdksharp_gdk_device_get_mode_offset ();
		public Gdk.InputMode Mode {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + mode_offset);
					return (Gdk.InputMode) (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_has_cursor_offset ();

		static uint has_cursor_offset = gdksharp_gdk_device_get_has_cursor_offset ();
		public bool HasCursor {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + has_cursor_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_num_axes_offset ();

		static uint num_axes_offset = gdksharp_gdk_device_get_num_axes_offset ();
		public int NumAxes {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_axes_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_device_get_num_keys_offset ();

		static uint num_keys_offset = gdksharp_gdk_device_get_num_keys_offset ();
		public int NumKeys {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_keys_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_device_get_axis(IntPtr raw, double[] axes, int use, out double value);

		public bool GetAxis(double[] axes, Gdk.AxisUse use, out double value) {
			bool raw_ret = gdk_device_get_axis(Handle, axes, (int) use, out value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_device_get_core_pointer();

		public static Gdk.Device CorePointer { 
			get {
				IntPtr raw_ret = gdk_device_get_core_pointer();
				Gdk.Device ret = GLib.Object.GetObject(raw_ret) as Gdk.Device;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_device_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_device_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_device_set_axis_use(IntPtr raw, uint index_, int use);

		public void SetAxisUse(uint index_, Gdk.AxisUse use) {
			gdk_device_set_axis_use(Handle, index_, (int) use);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_device_set_key(IntPtr raw, uint index_, uint keyval, int modifiers);

		public void SetKey(uint index_, uint keyval, Gdk.ModifierType modifiers) {
			gdk_device_set_key(Handle, index_, keyval, (int) modifiers);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_device_set_mode(IntPtr raw, int mode);

		public bool SetMode(Gdk.InputMode mode) {
			bool raw_ret = gdk_device_set_mode(Handle, (int) mode);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Device.custom"
// Device.custom - customizations to Gdk.Device
//
// Authors: Manuel V. Santos  <mvsl@telefonica.net>
//
// Copyright (c) 2004 Manuel V. Santos
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern DeviceAxis gtksharp_gdk_device_get_device_axis (IntPtr device, uint axis);

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern DeviceKey gtksharp_gdk_device_get_device_key (IntPtr device, uint axis);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
                static extern void gdk_device_get_state(IntPtr device, IntPtr window, double [] axes, out int maskAsInt);

		
		public void GetState(Gdk.Window window, out double [] axes, out Gdk.ModifierType mask) {
			int maskAsInt;
			axes = new double [this.NumAxes];
			gdk_device_get_state(Handle, window.Handle, axes, out maskAsInt);
 			mask = (Gdk.ModifierType) maskAsInt;
		}

		public Gdk.DeviceAxis GetDeviceAxis (uint axis) {
			return gtksharp_gdk_device_get_device_axis (Handle, axis);
		}
		
		public Gdk.DeviceKey GetDeviceKey (uint axis) {
			return gtksharp_gdk_device_get_device_key (Handle, axis);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
                static extern void gdk_device_free_history(IntPtr events, int n_events);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
                static extern bool gdk_device_get_history(IntPtr device, IntPtr window, uint start, uint stop, out IntPtr events, out int n_events);

		public TimeCoord[] GetHistory (Gdk.Window window, uint start, uint stop)
		{
			IntPtr coords_handle;
			int count;

			if (gdk_device_get_history (Handle, window.Handle, start, stop, out coords_handle, out count)) {
				TimeCoord[] result = new TimeCoord [count];
				for (int i = 0; i < count; i++) {
					IntPtr ptr = Marshal.ReadIntPtr (coords_handle, i + IntPtr.Size);
					result [i] = TimeCoord.New (ptr);
				}
				gdk_device_free_history (coords_handle, count);
				return result;
			} else
				return new TimeCoord [0];
		}


#endregion
	}

	internal class DeviceAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_device_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_device_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
