// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GC]
	public class GC : GLib.Object {

		[Obsolete]
		protected GC(GLib.GType gtype) : base(gtype) {}
		public GC(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_new(IntPtr drawable);

		public GC (Gdk.Drawable drawable) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GC)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gc_new(drawable == null ? IntPtr.Zero : drawable.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_new_with_values(IntPtr drawable, ref Gdk.GCValues values, int values_mask);

		public GC (Gdk.Drawable drawable, Gdk.GCValues values, Gdk.GCValuesMask values_mask) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GC)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gc_new_with_values(drawable == null ? IntPtr.Zero : drawable.Handle, ref values, (int) values_mask);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_get_colormap(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_colormap(IntPtr raw, IntPtr colormap);

		public Gdk.Colormap Colormap {
			get  {
				IntPtr raw_ret = gdk_gc_get_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
			set  {
				gdk_gc_set_colormap(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_copy(IntPtr raw, IntPtr src_gc);

		public void Copy(Gdk.GC src_gc) {
			gdk_gc_copy(Handle, src_gc == null ? IntPtr.Zero : src_gc.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gdk_gc_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_gc_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_get_values(IntPtr raw, ref Gdk.GCValues values);

		public void GetValues(ref Gdk.GCValues values) {
			gdk_gc_get_values(Handle, ref values);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_offset(IntPtr raw, int x_offset, int y_offset);

		public void Offset(int x_offset, int y_offset) {
			gdk_gc_offset(Handle, x_offset, y_offset);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_ref(IntPtr raw);

		[Obsolete]
		public Gdk.GC Ref() {
			IntPtr raw_ret = gdk_gc_ref(Handle);
			Gdk.GC ret = GLib.Object.GetObject(raw_ret) as Gdk.GC;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_background(IntPtr raw, ref Gdk.Color value);

		public Gdk.Color Background { 
			set {
				gdk_gc_set_background(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_clip_mask(IntPtr raw, IntPtr mask);

		public Gdk.Pixmap ClipMask { 
			set {
				gdk_gc_set_clip_mask(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_clip_origin(IntPtr raw, int x, int y);

		public void SetClipOrigin(int x, int y) {
			gdk_gc_set_clip_origin(Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_clip_rectangle(IntPtr raw, ref Gdk.Rectangle value);

		public Gdk.Rectangle ClipRectangle { 
			set {
				gdk_gc_set_clip_rectangle(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_clip_region(IntPtr raw, IntPtr region);

		public Gdk.Region ClipRegion { 
			set {
				gdk_gc_set_clip_region(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_dashes(IntPtr raw, int dash_offset, sbyte[] dash_list, int n);

		public void SetDashes(int dash_offset, sbyte[] dash_list, int n) {
			gdk_gc_set_dashes(Handle, dash_offset, dash_list, n);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_exposures(IntPtr raw, bool exposures);

		public bool Exposures { 
			set {
				gdk_gc_set_exposures(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_fill(IntPtr raw, int fill);

		public Gdk.Fill Fill { 
			set {
				gdk_gc_set_fill(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_font(IntPtr raw, ref Gdk.Font value);

		[Obsolete]
		public Gdk.Font Font { 
			set {
				gdk_gc_set_font(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_foreground(IntPtr raw, ref Gdk.Color value);

		public Gdk.Color Foreground { 
			set {
				gdk_gc_set_foreground(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_function(IntPtr raw, int function);

		public Gdk.Function Function { 
			set {
				gdk_gc_set_function(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_line_attributes(IntPtr raw, int line_width, int line_style, int cap_style, int join_style);

		public void SetLineAttributes(int line_width, Gdk.LineStyle line_style, Gdk.CapStyle cap_style, Gdk.JoinStyle join_style) {
			gdk_gc_set_line_attributes(Handle, line_width, (int) line_style, (int) cap_style, (int) join_style);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_rgb_bg_color(IntPtr raw, ref Gdk.Color value);

		public Gdk.Color RgbBgColor { 
			set {
				gdk_gc_set_rgb_bg_color(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_rgb_fg_color(IntPtr raw, ref Gdk.Color value);

		public Gdk.Color RgbFgColor { 
			set {
				gdk_gc_set_rgb_fg_color(Handle, ref value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_stipple(IntPtr raw, IntPtr stipple);

		public Gdk.Pixmap Stipple { 
			set {
				gdk_gc_set_stipple(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_subwindow(IntPtr raw, int mode);

		public Gdk.SubwindowMode Subwindow { 
			set {
				gdk_gc_set_subwindow(Handle, (int) value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_tile(IntPtr raw, IntPtr tile);

		public Gdk.Pixmap Tile { 
			set {
				gdk_gc_set_tile(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_ts_origin(IntPtr raw, int x, int y);

		public void SetTsOrigin(int x, int y) {
			gdk_gc_set_ts_origin(Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_set_values(IntPtr raw, ref Gdk.GCValues values, int values_mask);

		public void SetValues(Gdk.GCValues values, Gdk.GCValuesMask values_mask) {
			gdk_gc_set_values(Handle, ref values, (int) values_mask);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gc_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_gc_unref(Handle);
		}

#endregion
	}

	internal class GCAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gc_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_gc_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
