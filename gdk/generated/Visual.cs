// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Visual]
	public class Visual : GLib.Object {

		[Obsolete]
		protected Visual(GLib.GType gtype) : base(gtype) {}
		public Visual(IntPtr raw) : base(raw) {}

		protected Visual() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_best();

		public static Gdk.Visual Best { 
			get {
				IntPtr raw_ret = gdk_visual_get_best();
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_visual_get_best_depth();

		public static int BestDepth { 
			get {
				int raw_ret = gdk_visual_get_best_depth();
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_visual_get_best_type();

		public static Gdk.VisualType BestType { 
			get {
				int raw_ret = gdk_visual_get_best_type();
				Gdk.VisualType ret = (Gdk.VisualType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_best_with_both(int depth, int visual_type);

		public static Gdk.Visual GetBestWithBoth(int depth, Gdk.VisualType visual_type) {
			IntPtr raw_ret = gdk_visual_get_best_with_both(depth, (int) visual_type);
			Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_best_with_depth(int depth);

		public static Gdk.Visual GetBestWithDepth(int depth) {
			IntPtr raw_ret = gdk_visual_get_best_with_depth(depth);
			Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_best_with_type(int visual_type);

		public static Gdk.Visual GetBestWithType(Gdk.VisualType visual_type) {
			IntPtr raw_ret = gdk_visual_get_best_with_type((int) visual_type);
			Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gdk_visual_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_system();

		public static Gdk.Visual System { 
			get {
				IntPtr raw_ret = gdk_visual_get_system();
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_visual_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class VisualAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_visual_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_visual_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
