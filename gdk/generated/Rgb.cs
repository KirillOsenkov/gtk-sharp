// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Rgb {

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_rgb_colormap_ditherable(IntPtr cmap);

		public static bool ColormapDitherable(Gdk.Colormap cmap) {
			bool raw_ret = gdk_rgb_colormap_ditherable(cmap == null ? IntPtr.Zero : cmap.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_rgb_ditherable();

		public static bool Ditherable() {
			bool raw_ret = gdk_rgb_ditherable();
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_find_color(IntPtr colormap, ref Gdk.Color color);

		public static void FindColor(Gdk.Colormap colormap, ref Gdk.Color color) {
			gdk_rgb_find_color(colormap == null ? IntPtr.Zero : colormap.Handle, ref color);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_gc_set_background(IntPtr gc, uint rgb);

		[Obsolete]
		public static void GcSetBackground(Gdk.GC gc, uint rgb) {
			gdk_rgb_gc_set_background(gc == null ? IntPtr.Zero : gc.Handle, rgb);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_gc_set_foreground(IntPtr gc, uint rgb);

		[Obsolete]
		public static void GcSetForeground(Gdk.GC gc, uint rgb) {
			gdk_rgb_gc_set_foreground(gc == null ? IntPtr.Zero : gc.Handle, rgb);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_rgb_get_colormap();

		public static Gdk.Colormap Colormap { 
			get {
				IntPtr raw_ret = gdk_rgb_get_colormap();
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_rgb_get_visual();

		public static Gdk.Visual Visual { 
			get {
				IntPtr raw_ret = gdk_rgb_get_visual();
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_init();

		[Obsolete]
		public static void Init() {
			gdk_rgb_init();
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_set_install(bool install);

		public static bool Install { 
			set {
				gdk_rgb_set_install(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_set_min_colors(int min_colors);

		public static int MinColors { 
			set {
				gdk_rgb_set_min_colors(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_rgb_set_verbose(bool verbose);

		public static bool Verbose { 
			set {
				gdk_rgb_set_verbose(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gdk_rgb_xpixel_from_rgb(uint rgb);

		[Obsolete]
		public static ulong XpixelFromRgb(uint rgb) {
			UIntPtr raw_ret = gdk_rgb_xpixel_from_rgb(rgb);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

#endregion
	}
}
