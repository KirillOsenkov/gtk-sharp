// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[Color]
	public struct Color {

		public uint Pixel;
		public ushort Red;
		public ushort Green;
		public ushort Blue;

		public static Gdk.Color Zero = new Gdk.Color ();

		public static Gdk.Color New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.Color.Zero;
			unsafe { return *(Gdk.Color*)raw; }
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_color_alloc(IntPtr colormap, ref Gdk.Color color);

		[Obsolete]
		public static int Alloc(Gdk.Colormap colormap, Gdk.Color color) {
			int raw_ret = gdk_color_alloc(colormap == null ? IntPtr.Zero : colormap.Handle, ref color);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_color_black(IntPtr colormap, ref Gdk.Color color);

		[Obsolete]
		public static int Black(Gdk.Colormap colormap, Gdk.Color color) {
			int raw_ret = gdk_color_black(colormap == null ? IntPtr.Zero : colormap.Handle, ref color);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_color_change(IntPtr colormap, ref Gdk.Color color);

		[Obsolete]
		public static int Change(Gdk.Colormap colormap, Gdk.Color color) {
			int raw_ret = gdk_color_change(colormap == null ? IntPtr.Zero : colormap.Handle, ref color);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_color_equal(ref Gdk.Color raw, ref Gdk.Color colorb);

		public bool Equal(Gdk.Color colorb) {
			bool raw_ret = gdk_color_equal(ref this, ref colorb);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_color_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_color_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_color_parse(IntPtr spec, ref Gdk.Color color);

		public static bool Parse(string spec, ref Gdk.Color color) {
			IntPtr native_spec = GLib.Marshaller.StringToPtrGStrdup (spec);
			bool raw_ret = gdk_color_parse(native_spec, ref color);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_spec);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_color_white(IntPtr colormap, ref Gdk.Color color);

		[Obsolete]
		public static int White(Gdk.Colormap colormap, Gdk.Color color) {
			int raw_ret = gdk_color_white(colormap == null ? IntPtr.Zero : colormap.Handle, ref color);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Gdk.Color boxed);

		public static explicit operator GLib.Value (Gdk.Color boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (ColorAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Gdk.Color (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
#region Customized extensions
#line 1 "Color.custom"
// Gdk.Color.custom - Gdk Color class customizations
//
// Author: Jasper van Putten <Jaspervp@gmx.net>, Miguel de Icaza.
//
// Copyright (c) 2002 Jasper van Putten
// Copyright (c) 2003 Miguel de Icaza.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


public override string ToString ()
{
	return String.Format ("rgb:{0:x}/{1:x}/{2:x}", Red, Green, Blue);
}

public Color (byte r, byte g, byte b)
{
	Red = (ushort) (r << 8 | r);
	Green = (ushort) (g << 8 | g);
	Blue = (ushort) (b << 8 | b);
	Pixel = 0;
}

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern uint gdk_color_hash(ref Gdk.Color raw);

public override int GetHashCode() {
        return (int) gdk_color_hash(ref this);
}


#endregion
	}

	internal class ColorAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_color_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_color_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
