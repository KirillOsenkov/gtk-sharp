// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[DragContext]
	public class DragContext : GLib.Object {

		[Obsolete]
		protected DragContext(GLib.GType gtype) : base(gtype) {}
		public DragContext(IntPtr raw) : base(raw) {}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drag_context_new();

		public DragContext () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DragContext)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gdk_drag_context_new();
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_protocol_offset ();

		static uint protocol_offset = gdksharp_gdk_dragcontext_get_protocol_offset ();
		public Gdk.DragProtocol DragProtocol {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + protocol_offset);
					return (Gdk.DragProtocol) (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_is_source_offset ();

		static uint is_source_offset = gdksharp_gdk_dragcontext_get_is_source_offset ();
		public bool IsSource {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + is_source_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_source_window_offset ();

		static uint source_window_offset = gdksharp_gdk_dragcontext_get_source_window_offset ();
		public Gdk.Window SourceWindow {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + source_window_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Window;
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_dest_window_offset ();

		static uint dest_window_offset = gdksharp_gdk_dragcontext_get_dest_window_offset ();
		public Gdk.Window DestWindow {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + dest_window_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Window;
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_actions_offset ();

		static uint actions_offset = gdksharp_gdk_dragcontext_get_actions_offset ();
		public Gdk.DragAction Actions {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + actions_offset);
					return (Gdk.DragAction) (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_suggested_action_offset ();

		static uint suggested_action_offset = gdksharp_gdk_dragcontext_get_suggested_action_offset ();
		public Gdk.DragAction SuggestedAction {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + suggested_action_offset);
					return (Gdk.DragAction) (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_action_offset ();

		static uint action_offset = gdksharp_gdk_dragcontext_get_action_offset ();
		public Gdk.DragAction Action {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + action_offset);
					return (Gdk.DragAction) (*raw_ptr);
				}
			}
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gdksharp_gdk_dragcontext_get_start_time_offset ();

		static uint start_time_offset = gdksharp_gdk_dragcontext_get_start_time_offset ();
		public uint StartTime {
			get {
				unsafe {
					uint* raw_ptr = (uint*)(((byte*)Handle) + start_time_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drag_context_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_drag_context_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drag_context_ref(IntPtr raw);

		[Obsolete]
		public void Ref() {
			gdk_drag_context_ref(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drag_context_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_drag_context_unref(Handle);
		}

#endregion
#region Customized extensions
#line 1 "DragContext.custom"
//
// gdk/DragContext.custom
//
// Author: Ettore Perazzoli <ettore@ximian.com>
//
// Copyright (C) 2003 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_drag_context_get_targets (IntPtr ptr);

public Atom [] Targets {
	get {
		GLib.List list = new GLib.List (gtksharp_drag_context_get_targets (this.Handle), typeof (Atom));
		return GLib.Marshaller.ListToArray<Atom> (list);
	}
}

#endregion
	}

	internal class DragContextAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drag_context_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_drag_context_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
