// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PixbufAnimation]
	public class PixbufAnimation : GLib.Object {

		[Obsolete]
		protected PixbufAnimation(GLib.GType gtype) : base(gtype) {}
		public PixbufAnimation(IntPtr raw) : base(raw) {}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_animation_new_from_file(IntPtr filename, out IntPtr error);

		public unsafe PixbufAnimation (string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PixbufAnimation)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			owned = true;
			Raw = gdk_pixbuf_animation_new_from_file(native_filename, out error);
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_animation_get_height(IntPtr raw);

		public int Height { 
			get {
				int raw_ret = gdk_pixbuf_animation_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_animation_get_iter(IntPtr raw, IntPtr start_time);

		public Gdk.PixbufAnimationIter GetIter(IntPtr start_time) {
			IntPtr raw_ret = gdk_pixbuf_animation_get_iter(Handle, start_time);
			Gdk.PixbufAnimationIter ret = GLib.Object.GetObject(raw_ret) as Gdk.PixbufAnimationIter;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_animation_get_static_image(IntPtr raw);

		public Gdk.Pixbuf StaticImage { 
			get {
				IntPtr raw_ret = gdk_pixbuf_animation_get_static_image(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_animation_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_pixbuf_animation_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_pixbuf_animation_get_width(IntPtr raw);

		public int Width { 
			get {
				int raw_ret = gdk_pixbuf_animation_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_animation_is_static_image(IntPtr raw);

		public bool IsStaticImage { 
			get {
				bool raw_ret = gdk_pixbuf_animation_is_static_image(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_animation_ref(IntPtr raw);

		[Obsolete]
		public Gdk.PixbufAnimation Ref() {
			IntPtr raw_ret = gdk_pixbuf_animation_ref(Handle);
			Gdk.PixbufAnimation ret = GLib.Object.GetObject(raw_ret) as Gdk.PixbufAnimation;
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_animation_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_pixbuf_animation_unref(Handle);
		}

#endregion
#region Customized extensions
#line 1 "PixbufAnimation.custom"
// PixbufAnimation.custom - GdkPixbufAnimation class customizations
//
// Copyright (c) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public PixbufAnimation (System.IO.Stream stream) : base (new PixbufLoader (stream).AnimationHandle) {}

		public PixbufAnimation (System.Reflection.Assembly assembly, string resource) : base (IntPtr.Zero)
		{
			if (assembly == null)
				assembly = System.Reflection.Assembly.GetCallingAssembly ();
			owned = true;
			Raw = new PixbufLoader (assembly, resource).AnimationHandle;
		}

		static public PixbufAnimation LoadFromResource (string resource)
		{
			return new PixbufAnimation (System.Reflection.Assembly.GetCallingAssembly (), resource);
		}

#endregion
	}

	internal class PixbufAnimationAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_animation_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_pixbuf_animation_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
