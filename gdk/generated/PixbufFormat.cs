// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.GTypeOpaque]
	public class PixbufFormat : GLib.Opaque {

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_description(IntPtr raw);

		public string Description { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_description(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_extensions(IntPtr raw);

		public string[] Extensions { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_extensions(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_license(IntPtr raw);

		public string License { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_license(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_mime_types(IntPtr raw);

		public string[] MimeTypes { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_mime_types(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_format_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gdk_pixbuf_format_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_disabled(IntPtr raw);

		public bool IsDisabled { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_disabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_scalable(IntPtr raw);

		public bool IsScalable { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_scalable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_pixbuf_format_is_writable(IntPtr raw);

		public bool IsWritable { 
			get {
				bool raw_ret = gdk_pixbuf_format_is_writable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_format_set_disabled(IntPtr raw, bool disabled);

		public bool Disabled { 
			set {
				gdk_pixbuf_format_set_disabled(Handle, value);
			}
		}

		public PixbufFormat(IntPtr raw) : base(raw) {}

#endregion
	}
}
