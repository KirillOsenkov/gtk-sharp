// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Keymap]
	public class Keymap : GLib.Object {

		[Obsolete]
		protected Keymap(GLib.GType gtype) : base(gtype) {}
		public Keymap(IntPtr raw) : base(raw) {}

		protected Keymap() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DirectionChangedVMDelegate (IntPtr keymap);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_keymap_override_direction_changed (IntPtr gtype, DirectionChangedVMDelegate cb);

		static DirectionChangedVMDelegate DirectionChangedVMCallback;

		static void directionchanged_cb (IntPtr keymap)
		{
			try {
				Keymap keymap_managed = GLib.Object.GetObject (keymap, false) as Keymap;
				keymap_managed.OnDirectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDirectionChanged (GLib.GType gtype)
		{
			if (DirectionChangedVMCallback == null)
				DirectionChangedVMCallback = new DirectionChangedVMDelegate (directionchanged_cb);
			gdksharp_keymap_override_direction_changed (gtype.Val, DirectionChangedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_keymap_base_direction_changed (IntPtr keymap);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Keymap), ConnectionMethod="OverrideDirectionChanged")]
		protected virtual void OnDirectionChanged ()
		{
			gdksharp_keymap_base_direction_changed (Handle);
		}

		[GLib.Signal("direction_changed")]
		public event System.EventHandler DirectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "direction_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "direction_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void KeysChangedVMDelegate (IntPtr keymap);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_keymap_override_keys_changed (IntPtr gtype, KeysChangedVMDelegate cb);

		static KeysChangedVMDelegate KeysChangedVMCallback;

		static void keyschanged_cb (IntPtr keymap)
		{
			try {
				Keymap keymap_managed = GLib.Object.GetObject (keymap, false) as Keymap;
				keymap_managed.OnKeysChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideKeysChanged (GLib.GType gtype)
		{
			if (KeysChangedVMCallback == null)
				KeysChangedVMCallback = new KeysChangedVMDelegate (keyschanged_cb);
			gdksharp_keymap_override_keys_changed (gtype.Val, KeysChangedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_keymap_base_keys_changed (IntPtr keymap);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Keymap), ConnectionMethod="OverrideKeysChanged")]
		protected virtual void OnKeysChanged ()
		{
			gdksharp_keymap_base_keys_changed (Handle);
		}

		[GLib.Signal("keys_changed")]
		public event System.EventHandler KeysChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "keys_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "keys_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_keymap_get_default();

		public static Gdk.Keymap Default { 
			get {
				IntPtr raw_ret = gdk_keymap_get_default();
				Gdk.Keymap ret = GLib.Object.GetObject(raw_ret) as Gdk.Keymap;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_keymap_get_direction(IntPtr raw);

		public Pango.Direction Direction { 
			get {
				int raw_ret = gdk_keymap_get_direction(Handle);
				Pango.Direction ret = (Pango.Direction) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_keymap_get_for_display(IntPtr display);

		public static Gdk.Keymap GetForDisplay(Gdk.Display display) {
			IntPtr raw_ret = gdk_keymap_get_for_display(display == null ? IntPtr.Zero : display.Handle);
			Gdk.Keymap ret = GLib.Object.GetObject(raw_ret) as Gdk.Keymap;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_keymap_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_keymap_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_keymap_have_bidi_layouts(IntPtr raw);

		public bool HaveBidiLayouts() {
			bool raw_ret = gdk_keymap_have_bidi_layouts(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_keymap_lookup_key(IntPtr raw, ref Gdk.KeymapKey key);

		public uint LookupKey(Gdk.KeymapKey key) {
			uint raw_ret = gdk_keymap_lookup_key(Handle, ref key);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_keymap_translate_keyboard_state(IntPtr raw, uint hardware_keycode, int state, int group, out uint keyval, out int effective_group, out int level, out int consumed_modifiers);

		public bool TranslateKeyboardState(uint hardware_keycode, Gdk.ModifierType state, int group, out uint keyval, out int effective_group, out int level, out Gdk.ModifierType consumed_modifiers) {
			int native_consumed_modifiers;
			bool raw_ret = gdk_keymap_translate_keyboard_state(Handle, hardware_keycode, (int) state, group, out keyval, out effective_group, out level, out native_consumed_modifiers);
			bool ret = raw_ret;
			consumed_modifiers = (Gdk.ModifierType) native_consumed_modifiers;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Keymap.custom"
// Keymap.custom - customizations to Gdk.Keymap
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
                static extern void g_free(IntPtr ptr);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gdk_keymap_get_entries_for_keycode(IntPtr raw, uint hardware_keycode, out IntPtr keys, out IntPtr keyvals, out int n_entries);

		public void GetEntriesForKeycode(uint hardware_keycode, out Gdk.KeymapKey[] keys, out uint[] keyvals) 
		{
			IntPtr key_ptr, keyval_ptr;
			int count;
			if (gdk_keymap_get_entries_for_keycode(Handle, hardware_keycode, out key_ptr, out keyval_ptr, out count)) {
				keys = new KeymapKey [count];
				keyvals = new uint [count];
				int[] tmp = new int [count];
				Marshal.Copy (keyval_ptr, tmp, 0, count);
				int keymapKeySize = Marshal.SizeOf (typeof (Gdk.KeymapKey));
				for (int i = 0; i < count; i++) {
					IntPtr ptr = new IntPtr ((long) key_ptr + i * keymapKeySize);
					keyvals [i] = (uint) tmp [i];
					keys [i] = KeymapKey.New (ptr);
				}
				g_free (key_ptr);
				g_free (keyval_ptr);
			} else {
				keys = new KeymapKey [0];
				keyvals = new uint [0];
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gdk_keymap_get_entries_for_keyval(IntPtr raw, uint keyval, out IntPtr keys, out int n_keys);

		public KeymapKey[] GetEntriesForKeyval (uint keyval) 
		{
			IntPtr key_ptr;
			int count;
			if (gdk_keymap_get_entries_for_keyval(Handle, keyval, out key_ptr, out count)) {
				KeymapKey[] result = new KeymapKey [count];
				int keymapKeySize = Marshal.SizeOf (typeof (Gdk.KeymapKey));
				for (int i = 0; i < count; i++) {
					IntPtr ptr = new IntPtr ((long) key_ptr + i * keymapKeySize);
					result [i] = KeymapKey.New (ptr);
				}
				g_free (key_ptr);
				return result;
			} else
				return new KeymapKey [0];
		}


#endregion
	}

	internal class KeymapAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_keymap_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_keymap_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
