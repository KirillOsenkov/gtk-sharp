// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Display]
	public class Display : GLib.Object {

		[Obsolete]
		protected Display(GLib.GType gtype) : base(gtype) {}
		public Display(IntPtr raw) : base(raw) {}

		protected Display() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_set_double_click_time(IntPtr raw, uint msec);

		public uint DoubleClickTime {
			set  {
				gdk_display_set_double_click_time(Handle, value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_core_pointer(IntPtr raw);

		public Gdk.Device CorePointer {
			get  {
				IntPtr raw_ret = gdk_display_get_core_pointer(Handle);
				Gdk.Device ret = GLib.Object.GetObject(raw_ret) as Gdk.Device;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_set_double_click_distance(IntPtr raw, uint distance);

		public uint DoubleClickDistance {
			set  {
				gdk_display_set_double_click_distance(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedVMDelegate (IntPtr display, bool is_error);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_display_override_closed (IntPtr gtype, ClosedVMDelegate cb);

		static ClosedVMDelegate ClosedVMCallback;

		static void closed_cb (IntPtr display, bool is_error)
		{
			try {
				Display display_managed = GLib.Object.GetObject (display, false) as Display;
				display_managed.OnClosed (is_error);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClosed (GLib.GType gtype)
		{
			if (ClosedVMCallback == null)
				ClosedVMCallback = new ClosedVMDelegate (closed_cb);
			gdksharp_display_override_closed (gtype.Val, ClosedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_display_base_closed (IntPtr display, bool is_error);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.Display), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed (bool is_error)
		{
			gdksharp_display_base_closed (Handle, is_error);
		}

		[GLib.Signal("closed")]
		public event Gdk.ClosedHandler Closed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "closed", typeof (Gdk.ClosedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "closed", typeof (Gdk.ClosedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_beep(IntPtr raw);

		public void Beep() {
			gdk_display_beep(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_close(IntPtr raw);

		public void Close() {
			gdk_display_close(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_flush(IntPtr raw);

		public void Flush() {
			gdk_display_flush(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default();

		public static Gdk.Display Default { 
			get {
				IntPtr raw_ret = gdk_display_get_default();
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_display_get_default_cursor_size(IntPtr raw);

		public uint DefaultCursorSize { 
			get {
				uint raw_ret = gdk_display_get_default_cursor_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default_group(IntPtr raw);

		public Gdk.Window DefaultGroup { 
			get {
				IntPtr raw_ret = gdk_display_get_default_group(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_default_screen(IntPtr raw);

		public Gdk.Screen DefaultScreen { 
			get {
				IntPtr raw_ret = gdk_display_get_default_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_get_maximal_cursor_size(IntPtr raw, out uint width, out uint height);

		public void GetMaximalCursorSize(out uint width, out uint height) {
			gdk_display_get_maximal_cursor_size(Handle, out width, out height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_display_get_n_screens(IntPtr raw);

		public int NScreens { 
			get {
				int raw_ret = gdk_display_get_n_screens(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gdk_display_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_screen(IntPtr raw, int screen_num);

		public Gdk.Screen GetScreen(int screen_num) {
			IntPtr raw_ret = gdk_display_get_screen(Handle, screen_num);
			Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_display_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_window_at_pointer(IntPtr raw, out int win_x, out int win_y);

		public Gdk.Window GetWindowAtPointer(out int win_x, out int win_y) {
			IntPtr raw_ret = gdk_display_get_window_at_pointer(Handle, out win_x, out win_y);
			Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_keyboard_ungrab(IntPtr raw, uint time_);

		public void KeyboardUngrab(uint time_) {
			gdk_display_keyboard_ungrab(Handle, time_);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_open(IntPtr display_name);

		public static Gdk.Display Open(string display_name) {
			IntPtr native_display_name = GLib.Marshaller.StringToPtrGStrdup (display_name);
			IntPtr raw_ret = gdk_display_open(native_display_name);
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			GLib.Marshaller.Free (native_display_name);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_open_default_libgtk_only();

		public static Gdk.Display OpenDefaultLibgtkOnly() {
			IntPtr raw_ret = gdk_display_open_default_libgtk_only();
			Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_pointer_is_grabbed(IntPtr raw);

		public bool PointerIsGrabbed() {
			bool raw_ret = gdk_display_pointer_is_grabbed(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_pointer_ungrab(IntPtr raw, uint time_);

		public void PointerUngrab(uint time_) {
			gdk_display_pointer_ungrab(Handle, time_);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_put_event(IntPtr raw, IntPtr evnt);

		public void PutEvent(Gdk.Event evnt) {
			gdk_display_put_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_request_selection_notification(IntPtr raw, IntPtr selection);

		public bool RequestSelectionNotification(Gdk.Atom selection) {
			bool raw_ret = gdk_display_request_selection_notification(Handle, selection == null ? IntPtr.Zero : selection.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_set_pointer_hooks(IntPtr raw, ref Gdk.DisplayPointerHooks new_hooks);

		public Gdk.DisplayPointerHooks SetPointerHooks(Gdk.DisplayPointerHooks new_hooks) {
			IntPtr raw_ret = gdk_display_set_pointer_hooks(Handle, ref new_hooks);
			Gdk.DisplayPointerHooks ret = Gdk.DisplayPointerHooks.New (raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_store_clipboard(IntPtr raw, IntPtr clipboard_window, uint time_, IntPtr targets, int n_targets);

		public void StoreClipboard(Gdk.Window clipboard_window, uint time_, Gdk.Atom targets, int n_targets) {
			gdk_display_store_clipboard(Handle, clipboard_window == null ? IntPtr.Zero : clipboard_window.Handle, time_, targets == null ? IntPtr.Zero : targets.Handle, n_targets);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_clipboard_persistence(IntPtr raw);

		public bool SupportsClipboardPersistence() {
			bool raw_ret = gdk_display_supports_clipboard_persistence(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_composite(IntPtr raw);

		public bool SupportsComposite { 
			get {
				bool raw_ret = gdk_display_supports_composite(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_cursor_alpha(IntPtr raw);

		public bool SupportsCursorAlpha() {
			bool raw_ret = gdk_display_supports_cursor_alpha(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_cursor_color(IntPtr raw);

		public bool SupportsCursorColor() {
			bool raw_ret = gdk_display_supports_cursor_color(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_input_shapes(IntPtr raw);

		public bool SupportsInputShapes { 
			get {
				bool raw_ret = gdk_display_supports_input_shapes(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_selection_notification(IntPtr raw);

		public bool SupportsSelectionNotification() {
			bool raw_ret = gdk_display_supports_selection_notification(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_display_supports_shapes(IntPtr raw);

		public bool SupportsShapes { 
			get {
				bool raw_ret = gdk_display_supports_shapes(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_sync(IntPtr raw);

		public void Sync() {
			gdk_display_sync(Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_display_warp_pointer(IntPtr raw, IntPtr screen, int x, int y);

		public void WarpPointer(Gdk.Screen screen, int x, int y) {
			gdk_display_warp_pointer(Handle, screen == null ? IntPtr.Zero : screen.Handle, x, y);
		}

#endregion
#region Customized extensions
#line 1 "Display.custom"
// Display.custom - customizations to Gdk.Display
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_display_get_pointer(IntPtr raw, IntPtr screen, out int x, out int y, out int mask);

		[Obsolete]
		public void GetPointer(Gdk.Screen screen, out int x, out int y, out Gdk.ModifierType mask) {
			int mask_as_int;
			gdk_display_get_pointer(Handle, screen.Handle, out x, out y, out mask_as_int);
			mask = (Gdk.ModifierType) mask_as_int;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_display_get_pointer(IntPtr raw, out IntPtr screen, out int x, out int y, out int mask);

		public void GetPointer(out Gdk.Screen screen, out int x, out int y, out Gdk.ModifierType mask) {
			IntPtr screen_handle;
			int mask_as_int;
			gdk_display_get_pointer(Handle, out screen_handle, out x, out y, out mask_as_int);
			screen = (Gdk.Screen) GLib.Object.GetObject(screen_handle);
			mask = (Gdk.ModifierType) mask_as_int;
		}

		public void GetPointer (out int x, out int y)
		{
			Gdk.ModifierType mod;
			Gdk.Screen screen;
			GetPointer (out screen, out x, out y, out mod);
		}

		public void GetPointer (out int x, out int y, out Gdk.ModifierType mod)
		{
			Gdk.Screen screen;
			GetPointer (out screen, out x, out y, out mod);
		}

		public void GetPointer (out Gdk.Screen screen, out int x, out int y)
		{
			Gdk.ModifierType mod;
			GetPointer (out screen, out x, out y, out mod);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_list_devices (IntPtr raw);

		public Device[] ListDevices ()
		{
			IntPtr raw_ret = gdk_display_list_devices (Handle);
			if (raw_ret == IntPtr.Zero)
				return new Device [0];
			GLib.List list = new GLib.List(raw_ret);
			return GLib.Marshaller.ListToArray<Device> (list);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_display_add_client_message_filter (IntPtr raw, IntPtr message_type, GdkSharp.FilterFuncNative func, IntPtr data);

		public void AddClientMessageFilter (Gdk.Atom message_type, Gdk.FilterFunc func) 
		{
			// Purposefully leak this indefinitely, there's no gdk_display_remove_client_message_filter.
			var gch = GCHandle.Alloc (func);
			gdk_display_add_client_message_filter (Handle, message_type == null ? IntPtr.Zero : message_type.Handle, GdkSharp.FilterFuncWrapper.NativeDelegate, (IntPtr)gch);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_event(IntPtr raw);

		public Gdk.Event Event { 
			get {
				IntPtr raw_ret = gdk_display_get_event(Handle);
				Gdk.Event ret = Gdk.Event.GetEvent (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_peek_event(IntPtr raw);

		public Gdk.Event PeekEvent() {
			IntPtr raw_ret = gdk_display_peek_event(Handle);
			Gdk.Event ret = Gdk.Event.GetEvent (raw_ret, true);
			return ret;
		}


#endregion
	}

	internal class DisplayAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_display_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_display_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
