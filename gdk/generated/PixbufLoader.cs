// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PixbufLoader]
	public class PixbufLoader : GLib.Object {

		[Obsolete]
		protected PixbufLoader(GLib.GType gtype) : base(gtype) {}
		public PixbufLoader(IntPtr raw) : base(raw) {}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_new();

		public PixbufLoader () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PixbufLoader)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gdk_pixbuf_loader_new();
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_loader_new_with_mime_type(IntPtr mime_type, out IntPtr error);

		public unsafe PixbufLoader (string mime_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PixbufLoader)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr error = IntPtr.Zero;
			owned = true;
			Raw = gdk_pixbuf_loader_new_with_mime_type(native_mime_type, out error);
			GLib.Marshaller.Free (native_mime_type);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gdk_pixbuf_loader_new_with_type(IntPtr image_type, out IntPtr error);

		public static unsafe PixbufLoader NewWithType(string image_type)
		{
			IntPtr native_image_type = GLib.Marshaller.StringToPtrGStrdup (image_type);
			IntPtr error = IntPtr.Zero;
			PixbufLoader result = new PixbufLoader (gdk_pixbuf_loader_new_with_type(native_image_type, out error));
			GLib.Marshaller.Free (native_image_type);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return result;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SizePreparedVMDelegate (IntPtr loader, int width, int height);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_override_size_prepared (IntPtr gtype, SizePreparedVMDelegate cb);

		static SizePreparedVMDelegate SizePreparedVMCallback;

		static void sizeprepared_cb (IntPtr loader, int width, int height)
		{
			try {
				PixbufLoader loader_managed = GLib.Object.GetObject (loader, false) as PixbufLoader;
				loader_managed.OnSizePrepared (width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSizePrepared (GLib.GType gtype)
		{
			if (SizePreparedVMCallback == null)
				SizePreparedVMCallback = new SizePreparedVMDelegate (sizeprepared_cb);
			gdksharp_pixbufloader_override_size_prepared (gtype.Val, SizePreparedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_base_size_prepared (IntPtr loader, int width, int height);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideSizePrepared")]
		protected virtual void OnSizePrepared (int width, int height)
		{
			gdksharp_pixbufloader_base_size_prepared (Handle, width, height);
		}

		[GLib.Signal("size_prepared")]
		public event Gdk.SizePreparedHandler SizePrepared {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "size_prepared", typeof (Gdk.SizePreparedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "size_prepared", typeof (Gdk.SizePreparedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AreaPreparedVMDelegate (IntPtr loader);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_override_area_prepared (IntPtr gtype, AreaPreparedVMDelegate cb);

		static AreaPreparedVMDelegate AreaPreparedVMCallback;

		static void areaprepared_cb (IntPtr loader)
		{
			try {
				PixbufLoader loader_managed = GLib.Object.GetObject (loader, false) as PixbufLoader;
				loader_managed.OnAreaPrepared ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAreaPrepared (GLib.GType gtype)
		{
			if (AreaPreparedVMCallback == null)
				AreaPreparedVMCallback = new AreaPreparedVMDelegate (areaprepared_cb);
			gdksharp_pixbufloader_override_area_prepared (gtype.Val, AreaPreparedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_base_area_prepared (IntPtr loader);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideAreaPrepared")]
		protected virtual void OnAreaPrepared ()
		{
			gdksharp_pixbufloader_base_area_prepared (Handle);
		}

		[GLib.Signal("area_prepared")]
		public event System.EventHandler AreaPrepared {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "area_prepared");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "area_prepared");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AreaUpdatedVMDelegate (IntPtr loader, int x, int y, int width, int height);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_override_area_updated (IntPtr gtype, AreaUpdatedVMDelegate cb);

		static AreaUpdatedVMDelegate AreaUpdatedVMCallback;

		static void areaupdated_cb (IntPtr loader, int x, int y, int width, int height)
		{
			try {
				PixbufLoader loader_managed = GLib.Object.GetObject (loader, false) as PixbufLoader;
				loader_managed.OnAreaUpdated (x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAreaUpdated (GLib.GType gtype)
		{
			if (AreaUpdatedVMCallback == null)
				AreaUpdatedVMCallback = new AreaUpdatedVMDelegate (areaupdated_cb);
			gdksharp_pixbufloader_override_area_updated (gtype.Val, AreaUpdatedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_base_area_updated (IntPtr loader, int x, int y, int width, int height);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideAreaUpdated")]
		protected virtual void OnAreaUpdated (int x, int y, int width, int height)
		{
			gdksharp_pixbufloader_base_area_updated (Handle, x, y, width, height);
		}

		[GLib.Signal("area_updated")]
		public event Gdk.AreaUpdatedHandler AreaUpdated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "area_updated", typeof (Gdk.AreaUpdatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "area_updated", typeof (Gdk.AreaUpdatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedVMDelegate (IntPtr loader);

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_override_closed (IntPtr gtype, ClosedVMDelegate cb);

		static ClosedVMDelegate ClosedVMCallback;

		static void closed_cb (IntPtr loader)
		{
			try {
				PixbufLoader loader_managed = GLib.Object.GetObject (loader, false) as PixbufLoader;
				loader_managed.OnClosed ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClosed (GLib.GType gtype)
		{
			if (ClosedVMCallback == null)
				ClosedVMCallback = new ClosedVMDelegate (closed_cb);
			gdksharp_pixbufloader_override_closed (gtype.Val, ClosedVMCallback);
		}

		[DllImport ("gdksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdksharp_pixbufloader_base_closed (IntPtr loader);

		[GLib.DefaultSignalHandler(Type=typeof(Gdk.PixbufLoader), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed ()
		{
			gdksharp_pixbufloader_base_closed (Handle);
		}

		[GLib.Signal("closed")]
		public event System.EventHandler Closed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "closed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "closed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gdk_pixbuf_loader_close(IntPtr raw, out IntPtr error);

		public unsafe bool Close() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gdk_pixbuf_loader_close(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_animation(IntPtr raw);

		public Gdk.PixbufAnimation Animation { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_animation(Handle);
				Gdk.PixbufAnimation ret = GLib.Object.GetObject(raw_ret) as Gdk.PixbufAnimation;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_format(IntPtr raw);

		public Gdk.PixbufFormat Format { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_format(Handle);
				Gdk.PixbufFormat ret = raw_ret == IntPtr.Zero ? null : (Gdk.PixbufFormat) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.PixbufFormat), false);
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_pixbuf(IntPtr raw);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gdk_pixbuf_loader_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_pixbuf_loader_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pixbuf_loader_set_size(IntPtr raw, int width, int height);

		public void SetSize(int width, int height) {
			gdk_pixbuf_loader_set_size(Handle, width, height);
		}

		[DllImport("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gdk_pixbuf_loader_write(IntPtr raw, byte[] buf, UIntPtr count, out IntPtr error);

		public unsafe bool Write(byte[] buf, ulong count) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gdk_pixbuf_loader_write(Handle, buf, new UIntPtr (count), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "PixbufLoader.custom"
// PixbufLoader.custom - Gdk PixbufLoader class customizations
//
// Authors: 
//	Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2003 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgobject-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr g_object_ref (IntPtr handle);

		[System.Diagnostics.DebuggerBrowsable (System.Diagnostics.DebuggerBrowsableState.Never)]
		internal IntPtr PixbufHandle {
			get {
				return g_object_ref (gdk_pixbuf_loader_get_pixbuf (Handle));
			}
		}

		[System.Diagnostics.DebuggerBrowsable (System.Diagnostics.DebuggerBrowsableState.Never)]
		internal IntPtr AnimationHandle {
			get {
				return g_object_ref (gdk_pixbuf_loader_get_animation (Handle));
			}
		}

  		public bool Write (byte[] bytes)
  		{
			return this.Write (bytes, (ulong) bytes.Length);
  		}
  
		[Obsolete ("Replaced by Write (byte[], ulong) for 64 bit portability")]
		public bool Write (byte[] bytes, uint count)
		{
			return this.Write (bytes, (ulong) count);
		}

		private void LoadFromStream (System.IO.Stream input, byte [] streamingBuffer)
		{
			byte [] buffer = streamingBuffer ?? new byte [8192];
			int n;

			while ((n = input.Read (buffer, 0, 8192)) != 0)
				Write (buffer, (ulong) n);
		}
		
		public PixbufLoader (string file, int width, int height, byte [] streamingBuffer) : this ()
		{
			SetSize(width, height);
			
			using(System.IO.FileStream stream = new System.IO.FileStream(file, System.IO.FileMode.Open, System.IO.FileAccess.Read))
			{
				InitFromStream(stream, streamingBuffer);
			}
		}

		public PixbufLoader (string file, int width, int height) : this (file, width, height, null)
		{
		}

		public PixbufLoader (System.IO.Stream stream, byte [] streamingBuffer) : this ()
		{
			InitFromStream (stream, streamingBuffer);
		}

		public PixbufLoader (System.IO.Stream stream) : this (stream, null)
		{
		}
		
		private void InitFromStream (System.IO.Stream stream, byte [] buffer)
		{
			if (stream == null)
				throw new ArgumentNullException ("stream");

			try {
				LoadFromStream (stream, buffer);
			} finally {
				Close ();
			}
		}

		public PixbufLoader (System.IO.Stream stream, int width, int height, byte [] streamingBuffer) : this ()
		{
			SetSize (width, height);
			InitFromStream (stream, streamingBuffer);
		}

		public PixbufLoader (System.IO.Stream stream, int width, int height) : this (stream, width, height, null)
		{
		}

		public PixbufLoader (System.Reflection.Assembly assembly, string resource, byte [] streamingBuffer) : this ()
		{
			InitFromAssemblyResource(assembly == null ? System.Reflection.Assembly.GetCallingAssembly () : assembly, resource, streamingBuffer);
		}

		public PixbufLoader (System.Reflection.Assembly assembly, string resource) : this (assembly, resource, null)
		{
		}

		
		private void InitFromAssemblyResource(System.Reflection.Assembly assembly, string resource, byte [] streamingBuffer)
		{
			if (assembly == null)
				throw new ArgumentNullException ("assembly");

			System.IO.Stream s = assembly.GetManifestResourceStream (resource);
			if (s == null)
				throw new ArgumentException ("'" + resource + "' is not a valid resource name of assembly '" + assembly + "'.");

			try {
				LoadFromStream (s, streamingBuffer);
			} finally {
				Close ();
			}
		}

		public PixbufLoader (System.Reflection.Assembly assembly, string resource, int width, int height, byte [] streamingBuffer) : this ()
		{
			SetSize (width, height);
			InitFromAssemblyResource (assembly == null ? System.Reflection.Assembly.GetCallingAssembly () : assembly, resource, streamingBuffer);
		}
		
		public PixbufLoader (System.Reflection.Assembly assembly, string resource, int width, int height) : this (assembly, resource, width, height, null)
		{
		}
		
		public PixbufLoader (byte[] buffer) : this()
		{
			InitFromBuffer(buffer);
		}
		
		private void InitFromBuffer (byte[] buffer)
		{
			try {
				Write (buffer, (uint)buffer.Length);
			} finally {
				Close ();
			}
		}
		
		
		public PixbufLoader (byte[] buffer, int width, int height) : this()
		{
			SetSize(width, height);
			InitFromBuffer(buffer);
		}

		static public PixbufLoader LoadFromResource (string resource)
		{
			return new PixbufLoader (System.Reflection.Assembly.GetCallingAssembly (), resource);
		}

		static public PixbufLoader LoadFromResource (string resource, byte [] streamingBuffer)
		{
			return new PixbufLoader (System.Reflection.Assembly.GetCallingAssembly (), resource, streamingBuffer);
		}

#endregion
	}

	internal class PixbufLoaderAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk_pixbuf-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_pixbuf_loader_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_pixbuf_loader_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
