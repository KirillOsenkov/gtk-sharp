// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	[StructLayout(LayoutKind.Sequential)]
	[Font]
	public struct Font {

		public Gdk.FontType Type;
		public int Ascent;
		public int Descent;

		public static Gdk.Font Zero = new Gdk.Font ();

		public static Gdk.Font New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.Font.Zero;
			unsafe { return *(Gdk.Font*)raw; }
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_font_equal(ref Gdk.Font raw, ref Gdk.Font fontb);

		public bool Equal(Gdk.Font fontb) {
			bool raw_ret = gdk_font_equal(ref this, ref fontb);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_from_description(IntPtr font_desc);

		public static Gdk.Font FromDescription(Pango.FontDescription font_desc) {
			IntPtr raw_ret = gdk_font_from_description(font_desc == null ? IntPtr.Zero : font_desc.Handle);
			Gdk.Font ret = Gdk.Font.New (raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_from_description_for_display(IntPtr display, IntPtr font_desc);

		public static Gdk.Font FromDescriptionForDisplay(Gdk.Display display, Pango.FontDescription font_desc) {
			IntPtr raw_ret = gdk_font_from_description_for_display(display == null ? IntPtr.Zero : display.Handle, font_desc == null ? IntPtr.Zero : font_desc.Handle);
			Gdk.Font ret = Gdk.Font.New (raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_get_display(ref Gdk.Font raw);

		public Gdk.Display Display { 
			get {
				IntPtr raw_ret = gdk_font_get_display(ref this);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_font_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_font_id(ref Gdk.Font raw);

		public int Id() {
			int raw_ret = gdk_font_id(ref this);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_load(IntPtr font_name);

		public static Gdk.Font Load(string font_name) {
			IntPtr native_font_name = GLib.Marshaller.StringToPtrGStrdup (font_name);
			IntPtr raw_ret = gdk_font_load(native_font_name);
			Gdk.Font ret = Gdk.Font.New (raw_ret);
			GLib.Marshaller.Free (native_font_name);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_load_for_display(IntPtr display, IntPtr font_name);

		public static Gdk.Font LoadForDisplay(Gdk.Display display, string font_name) {
			IntPtr native_font_name = GLib.Marshaller.StringToPtrGStrdup (font_name);
			IntPtr raw_ret = gdk_font_load_for_display(display == null ? IntPtr.Zero : display.Handle, native_font_name);
			Gdk.Font ret = Gdk.Font.New (raw_ret);
			GLib.Marshaller.Free (native_font_name);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_ref(ref Gdk.Font raw);

		public Gdk.Font Ref() {
			IntPtr raw_ret = gdk_font_ref(ref this);
			Gdk.Font ret = Gdk.Font.New (raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_font_unref(ref Gdk.Font raw);

		public void Unref() {
			gdk_font_unref(ref this);
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Gdk.Font boxed);

		public static explicit operator GLib.Value (Gdk.Font boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (FontAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Gdk.Font (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}

	internal class FontAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_font_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_font_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
