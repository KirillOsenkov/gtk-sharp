// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Drawable]
	public class Drawable : GLib.Object {

		[Obsolete]
		protected Drawable(GLib.GType gtype) : base(gtype) {}
		public Drawable(IntPtr raw) : base(raw) {}

		protected Drawable() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_arc(IntPtr raw, IntPtr gc, bool filled, int x, int y, int width, int height, int angle1, int angle2);

		public void DrawArc(Gdk.GC gc, bool filled, int x, int y, int width, int height, int angle1, int angle2) {
			gdk_draw_arc(Handle, gc == null ? IntPtr.Zero : gc.Handle, filled, x, y, width, height, angle1, angle2);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_drawable(IntPtr raw, IntPtr gc, IntPtr src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);

		public void DrawDrawable(Gdk.GC gc, Gdk.Drawable src, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
			gdk_draw_drawable(Handle, gc == null ? IntPtr.Zero : gc.Handle, src == null ? IntPtr.Zero : src.Handle, xsrc, ysrc, xdest, ydest, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_glyphs(IntPtr raw, IntPtr gc, IntPtr font, int x, int y, IntPtr glyphs);

		public void DrawGlyphs(Gdk.GC gc, Pango.Font font, int x, int y, Pango.GlyphString glyphs) {
			gdk_draw_glyphs(Handle, gc == null ? IntPtr.Zero : gc.Handle, font == null ? IntPtr.Zero : font.Handle, x, y, glyphs == null ? IntPtr.Zero : glyphs.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_glyphs_transformed(IntPtr raw, IntPtr gc, ref Pango.Matrix matrix, IntPtr font, int x, int y, IntPtr glyphs);

		public void DrawGlyphsTransformed(Gdk.GC gc, Pango.Matrix matrix, Pango.Font font, int x, int y, Pango.GlyphString glyphs) {
			gdk_draw_glyphs_transformed(Handle, gc == null ? IntPtr.Zero : gc.Handle, ref matrix, font == null ? IntPtr.Zero : font.Handle, x, y, glyphs == null ? IntPtr.Zero : glyphs.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_gray_image(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] buf, int rowstride);

		public void DrawGrayImage(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] buf, int rowstride) {
			gdk_draw_gray_image(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, buf, rowstride);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_image(IntPtr raw, IntPtr gc, IntPtr image, int xsrc, int ysrc, int xdest, int ydest, int width, int height);

		public void DrawImage(Gdk.GC gc, Gdk.Image image, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
			gdk_draw_image(Handle, gc == null ? IntPtr.Zero : gc.Handle, image == null ? IntPtr.Zero : image.Handle, xsrc, ysrc, xdest, ydest, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_indexed_image(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] buf, int rowstride, IntPtr cmap);

		public void DrawIndexedImage(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] buf, int rowstride, Gdk.RgbCmap cmap) {
			gdk_draw_indexed_image(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, buf, rowstride, cmap == null ? IntPtr.Zero : cmap.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_layout(IntPtr raw, IntPtr gc, int x, int y, IntPtr layout);

		public void DrawLayout(Gdk.GC gc, int x, int y, Pango.Layout layout) {
			gdk_draw_layout(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, layout == null ? IntPtr.Zero : layout.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_layout_line(IntPtr raw, IntPtr gc, int x, int y, IntPtr line);

		public void DrawLayoutLine(Gdk.GC gc, int x, int y, Pango.LayoutLine line) {
			gdk_draw_layout_line(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, line == null ? IntPtr.Zero : line.Handle);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_layout_line_with_colors(IntPtr raw, IntPtr gc, int x, int y, IntPtr line, ref Gdk.Color foreground, ref Gdk.Color background);

		public void DrawLayoutLineWithColors(Gdk.GC gc, int x, int y, Pango.LayoutLine line, Gdk.Color foreground, Gdk.Color background) {
			gdk_draw_layout_line_with_colors(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, line == null ? IntPtr.Zero : line.Handle, ref foreground, ref background);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_layout_with_colors(IntPtr raw, IntPtr gc, int x, int y, IntPtr layout, ref Gdk.Color foreground, ref Gdk.Color background);

		public void DrawLayoutWithColors(Gdk.GC gc, int x, int y, Pango.Layout layout, Gdk.Color foreground, Gdk.Color background) {
			gdk_draw_layout_with_colors(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, layout == null ? IntPtr.Zero : layout.Handle, ref foreground, ref background);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_line(IntPtr raw, IntPtr gc, int x1_, int y1_, int x2_, int y2_);

		public void DrawLine(Gdk.GC gc, int x1_, int y1_, int x2_, int y2_) {
			gdk_draw_line(Handle, gc == null ? IntPtr.Zero : gc.Handle, x1_, y1_, x2_, y2_);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_pixbuf(IntPtr raw, IntPtr gc, IntPtr pixbuf, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);

		public void DrawPixbuf(Gdk.GC gc, Gdk.Pixbuf pixbuf, int src_x, int src_y, int dest_x, int dest_y, int width, int height, Gdk.RgbDither dither, int x_dither, int y_dither) {
			gdk_draw_pixbuf(Handle, gc == null ? IntPtr.Zero : gc.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, src_x, src_y, dest_x, dest_y, width, height, (int) dither, x_dither, y_dither);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_point(IntPtr raw, IntPtr gc, int x, int y);

		public void DrawPoint(Gdk.GC gc, int x, int y) {
			gdk_draw_point(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_points(IntPtr raw, IntPtr gc, Gdk.Point[] points, int n_points);

		public void DrawPoints(Gdk.GC gc, Gdk.Point[] points) {
			gdk_draw_points(Handle, gc == null ? IntPtr.Zero : gc.Handle, points, (points == null ? 0 : points.Length));
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_rectangle(IntPtr raw, IntPtr gc, bool filled, int x, int y, int width, int height);

		public void DrawRectangle(Gdk.GC gc, bool filled, int x, int y, int width, int height) {
			gdk_draw_rectangle(Handle, gc == null ? IntPtr.Zero : gc.Handle, filled, x, y, width, height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_rgb_32_image(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] buf, int rowstride);

		public void DrawRgb32Image(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] buf, int rowstride) {
			gdk_draw_rgb_32_image(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, buf, rowstride);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_rgb_32_image_dithalign(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] buf, int rowstride, int xdith, int ydith);

		public void DrawRgb32ImageDithalign(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] buf, int rowstride, int xdith, int ydith) {
			gdk_draw_rgb_32_image_dithalign(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, buf, rowstride, xdith, ydith);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_rgb_image(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] rgb_buf, int rowstride);

		public void DrawRgbImage(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] rgb_buf, int rowstride) {
			gdk_draw_rgb_image(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, rgb_buf, rowstride);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_rgb_image_dithalign(IntPtr raw, IntPtr gc, int x, int y, int width, int height, int dith, byte[] rgb_buf, int rowstride, int xdith, int ydith);

		public void DrawRgbImageDithalign(Gdk.GC gc, int x, int y, int width, int height, Gdk.RgbDither dith, byte[] rgb_buf, int rowstride, int xdith, int ydith) {
			gdk_draw_rgb_image_dithalign(Handle, gc == null ? IntPtr.Zero : gc.Handle, x, y, width, height, (int) dith, rgb_buf, rowstride, xdith, ydith);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_segments(IntPtr raw, IntPtr gc, ref Gdk.Segment segs, int nsegs);

		public void DrawSegments(Gdk.GC gc, Gdk.Segment segs, int nsegs) {
			gdk_draw_segments(Handle, gc == null ? IntPtr.Zero : gc.Handle, ref segs, nsegs);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_string(IntPtr raw, ref Gdk.Font font, IntPtr gc, int x, int y, IntPtr str1ng);

		[Obsolete]
		public void DrawString(Gdk.Font font, Gdk.GC gc, int x, int y, string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			gdk_draw_string(Handle, ref font, gc == null ? IntPtr.Zero : gc.Handle, x, y, native_str1ng);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_text(IntPtr raw, ref Gdk.Font font, IntPtr gc, int x, int y, IntPtr text, int text_length);

		[Obsolete]
		public void DrawText(Gdk.Font font, Gdk.GC gc, int x, int y, string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gdk_draw_text(Handle, ref font, gc == null ? IntPtr.Zero : gc.Handle, x, y, native_text, System.Text.Encoding.UTF8.GetByteCount (text));
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_text_wc(IntPtr raw, ref Gdk.Font font, IntPtr gc, int x, int y, out uint text, int text_length);

		[Obsolete]
		public uint DrawTextWc(Gdk.Font font, Gdk.GC gc, int x, int y, int text_length) {
			uint text;
			gdk_draw_text_wc(Handle, ref font, gc == null ? IntPtr.Zero : gc.Handle, x, y, out text, text_length);
			return text;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_draw_trapezoids(IntPtr raw, IntPtr gc, ref Gdk.Trapezoid trapezoids, int n_trapezoids);

		public void DrawTrapezoids(Gdk.GC gc, Gdk.Trapezoid trapezoids, int n_trapezoids) {
			gdk_draw_trapezoids(Handle, gc == null ? IntPtr.Zero : gc.Handle, ref trapezoids, n_trapezoids);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_copy_to_image(IntPtr raw, IntPtr image, int src_x, int src_y, int dest_x, int dest_y, int width, int height);

		public Gdk.Image CopyToImage(Gdk.Image image, int src_x, int src_y, int dest_x, int dest_y, int width, int height) {
			IntPtr raw_ret = gdk_drawable_copy_to_image(Handle, image == null ? IntPtr.Zero : image.Handle, src_x, src_y, dest_x, dest_y, width, height);
			Gdk.Image ret = GLib.Object.GetObject(raw_ret) as Gdk.Image;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_clip_region(IntPtr raw);

		public Gdk.Region ClipRegion { 
			get {
				IntPtr raw_ret = gdk_drawable_get_clip_region(Handle);
				Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_colormap(IntPtr raw);

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drawable_set_colormap(IntPtr raw, IntPtr colormap);

		public Gdk.Colormap Colormap { 
			get {
				IntPtr raw_ret = gdk_drawable_get_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
			set {
				gdk_drawable_set_colormap(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_data(IntPtr raw, IntPtr key);

		[Obsolete]
		public IntPtr GetData(string key) {
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr raw_ret = gdk_drawable_get_data(Handle, native_key);
			IntPtr ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_drawable_get_depth(IntPtr raw);

		public int Depth { 
			get {
				int raw_ret = gdk_drawable_get_depth(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_display(IntPtr raw);

		public Gdk.Display Display { 
			get {
				IntPtr raw_ret = gdk_drawable_get_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_image(IntPtr raw, int x, int y, int width, int height);

		public Gdk.Image GetImage(int x, int y, int width, int height) {
			IntPtr raw_ret = gdk_drawable_get_image(Handle, x, y, width, height);
			Gdk.Image ret = GLib.Object.GetObject(raw_ret) as Gdk.Image;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gdk_drawable_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drawable_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			gdk_drawable_get_size(Handle, out width, out height);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_drawable_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_visible_region(IntPtr raw);

		public Gdk.Region VisibleRegion { 
			get {
				IntPtr raw_ret = gdk_drawable_get_visible_region(Handle);
				Gdk.Region ret = raw_ret == IntPtr.Zero ? null : (Gdk.Region) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Region), false);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_visual(IntPtr raw);

		public Gdk.Visual Visual { 
			get {
				IntPtr raw_ret = gdk_drawable_get_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_ref(IntPtr raw);

		[Obsolete]
		public Gdk.Drawable Ref() {
			IntPtr raw_ret = gdk_drawable_ref(Handle);
			Gdk.Drawable ret = GLib.Object.GetObject(raw_ret) as Gdk.Drawable;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drawable_set_data(IntPtr raw, IntPtr key, IntPtr data, IntPtr destroy_func);

		[Obsolete]
		public void SetData(string key, IntPtr data, IntPtr destroy_func) {
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gdk_drawable_set_data(Handle, native_key, data, destroy_func);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_drawable_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gdk_drawable_unref(Handle);
		}

#endregion
#region Customized extensions
#line 1 "Drawable.custom"
// Gdk.Drawble.custom - Gdk Drawble class customizations
//
// Author: Pedro Abelleira Seco <pedroabelleira@yahoo.es>
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


public void DrawRectangle(Gdk.GC gc, bool filled, Gdk.Rectangle area)
{
	gdk_draw_rectangle(Handle, gc.Handle, filled, area.X, area.Y, area.Width, area.Height);
}

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void gdk_draw_polygon(IntPtr raw, IntPtr gc, int filled, Gdk.Point[] points, int npoints);

[Obsolete]
public void DrawPolygon(Gdk.GC gc, int filled, Gdk.Point[] points)
{
	gdk_draw_polygon(Handle, gc.Handle, filled, points, points.Length);
}

public void DrawPolygon(Gdk.GC gc, bool filled, Gdk.Point[] points)
{
	gdk_draw_polygon(Handle, gc.Handle, filled ? 1 : 0, points, points.Length);
}

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void gdk_draw_lines(IntPtr raw, IntPtr gc, Gdk.Point[] points, int npoints);

public void DrawLines(Gdk.GC gc, Gdk.Point[] points)
{
	gdk_draw_lines(Handle, gc.Handle, points, points.Length);
}

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
internal static extern IntPtr gdk_x11_drawable_get_xdisplay (IntPtr raw);

[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
internal static extern IntPtr gdk_x11_drawable_get_xid (IntPtr raw);

#if MANLY_ENOUGH_TO_INCLUDE
	public virtual Cairo.Graphics CairoGraphics ()
	{
		Cairo.Graphics o = new Cairo.Graphics ();

		IntPtr display = gdk_x11_drawable_get_xdisplay (Handle);
		o.SetTargetDrawable (display, gdk_x11_drawable_get_xid (Handle));

		return o;
	}
#endif

#endregion
	}

	internal class DrawableAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_drawable_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_drawable_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
