// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_events_pending();

		public static bool EventsPending() {
			bool raw_ret = gdk_events_pending();
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_free_compound_text(out byte ctext);

		public static byte FreeCompoundText() {
			byte ctext;
			gdk_free_compound_text(out ctext);
			return ctext;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_default_root_window();

		public static Gdk.Window DefaultRootWindow { 
			get {
				IntPtr raw_ret = gdk_get_default_root_window();
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_display();

		public static string Display { 
			get {
				IntPtr raw_ret = gdk_get_display();
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_display_arg_name();

		public static string DisplayArgName { 
			get {
				IntPtr raw_ret = gdk_get_display_arg_name();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_program_class();

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_program_class(IntPtr program_class);

		public static string ProgramClass { 
			get {
				IntPtr raw_ret = gdk_get_program_class();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_set_program_class(native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_get_show_events();

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_show_events(bool show_events);

		public static bool ShowEvents { 
			get {
				bool raw_ret = gdk_get_show_events();
				bool ret = raw_ret;
				return ret;
			}
			set {
				gdk_set_show_events(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_get_use_xshm();

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_use_xshm(bool use_xshm);

		[Obsolete]
		public static bool UseXshm { 
			get {
				bool raw_ret = gdk_get_use_xshm();
				bool ret = raw_ret;
				return ret;
			}
			set {
				gdk_set_use_xshm(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pre_parse_libgtk_only();

		public static void PreParseLibgtkOnly() {
			gdk_pre_parse_libgtk_only();
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_double_click_time(uint msec);

		public static uint DoubleClickTime { 
			set {
				gdk_set_double_click_time(value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_set_locale();

		public static string SetLocale() {
			IntPtr raw_ret = gdk_set_locale();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_set_pointer_hooks(ref Gdk.PointerHooks new_hooks);

		public static Gdk.PointerHooks SetPointerHooks(Gdk.PointerHooks new_hooks) {
			IntPtr raw_ret = gdk_set_pointer_hooks(ref new_hooks);
			Gdk.PointerHooks ret = Gdk.PointerHooks.New (raw_ret);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_sm_client_id(IntPtr sm_client_id);

		public static string SmClientId { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_set_sm_client_id(native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_setting_get(IntPtr name, ref GLib.Value value);

		public static bool SettingGet(string name, GLib.Value value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gdk_setting_get(native_name, ref value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_string_extents(ref Gdk.Font font, IntPtr str1ng, out int lbearing, out int rbearing, out int width, out int ascent, out int descent);

		[Obsolete]
		public static void StringExtents(Gdk.Font font, string str1ng, out int lbearing, out int rbearing, out int width, out int ascent, out int descent) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			gdk_string_extents(ref font, native_str1ng, out lbearing, out rbearing, out width, out ascent, out descent);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_string_height(ref Gdk.Font font, IntPtr str1ng);

		[Obsolete]
		public static int StringHeight(Gdk.Font font, string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int raw_ret = gdk_string_height(ref font, native_str1ng);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_string_measure(ref Gdk.Font font, IntPtr str1ng);

		[Obsolete]
		public static int StringMeasure(Gdk.Font font, string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int raw_ret = gdk_string_measure(ref font, native_str1ng);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_string_width(ref Gdk.Font font, IntPtr str1ng);

		[Obsolete]
		public static int StringWidth(Gdk.Font font, string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int raw_ret = gdk_string_width(ref font, native_str1ng);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_unicode_to_keyval(uint wc);

		public static uint UnicodeToKeyval(uint wc) {
			uint raw_ret = gdk_unicode_to_keyval(wc);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_notify_startup_complete();

		public static void NotifyStartupComplete() {
			gdk_notify_startup_complete();
		}

#endregion
#region Customized extensions
#line 1 "Global.custom"
// Global.custom - customizations to Gdk.Global
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//          Boyd Timothy  <btimothy@novell.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_devices_list ();

		public static Device[] DevicesList ()
		{
			IntPtr raw_ret = gdk_devices_list ();
			if (raw_ret == IntPtr.Zero)
				return new Device [0];
			GLib.List list = new GLib.List(raw_ret);
			return GLib.Marshaller.ListToArray<Device> (list);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_list_visuals ();

		public static Visual[] ListVisuals ()
		{
			IntPtr raw_ret = gdk_list_visuals ();
			if (raw_ret == IntPtr.Zero)
				return new Visual [0];
			return GLib.Marshaller.ListPtrToArray<Visual> (raw_ret, typeof (GLib.List), true, false);
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_supported ();

		public static Gdk.Atom[] SupportedWindowManagerHints {
			get {
				IntPtr raw_ret = gtksharp_get_gdk_net_supported ();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Atom [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Atom> (raw_ret, typeof (GLib.List), true, false);
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_client_list (out int count);

		public static Gdk.Window[] WindowManagerClientWindows {
			get {
				int count;
				IntPtr raw_ret = gtksharp_get_gdk_net_client_list (out count);
				if (raw_ret == IntPtr.Zero)
					return Array.Empty<Gdk.Window> ();
				Gdk.Window [] windows = new Gdk.Window [count];
				int offset = 0;
				for (int i = 0; i < count; i++) {
					int windowID = Marshal.ReadInt32 (raw_ret, offset);
					offset += IntPtr.Size;
					windows [i] = Gdk.Window.ForeignNew ((uint) windowID);
				}
				GLib.Marshaller.Free (raw_ret);
				return windows;
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int gtksharp_get_gdk_net_number_of_desktops ();

		public static int NumberOfDesktops {
			get {
				return gtksharp_get_gdk_net_number_of_desktops ();
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int gtksharp_get_gdk_net_current_desktop ();

		public static int CurrentDesktop {
			get {
				return gtksharp_get_gdk_net_current_desktop ();
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern uint gtksharp_get_gdk_net_active_window ();

		public static Gdk.Window ActiveWindow {
			get {
				uint windowID = gtksharp_get_gdk_net_active_window ();
				if (windowID == 0)
					return Gdk.Global.DefaultRootWindow;
				Gdk.Window window = Gdk.Window.ForeignNew (windowID);
				return window;
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_workarea ();

		public static Gdk.Rectangle[] DesktopWorkareas {
			get {
				IntPtr raw_ret = gtksharp_get_gdk_net_workarea ();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Rectangle [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Rectangle> (raw_ret, typeof(GLib.List), true, false);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gdk_init_check(ref int argc, ref IntPtr argv);

		public static bool InitCheck (ref string[] argv)
		{
			GLib.Argv a = new GLib.Argv (argv, true);
			IntPtr buf = a.Handle;
			int argc = argv.Length + 1;

			bool result = gdk_init_check (ref argc, ref buf);
			argv = a.GetArgs (argc);
			return result;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_parse_args(ref int argc, ref IntPtr argv);

		public static void ParseArgs (ref string[] argv)
		{
			GLib.Argv a = new GLib.Argv (argv, true);
			IntPtr buf = a.Handle;
			int argc = argv.Length + 1;

			gdk_parse_args (ref argc, ref buf);
			argv = a.GetArgs (argc);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_query_depths (out IntPtr depths, out int n_depths);

		public static int[] QueryDepths ()
		{
			IntPtr ptr;
			int count;
			gdk_query_depths (out ptr, out count);
			int[] result = new int [count];
			Marshal.Copy (ptr, result, 0, count);
			return result;
		}
		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_query_visual_types (out IntPtr types, out int n_types);

		public static VisualType[] QueryVisualTypes ()
		{
			IntPtr ptr;
			int count;
			gdk_query_visual_types (out ptr, out count);
			int[] tmp = new int [count];
			Marshal.Copy (ptr, tmp, 0, count);
			VisualType[] result = new VisualType [count];
			for (int i = 0; i < count; i++)
				result [i] = (VisualType) tmp [i];
			return result;
		}

		public static void AddClientMessageFilter (Gdk.Atom message_type, Gdk.FilterFunc func)
		{
			Gdk.Display.Default.AddClientMessageFilter (message_type, func);
		}


#endregion
	}
}
