// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TabArray]
	public class TabArray : GLib.Opaque {

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_tab_array_copy(IntPtr raw);

		public Pango.TabArray Copy() {
			IntPtr raw_ret = pango_tab_array_copy(Handle);
			Pango.TabArray ret = raw_ret == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.TabArray), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_tab_array_get_positions_in_pixels(IntPtr raw);

		public bool PositionsInPixels { 
			get {
				bool raw_ret = pango_tab_array_get_positions_in_pixels(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_tab_array_get_size(IntPtr raw);

		public int Size { 
			get {
				int raw_ret = pango_tab_array_get_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_tab_array_get_tab(IntPtr raw, int tab_index, out int alignment, out int location);

		public void GetTab(int tab_index, out Pango.TabAlign alignment, out int location) {
			int native_alignment;
			pango_tab_array_get_tab(Handle, tab_index, out native_alignment, out location);
			alignment = (Pango.TabAlign) native_alignment;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_tab_array_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_tab_array_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_tab_array_resize(IntPtr raw, int new_size);

		public void Resize(int new_size) {
			pango_tab_array_resize(Handle, new_size);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_tab_array_set_tab(IntPtr raw, int tab_index, int alignment, int location);

		public void SetTab(int tab_index, Pango.TabAlign alignment, int location) {
			pango_tab_array_set_tab(Handle, tab_index, (int) alignment, location);
		}

		public TabArray(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_tab_array_new(int initial_size, bool positions_in_pixels);

		public TabArray (int initial_size, bool positions_in_pixels) 
		{
			Raw = pango_tab_array_new(initial_size, positions_in_pixels);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_tab_array_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			pango_tab_array_free (raw);
		}

		[Obsolete("Pango.TabArray is now freed automatically")]
		public void Free () {}

#endregion
#region Customized extensions
#line 1 "TabArray.custom"
// Pango.TabArray.custom - Pango TabArray class customizations
//
// Author: Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_free (IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void pango_tab_array_get_tabs (IntPtr raw, out IntPtr alignments, out IntPtr locations);

		public void GetTabs (out TabAlign[] alignments, out int[] locations) 
		{
			int sz = Size;
			IntPtr align_ptr, loc_ptr;
			alignments = new TabAlign [sz];
			locations = new int [sz];
			int[] tmp = new int [sz];
			if (sz == 0)
				return;
			pango_tab_array_get_tabs (Handle, out align_ptr, out loc_ptr);
			Marshal.Copy (loc_ptr, locations, 0, sz);
			Marshal.Copy (align_ptr, tmp, 0, sz);
			for (int i = 0; i < sz; i++)
				alignments [i] = (TabAlign) tmp [i];
			g_free (align_ptr);
			g_free (loc_ptr);
		}


#endregion
	}

	internal class TabArrayAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_tab_array_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_tab_array_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
