// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[Matrix]
	public struct Matrix {

		public double Xx;
		public double Xy;
		public double Yx;
		public double Yy;
		public double X0;
		public double Y0;

		public static Pango.Matrix Zero = new Pango.Matrix ();

		public static Pango.Matrix New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Pango.Matrix.Zero;
			unsafe { return *(Pango.Matrix*)raw; }
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_concat(ref Pango.Matrix raw, ref Pango.Matrix new_matrix);

		public void Concat(Pango.Matrix new_matrix) {
			pango_matrix_concat(ref this, ref new_matrix);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double pango_matrix_get_font_scale_factor(ref Pango.Matrix raw);

		public double FontScaleFactor { 
			get {
				double raw_ret = pango_matrix_get_font_scale_factor(ref this);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_matrix_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_matrix_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_rotate(ref Pango.Matrix raw, double degrees);

		public void Rotate(double degrees) {
			pango_matrix_rotate(ref this, degrees);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_scale(ref Pango.Matrix raw, double scale_x, double scale_y);

		public void Scale(double scale_x, double scale_y) {
			pango_matrix_scale(ref this, scale_x, scale_y);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_transform_distance(ref Pango.Matrix raw, ref double dx, ref double dy);

		public void TransformDistance(ref double dx, ref double dy) {
			pango_matrix_transform_distance(ref this, ref dx, ref dy);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_transform_pixel_rectangle(ref Pango.Matrix raw, ref Pango.Rectangle rect);

		public void TransformPixelRectangle(ref Pango.Rectangle rect) {
			pango_matrix_transform_pixel_rectangle(ref this, ref rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_transform_point(ref Pango.Matrix raw, ref double x, ref double y);

		public void TransformPoint(ref double x, ref double y) {
			pango_matrix_transform_point(ref this, ref x, ref y);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_transform_rectangle(ref Pango.Matrix raw, ref Pango.Rectangle rect);

		public void TransformRectangle(ref Pango.Rectangle rect) {
			pango_matrix_transform_rectangle(ref this, ref rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_matrix_translate(ref Pango.Matrix raw, double tx, double ty);

		public void Translate(double tx, double ty) {
			pango_matrix_translate(ref this, tx, ty);
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Pango.Matrix boxed);

		public static explicit operator GLib.Value (Pango.Matrix boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (MatrixAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Pango.Matrix (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}

		[Obsolete("This is a no-op")]
		public Pango.Matrix Copy() {
			return this;
		}
#endregion
#region Customized extensions
#line 1 "Matrix.custom"
// Pango.Matrix.custom - Pango Matrix class customizations
//
// Authors: John Luke <john.luke@gmail.com>
//
// Copyright (c) 2005 John Luke.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

	static Matrix ()
	{
		Identity.Xx = 1.0;
		Identity.Xy = 0.0;
		Identity.Yx = 0.0;
		Identity.Yy = 1.0;
		Identity.X0 = 0.0;
		Identity.Y0 = 0.0;
	}

	public static Matrix Identity;


#endregion
	}

	internal class MatrixAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_matrix_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_matrix_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
