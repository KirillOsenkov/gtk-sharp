// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_extents_to_pixels(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public static void ExtentsToPixels(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect) {
			pango_extents_to_pixels(ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_find_base_dir(IntPtr text, int length);

		public static Pango.Direction FindBaseDir(string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			int raw_ret = pango_find_base_dir(native_text, System.Text.Encoding.UTF8.GetByteCount (text));
			Pango.Direction ret = (Pango.Direction) raw_ret;
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_find_paragraph_boundary(IntPtr text, int length, out int paragraph_delimiter_index, out int next_paragraph_start);

		public static void FindParagraphBoundary(string text, out int paragraph_delimiter_index, out int next_paragraph_start) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			pango_find_paragraph_boundary(native_text, System.Text.Encoding.UTF8.GetByteCount (text), out paragraph_delimiter_index, out next_paragraph_start);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_get_log_attrs(IntPtr text, int length, int level, IntPtr language, ref Pango.LogAttr log_attrs, int attrs_len);

		public static void GetLogAttrs(string text, int level, Pango.Language language, Pango.LogAttr log_attrs, int attrs_len) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			pango_get_log_attrs(native_text, System.Text.Encoding.UTF8.GetByteCount (text), level, language == null ? IntPtr.Zero : language.Handle, ref log_attrs, attrs_len);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_gravity_get_for_matrix(ref Pango.Matrix matrix);

		public static Pango.Gravity GravityGetForMatrix(Pango.Matrix matrix) {
			int raw_ret = pango_gravity_get_for_matrix(ref matrix);
			Pango.Gravity ret = (Pango.Gravity) raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_gravity_get_for_script(int script, int base_gravity, int hint);

		public static Pango.Gravity GravityGetForScript(Pango.Script script, Pango.Gravity base_gravity, Pango.GravityHint hint) {
			int raw_ret = pango_gravity_get_for_script((int) script, (int) base_gravity, (int) hint);
			Pango.Gravity ret = (Pango.Gravity) raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double pango_gravity_to_rotation(int gravity);

		public static double GravityToRotation(Pango.Gravity gravity) {
			double raw_ret = pango_gravity_to_rotation((int) gravity);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_is_zero_width(uint ch);

		public static bool IsZeroWidth(char ch) {
			bool raw_ret = pango_is_zero_width(GLib.Marshaller.CharToGUnichar (ch));
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_itemize_with_base_dir(IntPtr context, int base_dir, IntPtr text, int start_index, int length, IntPtr attrs, IntPtr cached_iter);

		public static GLib.List ItemizeWithBaseDir(Pango.Context context, Pango.Direction base_dir, string text, int start_index, int length, Pango.AttrList attrs, Pango.AttrIterator cached_iter) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr raw_ret = pango_itemize_with_base_dir(context == null ? IntPtr.Zero : context.Handle, (int) base_dir, native_text, start_index, length, attrs == null ? IntPtr.Zero : attrs.Handle, cached_iter == null ? IntPtr.Zero : cached_iter.Handle);
			GLib.List ret = new GLib.List(raw_ret);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_parse_enum(IntPtr type, IntPtr str, out int value, bool warn, out IntPtr possible_values);

		public static bool ParseEnum(GLib.GType type, string str, out int value, bool warn, out string possible_values) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			IntPtr native_possible_values;
			bool raw_ret = pango_parse_enum(type.Val, native_str, out value, warn, out native_possible_values);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			possible_values = GLib.Marshaller.PtrToStringGFree(native_possible_values);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_parse_stretch(IntPtr str, out int stretch, bool warn);

		public static bool ParseStretch(string str, out Pango.Stretch stretch, bool warn) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			int native_stretch;
			bool raw_ret = pango_parse_stretch(native_str, out native_stretch, warn);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			stretch = (Pango.Stretch) native_stretch;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_parse_style(IntPtr str, out int style, bool warn);

		public static bool ParseStyle(string str, out Pango.Style style, bool warn) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			int native_style;
			bool raw_ret = pango_parse_style(native_str, out native_style, warn);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			style = (Pango.Style) native_style;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_parse_variant(IntPtr str, out int variant, bool warn);

		public static bool ParseVariant(string str, out Pango.Variant variant, bool warn) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			int native_variant;
			bool raw_ret = pango_parse_variant(native_str, out native_variant, warn);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			variant = (Pango.Variant) native_variant;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_parse_weight(IntPtr str, out int weight, bool warn);

		public static bool ParseWeight(string str, out Pango.Weight weight, bool warn) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			int native_weight;
			bool raw_ret = pango_parse_weight(native_str, out native_weight, warn);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			weight = (Pango.Weight) native_weight;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_quantize_line_geometry(out int thickness, out int position);

		public static void QuantizeLineGeometry(out int thickness, out int position) {
			pango_quantize_line_geometry(out thickness, out position);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_scan_int(ref IntPtr pos, out int out_param);

		public static bool ScanInt(ref string pos, out int out_param) {
			IntPtr native_pos = GLib.Marshaller.StringToPtrGStrdup (pos);
			bool raw_ret = pango_scan_int(ref native_pos, out out_param);
			bool ret = raw_ret;
			pos = GLib.Marshaller.Utf8PtrToString (native_pos);
			GLib.Marshaller.Free (native_pos);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_script_for_unichar(uint ch);

		public static Pango.Script ScriptForUnichar(char ch) {
			int raw_ret = pango_script_for_unichar(GLib.Marshaller.CharToGUnichar (ch));
			Pango.Script ret = (Pango.Script) raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_script_get_sample_language(int script);

		public static Pango.Language ScriptGetSampleLanguage(Pango.Script script) {
			IntPtr raw_ret = pango_script_get_sample_language((int) script);
			Pango.Language ret = raw_ret == IntPtr.Zero ? null : (Pango.Language) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Language), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_skip_space(ref IntPtr pos);

		public static bool SkipSpace(ref string pos) {
			IntPtr native_pos = GLib.Marshaller.StringToPtrGStrdup (pos);
			bool raw_ret = pango_skip_space(ref native_pos);
			bool ret = raw_ret;
			pos = GLib.Marshaller.Utf8PtrToString (native_pos);
			GLib.Marshaller.Free (native_pos);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_split_file_list(IntPtr str);

		public static string[] SplitFileListArray(string str) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			IntPtr raw_ret = pango_split_file_list(native_str);
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
			GLib.Marshaller.Free (native_str);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_trim_string(IntPtr str);

		public static string TrimString(string str) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			IntPtr raw_ret = pango_trim_string(native_str);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_str);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_unichar_direction(uint ch);

		public static Pango.Direction UnicharDirection(char ch) {
			int raw_ret = pango_unichar_direction(GLib.Marshaller.CharToGUnichar (ch));
			Pango.Direction ret = (Pango.Direction) raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_version_check(int required_major, int required_minor, int required_micro);

		public static string VersionCheck(int required_major, int required_minor, int required_micro) {
			IntPtr raw_ret = pango_version_check(required_major, required_minor, required_micro);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_version_string();

		public static string VersionString() {
			IntPtr raw_ret = pango_version_string();
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Global.custom"
// Pango.Global.custom - Pango Global class customizations
//
// Authors:  Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool pango_scan_int(IntPtr pos, out int out_param);

		[Obsolete]
		public static bool ScanInt(string pos, out int out_param) {
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (pos);
			bool raw_ret = pango_scan_int(native, out out_param);
			GLib.Marshaller.Free (native);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool pango_parse_markup (IntPtr markup, int length, uint accel_marker, out IntPtr attr_list_handle, out IntPtr text, out uint accel_char, IntPtr err);

		public static bool ParseMarkup (string markup, char accel_marker, out Pango.AttrList attrs, out string text, out char accel_char)
		{
			uint ucs4_accel_char;
			IntPtr text_as_native;
			IntPtr attrs_handle;
			IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
			bool result = pango_parse_markup (native_markup, -1, GLib.Marshaller.CharToGUnichar (accel_marker), out attrs_handle, out text_as_native, out ucs4_accel_char, IntPtr.Zero);
			GLib.Marshaller.Free (native_markup);
			accel_char = GLib.Marshaller.GUnicharToChar (ucs4_accel_char);
			text = GLib.Marshaller.Utf8PtrToString (text_as_native);
			attrs = new Pango.AttrList (attrs_handle);
			return result;
		}

		[Obsolete ("Use SplitFileListArray")]
		public static string SplitFileList (string str)
		{
			var res = SplitFileListArray (str);
			if (res.Length > 0)
				return res [0];
			return null;
		}



#endregion
	}
}
