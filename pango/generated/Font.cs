// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Font]
	public class Font : GLib.Object {

		[Obsolete]
		protected Font(GLib.GType gtype) : base(gtype) {}
		public Font(IntPtr raw) : base(raw) {}

		protected Font() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_describe(IntPtr raw);

		public Pango.FontDescription Describe() {
			IntPtr raw_ret = pango_font_describe(Handle);
			Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_describe_with_absolute_size(IntPtr raw);

		public Pango.FontDescription DescribeWithAbsoluteSize() {
			IntPtr raw_ret = pango_font_describe_with_absolute_size(Handle);
			Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_find_shaper(IntPtr raw, IntPtr language, uint ch);

		public Pango.EngineShape FindShaper(Pango.Language language, uint ch) {
			IntPtr raw_ret = pango_font_find_shaper(Handle, language == null ? IntPtr.Zero : language.Handle, ch);
			Pango.EngineShape ret = raw_ret == IntPtr.Zero ? null : (Pango.EngineShape) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.EngineShape), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_get_coverage(IntPtr raw, IntPtr language);

		public Pango.Coverage GetCoverage(Pango.Language language) {
			IntPtr raw_ret = pango_font_get_coverage(Handle, language == null ? IntPtr.Zero : language.Handle);
			Pango.Coverage ret = raw_ret == IntPtr.Zero ? null : (Pango.Coverage) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Coverage), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_get_font_map(IntPtr raw);

		public Pango.FontMap FontMap { 
			get {
				IntPtr raw_ret = pango_font_get_font_map(Handle);
				Pango.FontMap ret = GLib.Object.GetObject(raw_ret) as Pango.FontMap;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_font_get_glyph_extents(IntPtr raw, uint glyph, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void GetGlyphExtents(uint glyph, Pango.Rectangle ink_rect, Pango.Rectangle logical_rect) {
			pango_font_get_glyph_extents(Handle, glyph, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_get_metrics(IntPtr raw, IntPtr language);

		public Pango.FontMetrics GetMetrics(Pango.Language language) {
			IntPtr raw_ret = pango_font_get_metrics(Handle, language == null ? IntPtr.Zero : language.Handle);
			Pango.FontMetrics ret = raw_ret == IntPtr.Zero ? null : (Pango.FontMetrics) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontMetrics), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_font_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class FontAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_font_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
