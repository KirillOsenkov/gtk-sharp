// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[Color]
	public struct Color {

		public ushort Red;
		public ushort Green;
		public ushort Blue;

		public static Pango.Color Zero = new Pango.Color ();

		public static Pango.Color New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Pango.Color.Zero;
			unsafe { return *(Pango.Color*)raw; }
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_color_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_color_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_color_parse(ref Pango.Color raw, IntPtr spec);

		public bool Parse(string spec) {
			IntPtr native_spec = GLib.Marshaller.StringToPtrGStrdup (spec);
			bool raw_ret = pango_color_parse(ref this, native_spec);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_spec);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_color_to_string(ref Pango.Color raw);

		public override string ToString() {
			IntPtr raw_ret = pango_color_to_string(ref this);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Pango.Color boxed);

		public static explicit operator GLib.Value (Pango.Color boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (ColorAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Pango.Color (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}

		[Obsolete("This is a no-op")]
		public Pango.Color Copy() {
			return this;
		}
#endregion
	}

	internal class ColorAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_color_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_color_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
