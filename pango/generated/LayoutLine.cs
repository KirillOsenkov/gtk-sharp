// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[LayoutLine]
	public class LayoutLine : GLib.Opaque {

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_layoutline_get_layout_offset ();

		static uint layout_offset = pangosharp_pango_layoutline_get_layout_offset ();
		public Pango.Layout Layout {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + layout_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Pango.Layout;
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_layoutline_get_start_index_offset ();

		static uint start_index_offset = pangosharp_pango_layoutline_get_start_index_offset ();
		public int StartIndex {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + start_index_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_layoutline_get_length_offset ();

		static uint length_offset = pangosharp_pango_layoutline_get_length_offset ();
		public int Length {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_layoutline_get_is_paragraph_start (IntPtr raw);
		public bool IsParagraphStart {
			get {
				bool result = pangosharp_pango_layoutline_get_is_paragraph_start (Handle);
				return result;
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_layoutline_get_resolved_dir (IntPtr raw);
		public uint ResolvedDir {
			get {
				uint result = pangosharp_pango_layoutline_get_resolved_dir (Handle);
				return result;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_get_extents(IntPtr raw, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void GetExtents(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect) {
			pango_layout_line_get_extents(Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_get_pixel_extents(IntPtr raw, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void GetPixelExtents(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect) {
			pango_layout_line_get_pixel_extents(Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_line_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_layout_line_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_index_to_x(IntPtr raw, int index_, bool trailing, out int x_pos);

		public int IndexToX(int index_, bool trailing) {
			int x_pos;
			pango_layout_line_index_to_x(Handle, index_, trailing, out x_pos);
			return x_pos;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_line_x_to_index(IntPtr raw, int x_pos, out int index_, out int trailing);

		public bool XToIndex(int x_pos, out int index_, out int trailing) {
			bool raw_ret = pango_layout_line_x_to_index(Handle, x_pos, out index_, out trailing);
			bool ret = raw_ret;
			return ret;
		}

		public LayoutLine(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_line_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				pango_layout_line_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Pango.LayoutLine is now refcounted automatically")]
		public LayoutLine Ref () { return this; }

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				pango_layout_line_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Pango.LayoutLine is now refcounted automatically")]
		public void Unref () {}

#endregion
#region Customized extensions
#line 1 "LayoutLine.custom"
// Pango.LayoutLine.custom - Pango LayoutLine class customizations
//
// Authors: Jeroen Zwartepoorte <jeroen@xs4all.nl
//	    Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

#if NOT_BROKEN
[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void pango_layout_line_get_x_ranges(IntPtr raw, int start_index, int end_index, out IntPtr ranges_handle, out int n_ranges);
#endif

public void GetXRanges(int start_index, int end_index, out int[][] ranges) 
{
	// FIXME: this is broken
	throw new NotImplementedException ();
#if NOT_BROKEN
	int count;
	IntPtr array_ptr;
	pango_layout_line_get_x_ranges(Handle, start_index, end_index, out array_ptr, out count);
	ranges = new int[count] [];
	for (int i = 0; i < count; i++) {
		IntPtr tmp = new IntPtr (array_ptr + 2 * i * IntPtr.Size);
		IntPtr rng_ptr = Marshal.ReadIntPtr (tmp);
		IntPtr end_ptr = Marshal.ReadIntPtr (tmp, IntPtr.Size);
		
	}
	Marshal.Copy (array_ptr, ranges, 0, count);
	g_free (array_ptr);
#endif
}


#endregion
	}

	internal class LayoutLineAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_line_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_layout_line_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
