// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Layout]
	public class Layout : GLib.Object {

		[Obsolete]
		protected Layout(GLib.GType gtype) : base(gtype) {}
		public Layout(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_new(IntPtr context);

		public Layout (Pango.Context context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Layout)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = pango_layout_new(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_context_changed(IntPtr raw);

		public void ContextChanged() {
			pango_layout_context_changed(Handle);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_copy(IntPtr raw);

		public Pango.Layout Copy() {
			IntPtr raw_ret = pango_layout_copy(Handle);
			Pango.Layout ret = GLib.Object.GetObject(raw_ret, true) as Pango.Layout;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_alignment(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_alignment(IntPtr raw, int alignment);

		public Pango.Alignment Alignment { 
			get {
				int raw_ret = pango_layout_get_alignment(Handle);
				Pango.Alignment ret = (Pango.Alignment) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_alignment(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_attributes(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_attributes(IntPtr raw, IntPtr attrs);

		public Pango.AttrList Attributes { 
			get {
				IntPtr raw_ret = pango_layout_get_attributes(Handle);
				Pango.AttrList ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrList) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrList), false);
				return ret;
			}
			set {
				pango_layout_set_attributes(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_auto_dir(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_auto_dir(IntPtr raw, bool auto_dir);

		public bool AutoDir { 
			get {
				bool raw_ret = pango_layout_get_auto_dir(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_auto_dir(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_context(IntPtr raw);

		public Pango.Context Context { 
			get {
				IntPtr raw_ret = pango_layout_get_context(Handle);
				Pango.Context ret = GLib.Object.GetObject(raw_ret) as Pango.Context;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_cursor_pos(IntPtr raw, int index_, ref Pango.Rectangle strong_pos, ref Pango.Rectangle weak_pos);

		public void GetCursorPos(int index_, out Pango.Rectangle strong_pos, out Pango.Rectangle weak_pos) {
			strong_pos = new Pango.Rectangle();
			weak_pos = new Pango.Rectangle();
			pango_layout_get_cursor_pos(Handle, index_, ref strong_pos, ref weak_pos);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_ellipsize(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_ellipsize(IntPtr raw, int ellipsize);

		public Pango.EllipsizeMode Ellipsize { 
			get {
				int raw_ret = pango_layout_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_ellipsize(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_extents(IntPtr raw, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void GetExtents(out Pango.Rectangle ink_rect, out Pango.Rectangle logical_rect) {
			ink_rect = new Pango.Rectangle();
			logical_rect = new Pango.Rectangle();
			pango_layout_get_extents(Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_font_description(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_font_description(IntPtr raw, IntPtr desc);

		public Pango.FontDescription FontDescription { 
			get {
				IntPtr raw_ret = pango_layout_get_font_description(Handle);
				Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), false);
				return ret;
			}
			set {
				pango_layout_set_font_description(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_indent(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_indent(IntPtr raw, int indent);

		public int Indent { 
			get {
				int raw_ret = pango_layout_get_indent(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_indent(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_iter(IntPtr raw);

		public Pango.LayoutIter Iter { 
			get {
				IntPtr raw_ret = pango_layout_get_iter(Handle);
				Pango.LayoutIter ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutIter), true);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_justify(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_justify(IntPtr raw, bool justify);

		public bool Justify { 
			get {
				bool raw_ret = pango_layout_get_justify(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_justify(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_line(IntPtr raw, int line);

		public Pango.LayoutLine GetLine(int line) {
			IntPtr raw_ret = pango_layout_get_line(Handle, line);
			Pango.LayoutLine ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutLine) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutLine), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_line_count(IntPtr raw);

		public int LineCount { 
			get {
				int raw_ret = pango_layout_get_line_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_line_readonly(IntPtr raw, int line);

		public Pango.LayoutLine GetLineReadonly(int line) {
			IntPtr raw_ret = pango_layout_get_line_readonly(Handle, line);
			Pango.LayoutLine ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutLine) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutLine), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_lines_readonly(IntPtr raw);

		public Pango.LayoutLine[] LinesReadOnly { 
			get {
				IntPtr raw_ret = pango_layout_get_lines_readonly(Handle);
				Pango.LayoutLine[] ret = GLib.Marshaller.ListPtrToArray<Pango.LayoutLine> (raw_ret, typeof(GLib.SList), false, false);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_pixel_extents(IntPtr raw, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void GetPixelExtents(out Pango.Rectangle ink_rect, out Pango.Rectangle logical_rect) {
			ink_rect = new Pango.Rectangle();
			logical_rect = new Pango.Rectangle();
			pango_layout_get_pixel_extents(Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_pixel_size(IntPtr raw, out int width, out int height);

		public void GetPixelSize(out int width, out int height) {
			pango_layout_get_pixel_size(Handle, out width, out height);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_single_paragraph_mode(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_single_paragraph_mode(IntPtr raw, bool setting);

		public bool SingleParagraphMode { 
			get {
				bool raw_ret = pango_layout_get_single_paragraph_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_single_paragraph_mode(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			pango_layout_get_size(Handle, out width, out height);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_spacing(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_spacing(IntPtr raw, int spacing);

		public int Spacing { 
			get {
				int raw_ret = pango_layout_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_spacing(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_tabs(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_tabs(IntPtr raw, IntPtr tabs);

		public Pango.TabArray Tabs { 
			get {
				IntPtr raw_ret = pango_layout_get_tabs(Handle);
				Pango.TabArray ret = raw_ret == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.TabArray), true);
				return ret;
			}
			set {
				pango_layout_set_tabs(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_text(IntPtr raw);

		public string Text { 
			get {
				IntPtr raw_ret = pango_layout_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_layout_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_unknown_glyphs_count(IntPtr raw);

		public int UnknownGlyphsCount { 
			get {
				int raw_ret = pango_layout_get_unknown_glyphs_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_width(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_width(IntPtr raw, int width);

		public int Width { 
			get {
				int raw_ret = pango_layout_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_width(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_wrap(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_wrap(IntPtr raw, int wrap);

		public Pango.WrapMode Wrap { 
			get {
				int raw_ret = pango_layout_get_wrap(Handle);
				Pango.WrapMode ret = (Pango.WrapMode) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_wrap(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_index_to_line_x(IntPtr raw, int index_, bool trailing, out int line, out int x_pos);

		public void IndexToLineX(int index_, bool trailing, out int line, out int x_pos) {
			pango_layout_index_to_line_x(Handle, index_, trailing, out line, out x_pos);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_index_to_pos(IntPtr raw, int index_, ref Pango.Rectangle pos);

		public Pango.Rectangle IndexToPos(int index_) {
			Pango.Rectangle pos;
			pos = new Pango.Rectangle();
			pango_layout_index_to_pos(Handle, index_, ref pos);
			return pos;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_is_ellipsized(IntPtr raw);

		public bool IsEllipsized { 
			get {
				bool raw_ret = pango_layout_is_ellipsized(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_is_wrapped(IntPtr raw);

		public bool IsWrapped { 
			get {
				bool raw_ret = pango_layout_is_wrapped(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_move_cursor_visually(IntPtr raw, bool strong, int old_index, int old_trailing, int direction, out int new_index, out int new_trailing);

		public void MoveCursorVisually(bool strong, int old_index, int old_trailing, int direction, out int new_index, out int new_trailing) {
			pango_layout_move_cursor_visually(Handle, strong, old_index, old_trailing, direction, out new_index, out new_trailing);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_xy_to_index(IntPtr raw, int x, int y, out int index_, out int trailing);

		public bool XyToIndex(int x, int y, out int index_, out int trailing) {
			bool raw_ret = pango_layout_xy_to_index(Handle, x, y, out index_, out trailing);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Layout.custom"
// Pango.Layout.custom - Pango Layout class customizations
//
// Authors: Pedro Abelleira Seco <pedroabelleira@yahoo.es>
//          Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr pango_layout_get_lines(IntPtr raw);

public LayoutLine[] Lines {
	get {
		IntPtr list_ptr = pango_layout_get_lines(Handle);
		if (list_ptr == IntPtr.Zero)
			return new LayoutLine [0];
		GLib.SList list = new GLib.SList(list_ptr, typeof (IntPtr));
		LayoutLine[] result = new LayoutLine [list.Count];
		int i = 0;
		foreach (IntPtr item in list)
			result[i++] = new LayoutLine (item);
		return result;
	}
}

[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void pango_layout_set_markup_with_accel (IntPtr raw, IntPtr markup, int length, uint accel_marker, out uint accel_char);

public void SetMarkupWithAccel (string markup, char accel_marker, out char accel_char)
{
	uint ucs4_accel_char;
	IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
	pango_layout_set_markup_with_accel (Handle, native_markup, -1, GLib.Marshaller.CharToGUnichar (accel_marker), out ucs4_accel_char);
	GLib.Marshaller.Free (native_markup);
	accel_char = GLib.Marshaller.GUnicharToChar (ucs4_accel_char);
}

		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_free (IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void pango_layout_get_log_attrs (IntPtr raw, out IntPtr attrs, out int n_attrs);

		public LogAttr [] LogAttrs {
			get {
				int count;
				IntPtr array_ptr;
				pango_layout_get_log_attrs (Handle, out array_ptr, out count);
				if (array_ptr == IntPtr.Zero)
					return new LogAttr [0];
				LogAttr [] result = new LogAttr [count];
				for (int i = 0; i < count; i++) {
					IntPtr fam_ptr = Marshal.ReadIntPtr (array_ptr, i * IntPtr.Size);
					result [i] = LogAttr.New (fam_ptr);
				}

				g_free (array_ptr);
				return result;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void pango_layout_set_text (IntPtr raw, IntPtr text, int length);

		public void SetText (string text) 
		{
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			pango_layout_set_text (Handle, native_text, -1);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void pango_layout_set_markup (IntPtr raw, IntPtr markup, int length);

		public void SetMarkup (string markup) 
		{
			IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
			pango_layout_set_markup (Handle, native_markup, -1);
			GLib.Marshaller.Free (native_markup);
		}

#endregion
	}

	internal class LayoutAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_layout_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
