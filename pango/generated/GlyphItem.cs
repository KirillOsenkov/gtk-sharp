// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[GLib.GTypeStruct]
	public struct GlyphItem {

		private IntPtr _item;
		public Pango.Item Item {
			get {
				return _item == IntPtr.Zero ? null : (Pango.Item) GLib.Opaque.GetOpaque (_item, typeof (Pango.Item), false);
			}
			set {
				_item = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _glyphs;
		public Pango.GlyphString Glyphs {
			get {
				return _glyphs == IntPtr.Zero ? null : (Pango.GlyphString) GLib.Opaque.GetOpaque (_glyphs, typeof (Pango.GlyphString), false);
			}
			set {
				_glyphs = value == null ? IntPtr.Zero : value.Handle;
			}
		}

		public static Pango.GlyphItem Zero = new Pango.GlyphItem ();

		public static Pango.GlyphItem New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Pango.GlyphItem.Zero;
			unsafe { return *(Pango.GlyphItem*)raw; }
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_item_free(ref Pango.GlyphItem raw);

		public void Free() {
			pango_glyph_item_free(ref this);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_item_letter_space(ref Pango.GlyphItem raw, IntPtr text, ref Pango.LogAttr log_attrs, int letter_spacing);

		public void LetterSpace(string text, Pango.LogAttr log_attrs, int letter_spacing) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			pango_glyph_item_letter_space(ref this, native_text, ref log_attrs, letter_spacing);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_item_split(ref Pango.GlyphItem raw, IntPtr text, int split_index);

		public Pango.GlyphItem Split(string text, int split_index) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr raw_ret = pango_glyph_item_split(ref this, native_text, split_index);
			Pango.GlyphItem ret = Pango.GlyphItem.New (raw_ret);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "GlyphItem.custom"
// Pango.GlyphItem.custom - Pango GlyphItem class customizations
//
// Author: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004-2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_item_apply_attrs(ref Pango.GlyphItem raw, IntPtr text, IntPtr list);

		[DllImport("libpango-1.0-0.dll", EntryPoint="pango_glyph_item_free", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_item_free_ptr (IntPtr raw);

		public GlyphItem[] ApplyAttrs (string text, Pango.AttrList list)
		{
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr list_handle = pango_glyph_item_apply_attrs (ref this, native_text, list.Handle);
			GLib.Marshaller.Free (native_text);
			if (list_handle == IntPtr.Zero)
				return new GlyphItem [0];
			return GLib.Marshaller.ListPtrToArray<GlyphItem> (list_handle, typeof (GLib.SList), true, true, pango_glyph_item_free_ptr);
		}

		[Obsolete ("Replaced by Glyphs property")]
		public Pango.GlyphString glyphs {
			get { return Glyphs; }
		}

		[Obsolete ("Replaced by Item property")]
		public Pango.Item item {
			get { return Item; }
		}

#endregion
	}
}
