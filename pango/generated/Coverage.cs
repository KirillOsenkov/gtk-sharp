// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.GTypeOpaque]
	public class Coverage : GLib.Opaque {

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_coverage_copy(IntPtr raw);

		public Pango.Coverage Copy() {
			IntPtr raw_ret = pango_coverage_copy(Handle);
			Pango.Coverage ret = raw_ret == IntPtr.Zero ? null : (Pango.Coverage) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Coverage), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_coverage_from_bytes(out byte bytes, int n_bytes);

		public static Pango.Coverage FromBytes(out byte bytes, int n_bytes) {
			IntPtr raw_ret = pango_coverage_from_bytes(out bytes, n_bytes);
			Pango.Coverage ret = raw_ret == IntPtr.Zero ? null : (Pango.Coverage) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Coverage), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_coverage_get(IntPtr raw, int index_);

		public Pango.CoverageLevel Get(int index_) {
			int raw_ret = pango_coverage_get(Handle, index_);
			Pango.CoverageLevel ret = (Pango.CoverageLevel) raw_ret;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_coverage_max(IntPtr raw, IntPtr other);

		public void Max(Pango.Coverage other) {
			pango_coverage_max(Handle, other == null ? IntPtr.Zero : other.Handle);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_coverage_set(IntPtr raw, int index_, int level);

		public void Set(int index_, Pango.CoverageLevel level) {
			pango_coverage_set(Handle, index_, (int) level);
		}

		public Coverage(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_coverage_new();

		public Coverage () 
		{
			Raw = pango_coverage_new();
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_coverage_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				pango_coverage_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Pango.Coverage is now refcounted automatically")]
		public Coverage Ref () { return this; }

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_coverage_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				pango_coverage_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Pango.Coverage is now refcounted automatically")]
		public void Unref () {}

#endregion
#region Customized extensions
#line 1 "Coverage.custom"
// Pango.Coverage.custom - Pango Coverage class customizations
//
// Author: Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_free (IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void pango_coverage_to_bytes (IntPtr raw, out IntPtr bytes, out int n_bytes);

		public void ToBytes(out byte[] bytes) 
		{
			int count;
			IntPtr array_ptr;
			pango_coverage_to_bytes (Handle, out array_ptr, out count);
			bytes = new byte [count];
			Marshal.Copy (array_ptr, bytes, 0, count);
			g_free (array_ptr);
		}


#endregion
	}
}
