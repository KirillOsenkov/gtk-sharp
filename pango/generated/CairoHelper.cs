// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class CairoHelper {

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double pango_cairo_context_get_resolution(IntPtr context);

		public static double ContextGetResolution(Pango.Context context) {
			double raw_ret = pango_cairo_context_get_resolution(context == null ? IntPtr.Zero : context.Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_context_set_resolution(IntPtr context, double dpi);

		public static void ContextSetResolution(Pango.Context context, double dpi) {
			pango_cairo_context_set_resolution(context == null ? IntPtr.Zero : context.Handle, dpi);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_cairo_create_layout(IntPtr cr);

		public static Pango.Layout CreateLayout(Cairo.Context cr) {
			IntPtr raw_ret = pango_cairo_create_layout(cr == null ? IntPtr.Zero : cr.Handle);
			Pango.Layout ret = GLib.Object.GetObject(raw_ret, true) as Pango.Layout;
			return ret;
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_error_underline_path(IntPtr cr, double x, double y, double width, double height);

		public static void ErrorUnderlinePath(Cairo.Context cr, double x, double y, double width, double height) {
			pango_cairo_error_underline_path(cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_glyph_string_path(IntPtr cr, IntPtr font, IntPtr glyphs);

		public static void GlyphStringPath(Cairo.Context cr, Pango.Font font, Pango.GlyphString glyphs) {
			pango_cairo_glyph_string_path(cr == null ? IntPtr.Zero : cr.Handle, font == null ? IntPtr.Zero : font.Handle, glyphs == null ? IntPtr.Zero : glyphs.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_layout_line_path(IntPtr cr, IntPtr line);

		public static void LayoutLinePath(Cairo.Context cr, Pango.LayoutLine line) {
			pango_cairo_layout_line_path(cr == null ? IntPtr.Zero : cr.Handle, line == null ? IntPtr.Zero : line.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_layout_path(IntPtr cr, IntPtr layout);

		public static void LayoutPath(Cairo.Context cr, Pango.Layout layout) {
			pango_cairo_layout_path(cr == null ? IntPtr.Zero : cr.Handle, layout == null ? IntPtr.Zero : layout.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_show_error_underline(IntPtr cr, double x, double y, double width, double height);

		public static void ShowErrorUnderline(Cairo.Context cr, double x, double y, double width, double height) {
			pango_cairo_show_error_underline(cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_show_glyph_string(IntPtr cr, IntPtr font, IntPtr glyphs);

		public static void ShowGlyphString(Cairo.Context cr, Pango.Font font, Pango.GlyphString glyphs) {
			pango_cairo_show_glyph_string(cr == null ? IntPtr.Zero : cr.Handle, font == null ? IntPtr.Zero : font.Handle, glyphs == null ? IntPtr.Zero : glyphs.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_show_layout(IntPtr cr, IntPtr layout);

		public static void ShowLayout(Cairo.Context cr, Pango.Layout layout) {
			pango_cairo_show_layout(cr == null ? IntPtr.Zero : cr.Handle, layout == null ? IntPtr.Zero : layout.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_show_layout_line(IntPtr cr, IntPtr line);

		public static void ShowLayoutLine(Cairo.Context cr, Pango.LayoutLine line) {
			pango_cairo_show_layout_line(cr == null ? IntPtr.Zero : cr.Handle, line == null ? IntPtr.Zero : line.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_update_context(IntPtr cr, IntPtr context);

		public static void UpdateContext(Cairo.Context cr, Pango.Context context) {
			pango_cairo_update_context(cr == null ? IntPtr.Zero : cr.Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_update_layout(IntPtr cr, IntPtr layout);

		public static void UpdateLayout(Cairo.Context cr, Pango.Layout layout) {
			pango_cairo_update_layout(cr == null ? IntPtr.Zero : cr.Handle, layout == null ? IntPtr.Zero : layout.Handle);
		}

#endregion
#region Customized extensions
#line 1 "CairoHelper.custom"
// Pango.CairoHelper.custom - Pango Cairo Helper class customizations
//
// Authors:  Marius Ungureanu <maungu@microsoft.com>
//
// Copyright (c) 2017 Microsoft, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport ("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern PangoSharp.CairoShapeRendererFuncNative pango_cairo_context_get_shape_renderer (IntPtr context, IntPtr data);

		const string renderer_key = "ContextGetShapeRenderer";
		public static Pango.CairoShapeRendererFunc ContextGetShapeRenderer (Pango.Context context, IntPtr data)
		{
			Pango.CairoShapeRendererFunc toRet = null;
			var lastHandler = context.Data [renderer_key];
			if (lastHandler != null)
				((WeakReference<Pango.CairoShapeRendererFunc>)lastHandler).TryGetTarget (out toRet);
			
			PangoSharp.CairoShapeRendererFuncNative raw_ret = pango_cairo_context_get_shape_renderer (context == null ? IntPtr.Zero : context.Handle, data);
			if (raw_ret == PangoSharp.CairoShapeRendererFuncWrapper.NativeDelegate)
				return toRet;

			if (raw_ret == null)
				return null;

			Pango.CairoShapeRendererFunc ret = new PangoSharp.CairoShapeRendererFuncInvoker (raw_ret).Handler;
			return ret;
		}

		[DllImport ("libpangocairo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_cairo_context_set_shape_renderer (IntPtr context, PangoSharp.CairoShapeRendererFuncNative func, IntPtr data, GLib.DestroyNotify dnotify);

		public static void ContextSetShapeRenderer (Pango.Context context, Pango.CairoShapeRendererFunc func)
		{
			IntPtr data;
			GLib.DestroyNotify dnotify;

			if (func == null) {
				data = IntPtr.Zero;
				dnotify = null;
				context.Data.Remove (renderer_key);
			} else {
				data = (IntPtr)GCHandle.Alloc (func);
				dnotify = GLib.DestroyHelper.NotifyHandler;
				context.Data [renderer_key] = func;
			}
			pango_cairo_context_set_shape_renderer (context == null ? IntPtr.Zero : context.Handle, PangoSharp.CairoShapeRendererFuncWrapper.NativeDelegate, data, dnotify);
		}

#endregion
	}
}
