// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Item]
	public class Item : GLib.Opaque {

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_item_get_offset_offset ();

		static uint offset_offset = pangosharp_pango_item_get_offset_offset ();
		public int Offset {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + offset_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + offset_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_item_get_length_offset ();

		static uint length_offset = pangosharp_pango_item_get_length_offset ();
		public int Length {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_item_get_num_chars_offset ();

		static uint num_chars_offset = pangosharp_pango_item_get_num_chars_offset ();
		public int NumChars {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_chars_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_chars_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_item_get_analysis_offset ();

		static uint analysis_offset = pangosharp_pango_item_get_analysis_offset ();
		public Pango.Analysis Analysis {
			get {
				unsafe {
					Pango.Analysis* raw_ptr = (Pango.Analysis*)(((byte*)Handle) + analysis_offset);
					return *raw_ptr;
				}
			}
			set {
				unsafe {
					Pango.Analysis* raw_ptr = (Pango.Analysis*)(((byte*)Handle) + analysis_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_copy(IntPtr raw);

		public Pango.Item Copy() {
			IntPtr raw_ret = pango_item_copy(Handle);
			Pango.Item ret = raw_ret == IntPtr.Zero ? null : (Pango.Item) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Item), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_item_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_split(IntPtr raw, int split_index, int split_offset);

		public Pango.Item Split(int split_index, int split_offset) {
			IntPtr raw_ret = pango_item_split(Handle, split_index, split_offset);
			Pango.Item ret = raw_ret == IntPtr.Zero ? null : (Pango.Item) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Item), false);
			return ret;
		}

		public Item(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_new();

		public Item () 
		{
			Raw = pango_item_new();
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_item_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			pango_item_free (raw);
		}

#endregion
#region Customized extensions
#line 1 "Item.custom"
// Pango.Item.custom - Pango Item class customizations
//
// Copyright (c) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[Obsolete("Pango.Item is a reference type now, use null")]
		public static Item Zero = null;

		[Obsolete("Replaced by Item(IntPtr) constructor")]
		public static Item New (IntPtr raw)
		{
			return new Item (raw);
		}

		[Obsolete("Replaced by Item() constructor")]
		public static Item New ()
		{
			return new Item ();
		}

#endregion
	}

	internal class ItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
