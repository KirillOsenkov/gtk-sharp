// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GlyphString]
	public class GlyphString : GLib.Opaque {

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint pangosharp_pango_glyphstring_get_num_glyphs_offset ();

		static uint num_glyphs_offset = pangosharp_pango_glyphstring_get_num_glyphs_offset ();
		public int NumGlyphs {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_glyphs_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_glyphs_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_string_copy(IntPtr raw);

		public Pango.GlyphString Copy() {
			IntPtr raw_ret = pango_glyph_string_copy(Handle);
			Pango.GlyphString ret = raw_ret == IntPtr.Zero ? null : (Pango.GlyphString) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.GlyphString), true);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_extents(IntPtr raw, IntPtr font, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void Extents(Pango.Font font, Pango.Rectangle ink_rect, Pango.Rectangle logical_rect) {
			pango_glyph_string_extents(Handle, font == null ? IntPtr.Zero : font.Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_extents_range(IntPtr raw, int start, int end, IntPtr font, ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect);

		public void ExtentsRange(int start, int end, Pango.Font font, Pango.Rectangle ink_rect, Pango.Rectangle logical_rect) {
			pango_glyph_string_extents_range(Handle, start, end, font == null ? IntPtr.Zero : font.Handle, ref ink_rect, ref logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_get_logical_widths(IntPtr raw, IntPtr text, int length, int embedding_level, out int logical_widths);

		public int GetLogicalWidths(string text, int embedding_level) {
			int logical_widths;
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			pango_glyph_string_get_logical_widths(Handle, native_text, System.Text.Encoding.UTF8.GetByteCount (text), embedding_level, out logical_widths);
			GLib.Marshaller.Free (native_text);
			return logical_widths;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_string_get_type();

		static GLib.GType _gtype = new GLib.GType (pango_glyph_string_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_glyph_string_get_width(IntPtr raw);

		public int Width { 
			get {
				int raw_ret = pango_glyph_string_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_index_to_x(IntPtr raw, IntPtr text, int length, ref Pango.Analysis analysis, int index_, bool trailing, out int x_pos);

		public int IndexToX(string text, Pango.Analysis analysis, int index_, bool trailing) {
			int x_pos;
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup(text);
			pango_glyph_string_index_to_x(Handle, native_text, System.Text.Encoding.UTF8.GetByteCount (text), ref analysis, index_, trailing, out x_pos);
			GLib.Marshaller.Free (native_text);
			return x_pos;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_set_size(IntPtr raw, int new_len);

		public int Size { 
			set {
				pango_glyph_string_set_size(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_x_to_index(IntPtr raw, IntPtr text, int length, ref Pango.Analysis analysis, int x_pos, out int index_, out int trailing);

		public void XToIndex(string text, Pango.Analysis analysis, int x_pos, out int index_, out int trailing) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup(text);
			pango_glyph_string_x_to_index(Handle, native_text, System.Text.Encoding.UTF8.GetByteCount (text), ref analysis, x_pos, out index_, out trailing);
			GLib.Marshaller.Free (native_text);
		}

		public GlyphString(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_string_new();

		public GlyphString () 
		{
			Raw = pango_glyph_string_new();
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_glyph_string_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			pango_glyph_string_free (raw);
		}

#endregion
#region Customized extensions
#line 1 "GlyphString.custom"
// Pango.GlyphString.custom - Pango GlyphString class customizations
//
// Copyright (c) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[Obsolete("Pango.GlyphString is a reference type now, use null")]
		public static GlyphString Zero = null;

		[Obsolete("Replaced by GlyphString(IntPtr) constructor")]
		public static GlyphString New (IntPtr raw)
		{
			return new GlyphString (raw);
		}

		[Obsolete("Replaced by GlyphString() constructor")]
		public static GlyphString New ()
		{
			return new GlyphString ();
		}

#endregion
	}

	internal class GlyphStringAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_glyph_string_get_type ();

		private static GLib.GType _gtype = new GLib.GType (pango_glyph_string_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
