// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[GLib.GTypeStruct]
	public struct LogAttr {

		private uint _bitfield0;

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_line_break (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_line_break (ref Pango.LogAttr raw, bool value);
		public bool IsLineBreak {
			get {
				bool result = pangosharp_pango_logattr_get_is_line_break (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_line_break (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_mandatory_break (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_mandatory_break (ref Pango.LogAttr raw, bool value);
		public bool IsMandatoryBreak {
			get {
				bool result = pangosharp_pango_logattr_get_is_mandatory_break (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_mandatory_break (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_char_break (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_char_break (ref Pango.LogAttr raw, bool value);
		public bool IsCharBreak {
			get {
				bool result = pangosharp_pango_logattr_get_is_char_break (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_char_break (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_white (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_white (ref Pango.LogAttr raw, bool value);
		public bool IsWhite {
			get {
				bool result = pangosharp_pango_logattr_get_is_white (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_white (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_cursor_position (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_cursor_position (ref Pango.LogAttr raw, bool value);
		public bool IsCursorPosition {
			get {
				bool result = pangosharp_pango_logattr_get_is_cursor_position (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_cursor_position (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_word_start (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_word_start (ref Pango.LogAttr raw, bool value);
		public bool IsWordStart {
			get {
				bool result = pangosharp_pango_logattr_get_is_word_start (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_word_start (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_word_end (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_word_end (ref Pango.LogAttr raw, bool value);
		public bool IsWordEnd {
			get {
				bool result = pangosharp_pango_logattr_get_is_word_end (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_word_end (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_sentence_boundary (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_sentence_boundary (ref Pango.LogAttr raw, bool value);
		public bool IsSentenceBoundary {
			get {
				bool result = pangosharp_pango_logattr_get_is_sentence_boundary (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_sentence_boundary (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_sentence_start (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_sentence_start (ref Pango.LogAttr raw, bool value);
		public bool IsSentenceStart {
			get {
				bool result = pangosharp_pango_logattr_get_is_sentence_start (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_sentence_start (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_sentence_end (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_sentence_end (ref Pango.LogAttr raw, bool value);
		public bool IsSentenceEnd {
			get {
				bool result = pangosharp_pango_logattr_get_is_sentence_end (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_sentence_end (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_backspace_deletes_character (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_backspace_deletes_character (ref Pango.LogAttr raw, bool value);
		public bool BackspaceDeletesCharacter {
			get {
				bool result = pangosharp_pango_logattr_get_backspace_deletes_character (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_backspace_deletes_character (ref this, value);
			}
		}

		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool pangosharp_pango_logattr_get_is_expandable_space (ref Pango.LogAttr raw);
		[DllImport ("pangosharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void pangosharp_pango_logattr_set_is_expandable_space (ref Pango.LogAttr raw, bool value);
		public bool IsExpandableSpace {
			get {
				bool result = pangosharp_pango_logattr_get_is_expandable_space (ref this);
				return result;
			}
			set {
				pangosharp_pango_logattr_set_is_expandable_space (ref this, value);
			}
		}


		public static Pango.LogAttr Zero = new Pango.LogAttr ();

		public static Pango.LogAttr New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Pango.LogAttr.Zero;
			unsafe { return *(Pango.LogAttr*)raw; }
		}

#endregion
	}
}
