// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[Requisition]
	public struct Requisition {

		public int Width;
		public int Height;

		public static Gtk.Requisition Zero = new Gtk.Requisition ();

		public static Gtk.Requisition New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.Requisition.Zero;
			unsafe { return *(Gtk.Requisition*)raw; }
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_requisition_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_requisition_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Gtk.Requisition boxed);

		public static explicit operator GLib.Value (Gtk.Requisition boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (RequisitionAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Gtk.Requisition (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}

		[Obsolete("This is a no-op")]
		public Gtk.Requisition Copy() {
			return this;
		}
#endregion
	}

	internal class RequisitionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_requisition_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_requisition_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
