// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Table]
	public class Table : Gtk.Container {

		[Obsolete]
		protected Table(GLib.GType gtype) : base(gtype) {}
		public Table(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_table_new(uint rows, uint columns, bool homogeneous);

		public Table (uint rows, uint columns, bool homogeneous) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Table)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[3];
					var names = stackalloc IntPtr[3];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("n_rows");
					vals[0] = new GLib.Value (rows);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("n_columns");
					vals[1] = new GLib.Value (columns);
					names[2] = GLib.Marshaller.StringToPtrGStrdup ("homogeneous");
					vals[2] = new GLib.Value (homogeneous);
					CreateNativeObject (names, vals, 3);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_table_new(rows, columns, homogeneous);
		}

		[GLib.Property ("n-rows")]
		public uint NRows {
			get {
				using (GLib.Value val = GetProperty ("n-rows")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("n-rows", val);
				}
			}
		}

		[GLib.Property ("n-columns")]
		public uint NColumns {
			get {
				using (GLib.Value val = GetProperty ("n-columns")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("n-columns", val);
				}
			}
		}

		[GLib.Property ("row-spacing")]
		public uint RowSpacing {
			get {
				using (GLib.Value val = GetProperty ("row-spacing")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("row-spacing", val);
				}
			}
		}

		[GLib.Property ("column-spacing")]
		public uint ColumnSpacing {
			get {
				using (GLib.Value val = GetProperty ("column-spacing")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("column-spacing", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_table_get_homogeneous(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_set_homogeneous(IntPtr raw, bool homogeneous);

		[GLib.Property ("homogeneous")]
		public bool Homogeneous {
			get  {
				bool raw_ret = gtk_table_get_homogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_table_set_homogeneous(Handle, value);
			}
		}

		public class TableChild : Gtk.Container.ContainerChild {
			protected internal TableChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("left-attach")]
			public uint LeftAttach {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "left-attach")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "left-attach", val);
					}
				}
			}

			[Gtk.ChildProperty ("right-attach")]
			public uint RightAttach {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "right-attach")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "right-attach", val);
					}
				}
			}

			[Gtk.ChildProperty ("top-attach")]
			public uint TopAttach {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "top-attach")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "top-attach", val);
					}
				}
			}

			[Gtk.ChildProperty ("bottom-attach")]
			public uint BottomAttach {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "bottom-attach")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "bottom-attach", val);
					}
				}
			}

			[Gtk.ChildProperty ("x-options")]
			public Gtk.AttachOptions XOptions {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "x-options")) {
						Gtk.AttachOptions ret = (Gtk.AttachOptions) (Enum) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value((Enum) value)) {
						parent.ChildSetProperty(child, "x-options", val);
					}
				}
			}

			[Gtk.ChildProperty ("y-options")]
			public Gtk.AttachOptions YOptions {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "y-options")) {
						Gtk.AttachOptions ret = (Gtk.AttachOptions) (Enum) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value((Enum) value)) {
						parent.ChildSetProperty(child, "y-options", val);
					}
				}
			}

			[Gtk.ChildProperty ("x-padding")]
			public uint XPadding {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "x-padding")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "x-padding", val);
					}
				}
			}

			[Gtk.ChildProperty ("y-padding")]
			public uint YPadding {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "y-padding")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "y-padding", val);
					}
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new TableChild (this, child);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_attach(IntPtr raw, IntPtr child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, int xoptions, int yoptions, uint xpadding, uint ypadding);

		public void Attach(Gtk.Widget child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, Gtk.AttachOptions xoptions, Gtk.AttachOptions yoptions, uint xpadding, uint ypadding) {
			Gtk.Application.AssertMainThread();
			gtk_table_attach(Handle, child == null ? IntPtr.Zero : child.Handle, left_attach, right_attach, top_attach, bottom_attach, (int) xoptions, (int) yoptions, xpadding, ypadding);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_attach_defaults(IntPtr raw, IntPtr widget, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach);

		public void Attach(Gtk.Widget widget, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach) {
			Gtk.Application.AssertMainThread();
			gtk_table_attach_defaults(Handle, widget == null ? IntPtr.Zero : widget.Handle, left_attach, right_attach, top_attach, bottom_attach);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_table_get_col_spacing(IntPtr raw, uint column);

		public uint GetColSpacing(uint column) {
			Gtk.Application.AssertMainThread();
			uint raw_ret = gtk_table_get_col_spacing(Handle, column);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_table_get_default_col_spacing(IntPtr raw);

		public uint DefaultColSpacing { 
			get {
				uint raw_ret = gtk_table_get_default_col_spacing(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_table_get_default_row_spacing(IntPtr raw);

		public uint DefaultRowSpacing { 
			get {
				uint raw_ret = gtk_table_get_default_row_spacing(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_table_get_row_spacing(IntPtr raw, uint row);

		public uint GetRowSpacing(uint row) {
			Gtk.Application.AssertMainThread();
			uint raw_ret = gtk_table_get_row_spacing(Handle, row);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_table_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_table_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_resize(IntPtr raw, uint rows, uint columns);

		public void Resize(uint rows, uint columns) {
			Gtk.Application.AssertMainThread();
			gtk_table_resize(Handle, rows, columns);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_set_col_spacing(IntPtr raw, uint column, uint spacing);

		public void SetColSpacing(uint column, uint spacing) {
			Gtk.Application.AssertMainThread();
			gtk_table_set_col_spacing(Handle, column, spacing);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_table_set_row_spacing(IntPtr raw, uint row, uint spacing);

		public void SetRowSpacing(uint row, uint spacing) {
			Gtk.Application.AssertMainThread();
			gtk_table_set_row_spacing(Handle, row, spacing);
		}

#endregion
#region Customized extensions
#line 1 "Table.custom"
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

/* FIXME: Uncomment this when the default ctor flag is added to the XML
public Table()
{
	owned = true;
	Raw = gtk_table_new (0, 0, false);
}
*/

#endregion
	}

	internal class TableAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_table_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_table_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
