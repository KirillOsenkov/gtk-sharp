// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	[FileSelection]
	public class FileSelection : Gtk.Dialog {

		[Obsolete]
		protected FileSelection(GLib.GType gtype) : base(gtype) {}
		public FileSelection(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_selection_new(IntPtr title);

		public FileSelection (string title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileSelection)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("title");
					vals[0] = new GLib.Value (title);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			owned = true;
			Raw = gtk_file_selection_new(native_title);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_selection_get_filename(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_selection_get_filename_utf8(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_set_filename(IntPtr raw, IntPtr filename);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_set_filename_utf8(IntPtr raw, IntPtr filename);

		[GLib.Property ("filename")]
		public string Filename {
			get  {
				IntPtr raw_ret;
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					raw_ret = gtk_file_selection_get_filename_utf8(Handle);
				else
					raw_ret = gtk_file_selection_get_filename(Handle);
				string ret = GLib.Marshaller.FilenamePtrToString (raw_ret);

				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToFilenamePtr (value);
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					gtk_file_selection_set_filename_utf8(Handle, native_value);
				else
					gtk_file_selection_set_filename(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("show-fileops")]
		public bool ShowFileops {
			get {
				using (GLib.Value val = GetProperty ("show-fileops")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("show-fileops", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_file_selection_get_select_multiple(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_set_select_multiple(IntPtr raw, bool select_multiple);

		[GLib.Property ("select-multiple")]
		public bool SelectMultiple {
			get  {
				bool raw_ret = gtk_file_selection_get_select_multiple(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_file_selection_set_select_multiple(Handle, value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_dir_list_offset ();

		static uint dir_list_offset = gtksharp_gtk_fileselection_get_dir_list_offset ();
		public Gtk.TreeView DirList {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + dir_list_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.TreeView;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_file_list_offset ();

		static uint file_list_offset = gtksharp_gtk_fileselection_get_file_list_offset ();
		public Gtk.TreeView FileList {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + file_list_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.TreeView;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_selection_entry_offset ();

		static uint selection_entry_offset = gtksharp_gtk_fileselection_get_selection_entry_offset ();
		public Gtk.Entry SelectionEntry {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + selection_entry_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Entry;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_selection_text_offset ();

		static uint selection_text_offset = gtksharp_gtk_fileselection_get_selection_text_offset ();
		public Gtk.Label SelectionText {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + selection_text_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Label;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_main_vbox_offset ();

		static uint main_vbox_offset = gtksharp_gtk_fileselection_get_main_vbox_offset ();
		public Gtk.VBox MainVBox {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + main_vbox_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.VBox;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_ok_button_offset ();

		static uint ok_button_offset = gtksharp_gtk_fileselection_get_ok_button_offset ();
		public Gtk.Button OkButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + ok_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_cancel_button_offset ();

		static uint cancel_button_offset = gtksharp_gtk_fileselection_get_cancel_button_offset ();
		public Gtk.Button CancelButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + cancel_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_help_button_offset ();

		static uint help_button_offset = gtksharp_gtk_fileselection_get_help_button_offset ();
		public Gtk.Button HelpButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + help_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_history_pulldown_offset ();

		static uint history_pulldown_offset = gtksharp_gtk_fileselection_get_history_pulldown_offset ();
		public Gtk.OptionMenu HistoryPulldown {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + history_pulldown_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.OptionMenu;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_history_menu_offset ();

		static uint history_menu_offset = gtksharp_gtk_fileselection_get_history_menu_offset ();
		public Gtk.Menu HistoryMenu {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + history_menu_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Menu;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_dialog_offset ();

		static uint fileop_dialog_offset = gtksharp_gtk_fileselection_get_fileop_dialog_offset ();
		public Gtk.MessageDialog FileopDialog {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_dialog_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.MessageDialog;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_entry_offset ();

		static uint fileop_entry_offset = gtksharp_gtk_fileselection_get_fileop_entry_offset ();
		public Gtk.Entry FileopEntry {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_entry_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Entry;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_file_offset ();

		static uint fileop_file_offset = gtksharp_gtk_fileselection_get_fileop_file_offset ();
		public string FileopFile {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_file_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_c_dir_offset ();

		static uint fileop_c_dir_offset = gtksharp_gtk_fileselection_get_fileop_c_dir_offset ();
		public Gtk.Button FileopCDir {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_c_dir_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_del_file_offset ();

		static uint fileop_del_file_offset = gtksharp_gtk_fileselection_get_fileop_del_file_offset ();
		public Gtk.Button FileopDelFile {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_del_file_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_fileop_ren_file_offset ();

		static uint fileop_ren_file_offset = gtksharp_gtk_fileselection_get_fileop_ren_file_offset ();
		public Gtk.Button FileopRenFile {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + fileop_ren_file_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_button_area_offset ();

		static uint button_area_offset = gtksharp_gtk_fileselection_get_button_area_offset ();
		public Gtk.HButtonBox ButtonArea {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + button_area_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.HButtonBox;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fileselection_get_action_area_offset ();

		static uint action_area_offset = gtksharp_gtk_fileselection_get_action_area_offset ();
		public new Gtk.HButtonBox ActionArea {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + action_area_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.HButtonBox;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_complete(IntPtr raw, IntPtr pattern);

		public void Complete(string pattern) {
			Gtk.Application.AssertMainThread();
			IntPtr native_pattern = GLib.Marshaller.StringToPtrGStrdup (pattern);
			gtk_file_selection_complete(Handle, native_pattern);
			GLib.Marshaller.Free (native_pattern);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_selection_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_file_selection_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_hide_fileop_buttons(IntPtr raw);

		public void HideFileopButtons() {
			gtk_file_selection_hide_fileop_buttons(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_file_selection_show_fileop_buttons(IntPtr raw);

		public void ShowFileopButtons() {
			gtk_file_selection_show_fileop_buttons(Handle);
		}

#endregion
#region Customized extensions
#line 1 "FileSelection.custom"
//
// Gtk.FileSelection.custom - Gtk FileSelection class customizations
//
// Author: Duncan Mak  (duncan@ximian.com)
//         Joe Shaw  (joe@ximian.com)
//
// Copyright (C) 2002 Ximian, Inc. 
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
public class FSButton : Gtk.Button {
	FileSelection file_sel;

	public  FileSelection FileSelection {
		get { return file_sel; }
	}

        internal FSButton (FileSelection fs, IntPtr raw) : base (raw) {
		file_sel = fs;
	}
}
	
[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_file_selection_get_selections (IntPtr handle);

[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_file_selection_get_selections_utf8 (IntPtr handle);

[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void g_strfreev (IntPtr handle);

public string[] Selections {
	get {
		IntPtr strv;

		switch (Environment.OSVersion.Platform) {
		case PlatformID.Win32NT:
		case PlatformID.Win32S:
		case PlatformID.Win32Windows:
		case PlatformID.WinCE:
			strv = gtk_file_selection_get_selections_utf8 (Handle);
			break;
		default:
			strv = gtk_file_selection_get_selections (Handle);
			break;
		}

		var result = new System.Collections.Generic.List<string> ();

		int i = 0;
		IntPtr strptr = Marshal.ReadIntPtr (strv, IntPtr.Size * i++); 
		while (strptr != IntPtr.Zero) {
			result.Add (GLib.Marshaller.FilenamePtrToString (strptr));
			strptr = Marshal.ReadIntPtr (strv, IntPtr.Size * i++);
		}
		
		g_strfreev (strv);

		return result.ToArray ();
	}
}


#endregion
	}

	internal class FileSelectionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_selection_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_file_selection_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
