// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[AccelLabel]
	public class AccelLabel : Gtk.Label {

		[Obsolete]
		protected AccelLabel(GLib.GType gtype) : base(gtype) {}
		public AccelLabel(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_new(IntPtr str1ng);

		public AccelLabel (string str1ng) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AccelLabel)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[0] = new GLib.Value (str1ng);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			owned = true;
			Raw = gtk_accel_label_new(native_str1ng);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_label_set_accel_closure(IntPtr raw, IntPtr accel_closure);

		[GLib.Property ("accel-closure")]
		public IntPtr AccelClosure {
			get {
				using (GLib.Value val = GetProperty ("accel-closure")) {
					IntPtr ret = (IntPtr) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_accel_label_set_accel_closure(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_get_accel_widget(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_label_set_accel_widget(IntPtr raw, IntPtr accel_widget);

		[GLib.Property ("accel-widget")]
		public Gtk.Widget AccelWidget {
			get  {
				IntPtr raw_ret = gtk_accel_label_get_accel_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_accel_label_set_accel_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_accel_label_get_accel_width(IntPtr raw);

		public uint AccelWidth { 
			get {
				uint raw_ret = gtk_accel_label_get_accel_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_accel_label_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_label_refetch(IntPtr raw);

		public bool Refetch() {
			bool raw_ret = gtk_accel_label_refetch(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}

	internal class AccelLabelAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_label_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_accel_label_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
