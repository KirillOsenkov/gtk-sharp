// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Adjustment]
	public class Adjustment : Gtk.Object {

		[Obsolete]
		protected Adjustment(GLib.GType gtype) : base(gtype) {}
		public Adjustment(IntPtr raw) : base(raw) {}

		protected Adjustment() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_adjustment_get_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_adjustment_set_value(IntPtr raw, double value);

		[GLib.Property ("value")]
		public double Value {
			get  {
				double raw_ret = gtk_adjustment_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_adjustment_set_value(Handle, value);
			}
		}

		[GLib.Property ("lower")]
		public double Lower {
			get {
				using (GLib.Value val = GetProperty ("lower")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("lower", val);
				}
			}
		}

		[GLib.Property ("upper")]
		public double Upper {
			get {
				using (GLib.Value val = GetProperty ("upper")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("upper", val);
				}
			}
		}

		[GLib.Property ("step-increment")]
		public double StepIncrement {
			get {
				using (GLib.Value val = GetProperty ("step-increment")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("step-increment", val);
				}
			}
		}

		[GLib.Property ("page-increment")]
		public double PageIncrement {
			get {
				using (GLib.Value val = GetProperty ("page-increment")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("page-increment", val);
				}
			}
		}

		[GLib.Property ("page-size")]
		public double PageSize {
			get {
				using (GLib.Value val = GetProperty ("page-size")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("page-size", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr adjustment);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_adjustment_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr adjustment)
		{
			try {
				Adjustment adjustment_managed = GLib.Object.GetObject (adjustment, false) as Adjustment;
				adjustment_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_adjustment_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_adjustment_base_changed (IntPtr adjustment);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Adjustment), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_adjustment_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ValueChangedVMDelegate (IntPtr adjustment);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_adjustment_override_value_changed (IntPtr gtype, ValueChangedVMDelegate cb);

		static ValueChangedVMDelegate ValueChangedVMCallback;

		static void valuechanged_cb (IntPtr adjustment)
		{
			try {
				Adjustment adjustment_managed = GLib.Object.GetObject (adjustment, false) as Adjustment;
				adjustment_managed.OnValueChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideValueChanged (GLib.GType gtype)
		{
			if (ValueChangedVMCallback == null)
				ValueChangedVMCallback = new ValueChangedVMDelegate (valuechanged_cb);
			gtksharp_adjustment_override_value_changed (gtype.Val, ValueChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_adjustment_base_value_changed (IntPtr adjustment);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Adjustment), ConnectionMethod="OverrideValueChanged")]
		protected virtual void OnValueChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_adjustment_base_value_changed (Handle);
		}

		[GLib.Signal("value_changed")]
		public event System.EventHandler ValueChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_adjustment_changed(IntPtr raw);

		public void Change() {
			gtk_adjustment_changed(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_adjustment_clamp_page(IntPtr raw, double lower, double upper);

		public void ClampPage(double lower, double upper) {
			Gtk.Application.AssertMainThread();
			gtk_adjustment_clamp_page(Handle, lower, upper);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_adjustment_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_adjustment_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_adjustment_value_changed(IntPtr raw);

		public void ChangeValue() {
			gtk_adjustment_value_changed(Handle);
		}

#endregion
#region Customized extensions
#line 1 "Adjustment.custom"
//
// Gtk.Adjustment.custom - Allow customization of values in the GtkAdjustment
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
//

[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);

public Adjustment (double value, double lower, double upper, double step_increment, double page_increment, double page_size) : base (IntPtr.Zero)
{
	if (GetType () != typeof (Adjustment)) {
		CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		Value = value;
		Lower = lower;
		Upper = upper;
		StepIncrement = step_increment;
		PageIncrement = page_increment;
		PageSize = page_size;
		return;
	}

	owned = true;
	Raw = gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern void gtksharp_gtk_adjustment_set_bounds (IntPtr i, double lower, double upper, double step_increment, double page_increment, double page_size);

public void SetBounds (double lower, double upper, double step_increment, double page_increment, double page_size)
{
	gtksharp_gtk_adjustment_set_bounds (this.Handle, lower, upper, step_increment, page_increment, page_size);
}


#endregion
	}

	internal class AdjustmentAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_adjustment_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_adjustment_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
