// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Style]
	public class Style : GLib.Object {

		[Obsolete]
		protected Style(GLib.GType gtype) : base(gtype) {}
		public Style(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_new();

		public Style () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Style)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_style_new();
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_style_get_black_offset ();

		static uint black_offset = gtksharp_gtk_style_get_black_offset ();
		public Gdk.Color Black {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + black_offset);
					return *raw_ptr;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_style_get_white_offset ();

		static uint white_offset = gtksharp_gtk_style_get_white_offset ();
		public Gdk.Color White {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + white_offset);
					return *raw_ptr;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_style_get_font_desc_offset ();

		static uint font_desc_offset = gtksharp_gtk_style_get_font_desc_offset ();
		public Pango.FontDescription FontDesc {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_desc_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.FontDescription), false);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_style_get_xthickness_offset ();

		static uint xthickness_offset = gtksharp_gtk_style_get_xthickness_offset ();
		public int Xthickness {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + xthickness_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_style_get_ythickness_offset ();

		static uint ythickness_offset = gtksharp_gtk_style_get_ythickness_offset ();
		public int Ythickness {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + ythickness_offset);
					return (*raw_ptr);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RealizeVMDelegate (IntPtr style);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_style_override_realize (IntPtr gtype, RealizeVMDelegate cb);

		static RealizeVMDelegate RealizeVMCallback;

		static void realize_cb (IntPtr style)
		{
			try {
				Style style_managed = GLib.Object.GetObject (style, false) as Style;
				style_managed.OnRealize ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRealize (GLib.GType gtype)
		{
			if (RealizeVMCallback == null)
				RealizeVMCallback = new RealizeVMDelegate (realize_cb);
			gtksharp_style_override_realize (gtype.Val, RealizeVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_style_base_realize (IntPtr style);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Style), ConnectionMethod="OverrideRealize")]
		protected virtual void OnRealize ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_style_base_realize (Handle);
		}

		[GLib.Signal("realize")]
		public event System.EventHandler Realize {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "realize");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "realize");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UnrealizeVMDelegate (IntPtr style);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_style_override_unrealize (IntPtr gtype, UnrealizeVMDelegate cb);

		static UnrealizeVMDelegate UnrealizeVMCallback;

		static void unrealize_cb (IntPtr style)
		{
			try {
				Style style_managed = GLib.Object.GetObject (style, false) as Style;
				style_managed.OnUnrealize ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideUnrealize (GLib.GType gtype)
		{
			if (UnrealizeVMCallback == null)
				UnrealizeVMCallback = new UnrealizeVMDelegate (unrealize_cb);
			gtksharp_style_override_unrealize (gtype.Val, UnrealizeVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_style_base_unrealize (IntPtr style);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Style), ConnectionMethod="OverrideUnrealize")]
		protected virtual void OnUnrealize ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_style_base_unrealize (Handle);
		}

		[GLib.Signal("unrealize")]
		public event System.EventHandler Unrealize {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unrealize");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unrealize");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_apply_default_background(IntPtr raw, IntPtr window, bool set_bg, int state_type, ref Gdk.Rectangle area, int x, int y, int width, int height);

		public void ApplyDefaultBackground(Gdk.Window window, bool set_bg, Gtk.StateType state_type, Gdk.Rectangle area, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_style_apply_default_background(Handle, window == null ? IntPtr.Zero : window.Handle, set_bg, (int) state_type, ref area, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_attach(IntPtr raw, IntPtr window);

		public Gtk.Style Attach(Gdk.Window window) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_style_attach(Handle, window == null ? IntPtr.Zero : window.Handle);
			Gtk.Style ret = GLib.Object.GetObject(raw_ret) as Gtk.Style;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_copy(IntPtr raw);

		public Gtk.Style Copy() {
			IntPtr raw_ret = gtk_style_copy(Handle);
			Gtk.Style ret = GLib.Object.GetObject(raw_ret, true) as Gtk.Style;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_detach(IntPtr raw);

		public void Detach() {
			gtk_style_detach(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_get_font(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_set_font(IntPtr raw, ref Gdk.Font value);

		[Obsolete]
		public Gdk.Font Font { 
			get {
				IntPtr raw_ret = gtk_style_get_font(Handle);
				Gdk.Font ret = Gdk.Font.New (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_style_set_font(Handle, ref value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_style_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_style_lookup_color(IntPtr raw, IntPtr color_name, ref Gdk.Color color);

		public bool LookupColor(string color_name, out Gdk.Color color) {
			Gtk.Application.AssertMainThread();
			IntPtr native_color_name = GLib.Marshaller.StringToPtrGStrdup (color_name);
			color = new Gdk.Color();
			bool raw_ret = gtk_style_lookup_color(Handle, native_color_name, ref color);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_color_name);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_lookup_icon_set(IntPtr raw, IntPtr stock_id);

		public Gtk.IconSet LookupIconSet(string stock_id) {
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			IntPtr raw_ret = gtk_style_lookup_icon_set(Handle, native_stock_id);
			Gtk.IconSet ret = raw_ret == IntPtr.Zero ? null : (Gtk.IconSet) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.IconSet), false);
			GLib.Marshaller.Free (native_stock_id);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_ref(IntPtr raw);

		[Obsolete]
		public Gtk.Style Ref() {
			IntPtr raw_ret = gtk_style_ref(Handle);
			Gtk.Style ret = GLib.Object.GetObject(raw_ret) as Gtk.Style;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_render_icon(IntPtr raw, IntPtr source, int direction, int state, int size, IntPtr widget, IntPtr detail);

		public Gdk.Pixbuf RenderIcon(Gtk.IconSource source, Gtk.TextDirection direction, Gtk.StateType state, Gtk.IconSize size, Gtk.Widget widget, string detail) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			IntPtr raw_ret = gtk_style_render_icon(Handle, source == null ? IntPtr.Zero : source.Handle, (int) direction, (int) state, (int) size, widget == null ? IntPtr.Zero : widget.Handle, native_detail);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			GLib.Marshaller.Free (native_detail);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_set_background(IntPtr raw, IntPtr window, int state_type);

		public void SetBackground(Gdk.Window window, Gtk.StateType state_type) {
			Gtk.Application.AssertMainThread();
			gtk_style_set_background(Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_style_unref(IntPtr raw);

		[Obsolete]
		public void Unref() {
			gtk_style_unref(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_arrow(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int arrow_type, bool fill, int x, int y, int width, int height);

		public static void PaintArrow(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, Gtk.ArrowType arrow_type, bool fill, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_arrow(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, (int) arrow_type, fill, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_box_gap(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width);

		public static void PaintBoxGap(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup(detail);
			gtk_paint_box_gap(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height, (int) gap_side, gap_x, gap_width);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_box(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintBox(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_box(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_check(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintCheck(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_check(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_diamond(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintDiamond(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_diamond(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_expander(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int expander_style);

		public static void PaintExpander(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, Gtk.ExpanderStyle expander_style) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_expander(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, (int) expander_style);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_extension(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height, int gap_side);

		public static void PaintExtension(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup(detail);
			gtk_paint_extension(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height, (int) gap_side);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_flat_box(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintFlatBox(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_flat_box(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_focus(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintFocus(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_focus(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_handle(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height, int orientation);

		public static void PaintHandle(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.Orientation orientation) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_handle(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height, (int) orientation);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_hline(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x1, int x2, int y);

		public static void PaintHline(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x1, int x2, int y) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_hline(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x1, x2, y);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_layout(IntPtr style, IntPtr window, int state_type, bool use_text, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, IntPtr layout);

		public static void PaintLayout(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, bool use_text, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, Pango.Layout layout) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_layout(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, use_text, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, layout == null ? IntPtr.Zero : layout.Handle);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_option(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintOption(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_option(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_polygon(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, Gdk.Point[] points, int n_points, bool fill);

		public static void PaintPolygon(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, Gdk.Point[] points, bool fill) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_polygon(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, points, (points == null ? 0 : points.Length), fill);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_resize_grip(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int edge, int x, int y, int width, int height);

		public static void PaintResizeGrip(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, Gdk.WindowEdge edge, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_resize_grip(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, (int) edge, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_shadow_gap(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width);

		public static void PaintShadowGap(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup(detail);
			gtk_paint_shadow_gap(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height, (int) gap_side, gap_x, gap_width);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_shadow(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintShadow(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_shadow(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_slider(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height, int orientation);

		public static void PaintSlider(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.Orientation orientation) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_slider(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height, (int) orientation);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_tab(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, int width, int height);

		public static void PaintTab(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_tab(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, width, height);
			GLib.Marshaller.Free (native_detail);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_vline(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int y1_, int y2_, int x);

		public static void PaintVline(Gtk.Style style, Gdk.Drawable window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int y1_, int y2_, int x) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			gtk_paint_vline(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, y1_, y2_, x);
			GLib.Marshaller.Free (native_detail);
		}

#endregion
#region Customized extensions
#line 1 "Style.custom"
//
// Gtk.Style.custom - Gtk Style class customizations
//
// Authors: Rachel Hestilow <hestilow@ximian.com> 
//          Radek Doulik <rodo@matfyz.cz> 
//          Mike Kestner <mkestner@novell.com>
//
// Copyright (C) 2002, 2003 Rachel Hestilow, Radek Doulik
// Copyright (C) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
static Gdk.GC EnsureGC (IntPtr raw) {
	if (raw == IntPtr.Zero)
		return null;
	Gdk.GC ret = (Gdk.GC) GLib.Object.GetObject (raw, false);
	if (ret == null)
		ret = new Gdk.GC (raw);
	return ret;
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_white_gc (IntPtr style);

public Gdk.GC WhiteGC {
	get { return EnsureGC (gtksharp_gtk_style_get_white_gc (Handle)); }
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_black_gc (IntPtr style);

public Gdk.GC BlackGC {
	get { return EnsureGC (gtksharp_gtk_style_get_black_gc (Handle)); }
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_fg_gc (IntPtr style, int i);

public Gdk.GC ForegroundGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_fg_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_fg_gc (IntPtr style, int i, IntPtr gc);

public void SetForegroundGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_fg_gc (Handle, (int) state, gc.Handle);
}

public Gdk.GC[] ForegroundGCs {
	get {
		Gdk.GC[] ret = new Gdk.GC[5];
		for (int i = 0; i < 5; i++)
			ret[i] = EnsureGC (gtksharp_gtk_style_get_fg_gc (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg_gc (IntPtr style, int i);

public Gdk.GC BackgroundGC (StateType state)
{
		IntPtr raw = gtksharp_gtk_style_get_bg_gc (Handle, (int) state);
		return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_bg_gc (IntPtr style, int i, IntPtr gc);

public void SetBackgroundGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_bg_gc (Handle, (int) state, gc.Handle);
}

public Gdk.GC[] BackgroundGCs {
	get {
		Gdk.GC[] ret = new Gdk.GC[5];
		for (int i = 0; i < 5; i++)
			ret[i] = EnsureGC (gtksharp_gtk_style_get_bg_gc (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_base_gc (IntPtr style, int i);

public Gdk.GC BaseGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_base_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_base_gc (IntPtr style, int i, IntPtr gc);

public void SetBaseGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_base_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text_gc (IntPtr style, int i);

public Gdk.GC TextGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_text_gc (IntPtr style, int i, IntPtr gc);

public void SetTextGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_text_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text_aa_gc (IntPtr style, int i);

public Gdk.GC TextAAGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text_aa_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_text_aa_gc (IntPtr style, int i, IntPtr gc);

public void SetTextAAGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_text_aa_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_light_gc (IntPtr style, int i);

public Gdk.GC LightGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_light_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_light_gc (IntPtr style, int i, IntPtr gc);

public void SetLightGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_light_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_dark_gc (IntPtr style, int i);

public Gdk.GC DarkGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_dark_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_dark_gc (IntPtr style, int i, IntPtr gc);

public void SetDarkGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_dark_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_mid_gc (IntPtr style, int i);

public Gdk.GC MidGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_mid_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_mid_gc (IntPtr style, int i, IntPtr gc);

public void SetMidGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_mid_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg (IntPtr style, int i);

public Gdk.Color Background (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_bg (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] Backgrounds {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_bg (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_fg (IntPtr style, int i);

public Gdk.Color Foreground (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_fg (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] Foregrounds {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_fg (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text (IntPtr style, int i);

public Gdk.Color Text (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] TextColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_text (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_base (IntPtr style, int i);

public Gdk.Color Base (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_base (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] BaseColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_base (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_light (IntPtr style, int i);

public Gdk.Color Light (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_light (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] LightColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_light (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_mid (IntPtr style, int i);

public Gdk.Color Mid (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_mid (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] MidColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_mid (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_dark (IntPtr style, int i);

public Gdk.Color Dark (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_dark (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] DarkColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_dark (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern int gtksharp_gtk_style_get_thickness (IntPtr style, int x_axis);
[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern void gtksharp_gtk_style_set_thickness (IntPtr style, int value);

public int XThickness {
	get {
		return gtksharp_gtk_style_get_thickness (Handle, 0);
	}

	set {
		gtksharp_gtk_style_set_thickness (Handle, value);
	}
}

public int YThickness {
	get {
		return gtksharp_gtk_style_get_thickness (Handle, 1);
	}

	set {
		gtksharp_gtk_style_set_thickness (Handle, -value);
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_font_description (IntPtr style);

public Pango.FontDescription FontDescription {
	get {
		IntPtr Raw = gtksharp_gtk_style_get_font_description (Handle);

		if (Raw == IntPtr.Zero)
			return null;
		Pango.FontDescription ret = (Pango.FontDescription) GLib.Opaque.GetOpaque (Raw, typeof (Pango.FontDescription), false);
		if (ret == null)
			ret = new Pango.FontDescription (Raw);
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg_pixmap (IntPtr style, int state);

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern void gtksharp_gtk_style_set_bg_pixmap (IntPtr style, int state, IntPtr pixmap);

public Gdk.Pixmap BgPixmap (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_bg_pixmap (Handle, (int) state);
	return GLib.Object.GetObject (raw) as Gdk.Pixmap;
}

public Gdk.Pixmap[] BgPixmaps {
	get {
		Gdk.Pixmap[] ret = new Gdk.Pixmap [5];
		for (int i = 0; i < 5; i++)
			ret [i] = GLib.Object.GetObject (gtksharp_gtk_style_get_dark (Handle, i)) as Gdk.Pixmap;
		return ret;
	}
}

public void SetBgPixmap (StateType state, Gdk.Pixmap pixmap)
{
		gtksharp_gtk_style_set_bg_pixmap (Handle, (int) state, pixmap == null ? IntPtr.Zero : pixmap.Handle);
}


#endregion
	}

	internal class StyleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_style_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_style_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
