// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class TreeSortableAdapter : GLib.GInterfaceAdapter, Gtk.TreeSortable {

		static TreeSortableIface iface;

		struct TreeSortableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public IntPtr sort_column_changed;
			public GetSortColumnIdDelegate get_sort_column_id;
			public SetSortColumnIdDelegate set_sort_column_id;
			public SetSortFuncDelegate set_sort_func;
			public SetDefaultSortFuncDelegate set_default_sort_func;
			public HasDefaultSortFuncDelegate has_default_sort_func;
		}

		static TreeSortableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(TreeSortableAdapter));
			iface.get_sort_column_id = new GetSortColumnIdDelegate (GetSortColumnIdCallback);
			iface.set_sort_column_id = new SetSortColumnIdDelegate (SetSortColumnIdCallback);
			iface.set_sort_func = new SetSortFuncDelegate (SetSortFuncCallback);
			iface.set_default_sort_func = new SetDefaultSortFuncDelegate (SetDefaultSortFuncCallback);
			iface.has_default_sort_func = new HasDefaultSortFuncDelegate (HasDefaultSortFuncCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GetSortColumnIdDelegate (IntPtr sortable, out int sort_column_id, out int order);

		static bool GetSortColumnIdCallback (IntPtr sortable, out int sort_column_id, out int order)
		{
			try {
				Gtk.TreeSortableImplementor __obj = GLib.Object.GetObject (sortable, false) as Gtk.TreeSortableImplementor;
				Gtk.SortType myorder;
				bool __result = __obj.GetSortColumnId (out sort_column_id, out myorder);
				order = (int) myorder;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetSortColumnIdDelegate (IntPtr sortable, int sort_column_id, int order);

		static void SetSortColumnIdCallback (IntPtr sortable, int sort_column_id, int order)
		{
			try {
				Gtk.TreeSortableImplementor __obj = GLib.Object.GetObject (sortable, false) as Gtk.TreeSortableImplementor;
				__obj.SetSortColumnId (sort_column_id, (Gtk.SortType) order);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetSortFuncDelegate (IntPtr sortable, int sort_column_id, GtkSharp.TreeIterCompareFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		static void SetSortFuncCallback (IntPtr sortable, int sort_column_id, GtkSharp.TreeIterCompareFuncNative func, IntPtr data, GLib.DestroyNotify destroy)
		{
			try {
				Gtk.TreeSortableImplementor __obj = GLib.Object.GetObject (sortable, false) as Gtk.TreeSortableImplementor;
				GtkSharp.TreeIterCompareFuncInvoker func_invoker = new GtkSharp.TreeIterCompareFuncInvoker (func, data, destroy);
				__obj.SetSortFunc (sort_column_id, func_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetDefaultSortFuncDelegate (IntPtr sortable, GtkSharp.TreeIterCompareFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		static void SetDefaultSortFuncCallback (IntPtr sortable, GtkSharp.TreeIterCompareFuncNative func, IntPtr data, GLib.DestroyNotify destroy)
		{
			try {
				Gtk.TreeSortableImplementor __obj = GLib.Object.GetObject (sortable, false) as Gtk.TreeSortableImplementor;
				GtkSharp.TreeIterCompareFuncInvoker func_invoker = new GtkSharp.TreeIterCompareFuncInvoker (func, data, destroy);
				__obj.DefaultSortFunc = func_invoker.Handler;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool HasDefaultSortFuncDelegate (IntPtr sortable);

		static bool HasDefaultSortFuncCallback (IntPtr sortable)
		{
			try {
				Gtk.TreeSortableImplementor __obj = GLib.Object.GetObject (sortable, false) as Gtk.TreeSortableImplementor;
				bool __result = __obj.HasDefaultSortFunc;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			TreeSortableIface native_iface = Marshal.PtrToStructure<TreeSortableIface> (ifaceptr);
			native_iface.get_sort_column_id = iface.get_sort_column_id;
			native_iface.set_sort_column_id = iface.set_sort_column_id;
			native_iface.set_sort_func = iface.set_sort_func;
			native_iface.set_default_sort_func = iface.set_default_sort_func;
			native_iface.has_default_sort_func = iface.has_default_sort_func;
			Marshal.StructureToPtr<TreeSortableIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public TreeSortableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		TreeSortableImplementor implementor;

		public TreeSortableAdapter (TreeSortableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public TreeSortableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_sortable_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_sortable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static TreeSortable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static TreeSortable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is TreeSortableImplementor)
				return new TreeSortableAdapter (obj as TreeSortableImplementor);
			else if (obj as TreeSortable == null)
				return new TreeSortableAdapter (obj.Handle);
			else
				return obj as TreeSortable;
		}

		public TreeSortableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("sort_column_changed")]
		public event System.EventHandler SortColumnChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "sort_column_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "sort_column_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_sortable_get_sort_column_id(IntPtr raw, out int sort_column_id, out int order);

		public bool GetSortColumnId(out int sort_column_id, out Gtk.SortType order) {
			Gtk.Application.AssertMainThread();
			int native_order;
			bool raw_ret = gtk_tree_sortable_get_sort_column_id(Handle, out sort_column_id, out native_order);
			bool ret = raw_ret;
			order = (Gtk.SortType) native_order;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_sortable_has_default_sort_func(IntPtr raw);

		public bool HasDefaultSortFunc { 
			get {
				bool raw_ret = gtk_tree_sortable_has_default_sort_func(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_sortable_set_default_sort_func(IntPtr raw, GtkSharp.TreeIterCompareFuncNative sort_func, IntPtr user_data, GLib.DestroyNotify destroy);

		public Gtk.TreeIterCompareFunc DefaultSortFunc { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr user_data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					user_data = IntPtr.Zero;
					destroy = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_sortable_set_default_sort_func(Handle, (value == null) ? null : GtkSharp.TreeIterCompareFuncWrapper.NativeDelegate, user_data, destroy);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_sortable_set_sort_column_id(IntPtr raw, int sort_column_id, int order);

		public void SetSortColumnId(int sort_column_id, Gtk.SortType order) {
			Gtk.Application.AssertMainThread();
			gtk_tree_sortable_set_sort_column_id(Handle, sort_column_id, (int) order);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_sortable_set_sort_func(IntPtr raw, int sort_column_id, GtkSharp.TreeIterCompareFuncNative sort_func, IntPtr user_data, GLib.DestroyNotify destroy);

		public void SetSortFunc(int sort_column_id, Gtk.TreeIterCompareFunc sort_func) {
			Gtk.Application.AssertMainThread();
			IntPtr user_data;
			GLib.DestroyNotify destroy;
			if (sort_func == null) {
				user_data = IntPtr.Zero;
				destroy = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (sort_func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_tree_sortable_set_sort_func(Handle, sort_column_id, (sort_func == null) ? null : GtkSharp.TreeIterCompareFuncWrapper.NativeDelegate, user_data, destroy);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_sortable_sort_column_changed(IntPtr raw);

		public void ChangeSortColumn() {
			gtk_tree_sortable_sort_column_changed(Handle);
		}

#endregion
#region Customized extensions
#line 1 "TreeSortableAdapter.custom"
// Gtk.TreeSortableAdapter.Custom - Gtk TreeSortableAdapter class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2007 Novell, Inc. 
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[Obsolete ("Replaced by SetSortFunc (int, TreeIterCompareFunc) overload.")]
		public void SetSortFunc (int sort_column_id, TreeIterCompareFunc sort_func, IntPtr user_data, Gtk.DestroyNotify destroy) 
		{
			SetSortFunc (sort_column_id, sort_func);
		}

		[Obsolete ("Replaced by DefaultSortFunc property.")]
		public void SetDefaultSortFunc (TreeIterCompareFunc sort_func, IntPtr user_data, Gtk.DestroyNotify destroy) 
		{
			DefaultSortFunc = sort_func;
		}



#endregion
	}
}
