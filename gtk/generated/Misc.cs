// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Misc]
	public class Misc : Gtk.Widget {

		[Obsolete]
		protected Misc(GLib.GType gtype) : base(gtype) {}
		public Misc(IntPtr raw) : base(raw) {}

		protected Misc() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				using (GLib.Value val = GetProperty ("xalign")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("xalign", val);
				}
			}
		}

		[GLib.Property ("yalign")]
		public float Yalign {
			get {
				using (GLib.Value val = GetProperty ("yalign")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("yalign", val);
				}
			}
		}

		[GLib.Property ("xpad")]
		public int Xpad {
			get {
				using (GLib.Value val = GetProperty ("xpad")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("xpad", val);
				}
			}
		}

		[GLib.Property ("ypad")]
		public int Ypad {
			get {
				using (GLib.Value val = GetProperty ("ypad")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("ypad", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_misc_get_alignment(IntPtr raw, out float xalign, out float yalign);

		public void GetAlignment(out float xalign, out float yalign) {
			Gtk.Application.AssertMainThread();
			gtk_misc_get_alignment(Handle, out xalign, out yalign);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_misc_get_padding(IntPtr raw, out int xpad, out int ypad);

		public void GetPadding(out int xpad, out int ypad) {
			Gtk.Application.AssertMainThread();
			gtk_misc_get_padding(Handle, out xpad, out ypad);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_misc_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_misc_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_misc_set_alignment(IntPtr raw, float xalign, float yalign);

		public void SetAlignment(float xalign, float yalign) {
			Gtk.Application.AssertMainThread();
			gtk_misc_set_alignment(Handle, xalign, yalign);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_misc_set_padding(IntPtr raw, int xpad, int ypad);

		public void SetPadding(int xpad, int ypad) {
			Gtk.Application.AssertMainThread();
			gtk_misc_set_padding(Handle, xpad, ypad);
		}

#endregion
	}

	internal class MiscAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_misc_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_misc_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
