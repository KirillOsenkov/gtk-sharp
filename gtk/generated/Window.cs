// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Window]
	public class Window : Gtk.Bin {

		[Obsolete]
		protected Window(GLib.GType gtype) : base(gtype) {}
		public Window(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_new(int type);

		public Window (Gtk.WindowType type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Window)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("type");
					vals[0] = new GLib.Value (type);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_window_new((int) type);
		}

		[GLib.Property ("type")]
		public Gtk.WindowType Type {
			get {
				using (GLib.Value val = GetProperty ("type")) {
					Gtk.WindowType ret = (Gtk.WindowType) (Enum) val;
					return ret;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_title(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_window_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_window_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_role(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_role(IntPtr raw, IntPtr role);

		[GLib.Property ("role")]
		public string Role {
			get  {
				IntPtr raw_ret = gtk_window_get_role(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_window_set_role(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_startup_id(IntPtr raw, IntPtr startup_id);

		[GLib.Property ("startup-id")]
		public string StartupId {
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_window_set_startup_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("allow-shrink")]
		public bool AllowShrink {
			get {
				using (GLib.Value val = GetProperty ("allow-shrink")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("allow-shrink", val);
				}
			}
		}

		[GLib.Property ("allow-grow")]
		public bool AllowGrow {
			get {
				using (GLib.Value val = GetProperty ("allow-grow")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("allow-grow", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_resizable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_resizable(IntPtr raw, bool resizable);

		[GLib.Property ("resizable")]
		public bool Resizable {
			get  {
				bool raw_ret = gtk_window_get_resizable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_resizable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_modal(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_modal(IntPtr raw, bool modal);

		[GLib.Property ("modal")]
		public bool Modal {
			get  {
				bool raw_ret = gtk_window_get_modal(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_modal(Handle, value);
			}
		}

		[GLib.Property ("window-position")]
		public Gtk.WindowPosition WindowPosition {
			get {
				using (GLib.Value val = GetProperty ("window-position")) {
					Gtk.WindowPosition ret = (Gtk.WindowPosition) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("window-position", val);
				}
			}
		}

		[GLib.Property ("default-width")]
		public int DefaultWidth {
			get {
				using (GLib.Value val = GetProperty ("default-width")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("default-width", val);
				}
			}
		}

		[GLib.Property ("default-height")]
		public int DefaultHeight {
			get {
				using (GLib.Value val = GetProperty ("default-height")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("default-height", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_destroy_with_parent(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_destroy_with_parent(IntPtr raw, bool setting);

		[GLib.Property ("destroy-with-parent")]
		public bool DestroyWithParent {
			get  {
				bool raw_ret = gtk_window_get_destroy_with_parent(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_destroy_with_parent(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_icon(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_icon(IntPtr raw, IntPtr icon);

		[GLib.Property ("icon")]
		public Gdk.Pixbuf Icon {
			get  {
				IntPtr raw_ret = gtk_window_get_icon(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_icon(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_icon_name(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_icon_name(IntPtr raw, IntPtr name);

		[GLib.Property ("icon-name")]
		public string IconName {
			get  {
				IntPtr raw_ret = gtk_window_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_window_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_screen(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_screen(IntPtr raw, IntPtr screen);

		[GLib.Property ("screen")]
		public new Gdk.Screen Screen {
			get  {
				IntPtr raw_ret = gtk_window_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("is-active")]
		public bool IsActive {
			get {
				using (GLib.Value val = GetProperty ("is-active")) {
					bool ret = (bool) val;
					return ret;
				}
			}
		}

		[GLib.Property ("has-toplevel-focus")]
		public bool HasToplevelFocus {
			get {
				using (GLib.Value val = GetProperty ("has-toplevel-focus")) {
					bool ret = (bool) val;
					return ret;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_window_get_type_hint(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_type_hint(IntPtr raw, int hint);

		[GLib.Property ("type-hint")]
		public Gdk.WindowTypeHint TypeHint {
			get  {
				int raw_ret = gtk_window_get_type_hint(Handle);
				Gdk.WindowTypeHint ret = (Gdk.WindowTypeHint) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_type_hint(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_skip_taskbar_hint(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_skip_taskbar_hint(IntPtr raw, bool setting);

		[GLib.Property ("skip-taskbar-hint")]
		public bool SkipTaskbarHint {
			get  {
				bool raw_ret = gtk_window_get_skip_taskbar_hint(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_skip_taskbar_hint(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_skip_pager_hint(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_skip_pager_hint(IntPtr raw, bool setting);

		[GLib.Property ("skip-pager-hint")]
		public bool SkipPagerHint {
			get  {
				bool raw_ret = gtk_window_get_skip_pager_hint(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_skip_pager_hint(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_urgency_hint(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_urgency_hint(IntPtr raw, bool setting);

		[GLib.Property ("urgency-hint")]
		public bool UrgencyHint {
			get  {
				bool raw_ret = gtk_window_get_urgency_hint(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_urgency_hint(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_accept_focus(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_accept_focus(IntPtr raw, bool setting);

		[GLib.Property ("accept-focus")]
		public bool AcceptFocus {
			get  {
				bool raw_ret = gtk_window_get_accept_focus(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_accept_focus(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_focus_on_map(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_focus_on_map(IntPtr raw, bool setting);

		[GLib.Property ("focus-on-map")]
		public bool FocusOnMap {
			get  {
				bool raw_ret = gtk_window_get_focus_on_map(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_focus_on_map(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_decorated(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_decorated(IntPtr raw, bool setting);

		[GLib.Property ("decorated")]
		public bool Decorated {
			get  {
				bool raw_ret = gtk_window_get_decorated(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_decorated(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_deletable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_deletable(IntPtr raw, bool setting);

		[GLib.Property ("deletable")]
		public bool Deletable {
			get  {
				bool raw_ret = gtk_window_get_deletable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_deletable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_window_get_gravity(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_gravity(IntPtr raw, int gravity);

		[GLib.Property ("gravity")]
		public Gdk.Gravity Gravity {
			get  {
				int raw_ret = gtk_window_get_gravity(Handle);
				Gdk.Gravity ret = (Gdk.Gravity) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_gravity(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_transient_for(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_transient_for(IntPtr raw, IntPtr parent);

		[GLib.Property ("transient-for")]
		public Gtk.Window TransientFor {
			get  {
				IntPtr raw_ret = gtk_window_get_transient_for(Handle);
				Gtk.Window ret = GLib.Object.GetObject(raw_ret) as Gtk.Window;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_transient_for(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_window_get_opacity(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_opacity(IntPtr raw, double opacity);

		[GLib.Property ("opacity")]
		public double Opacity {
			get  {
				double raw_ret = gtk_window_get_opacity(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_opacity(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_group(IntPtr raw);

		public Gtk.WindowGroup Group {
			get  {
				IntPtr raw_ret = gtk_window_get_group(Handle);
				Gtk.WindowGroup ret = GLib.Object.GetObject(raw_ret) as Gtk.WindowGroup;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_get_has_frame(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_has_frame(IntPtr raw, bool setting);

		public bool HasFrame {
			get  {
				bool raw_ret = gtk_window_get_has_frame(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_has_frame(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_window_get_mnemonic_modifier(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_mnemonic_modifier(IntPtr raw, int modifier);

		public Gdk.ModifierType MnemonicModifier {
			get  {
				int raw_ret = gtk_window_get_mnemonic_modifier(Handle);
				Gdk.ModifierType ret = (Gdk.ModifierType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_window_set_mnemonic_modifier(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetFocusVMDelegate (IntPtr window, IntPtr focus);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_override_set_focus (IntPtr gtype, SetFocusVMDelegate cb);

		static SetFocusVMDelegate SetFocusVMCallback;

		static void setfocus_cb (IntPtr window, IntPtr focus)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				window_managed.OnSetFocus (GLib.Object.GetObject(focus) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSetFocus (GLib.GType gtype)
		{
			if (SetFocusVMCallback == null)
				SetFocusVMCallback = new SetFocusVMDelegate (setfocus_cb);
			gtksharp_window_override_set_focus (gtype.Val, SetFocusVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_base_set_focus (IntPtr window, IntPtr focus);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideSetFocus")]
		protected virtual void OnSetFocus (Gtk.Widget focus)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_window_base_set_focus (Handle, focus == null ? IntPtr.Zero : focus.Handle);
		}

		[GLib.Signal("set_focus")]
		public event Gtk.SetFocusHandler SetFocus {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_focus", typeof (Gtk.SetFocusArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_focus", typeof (Gtk.SetFocusArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool FrameEventVMDelegate (IntPtr window, IntPtr evnt);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_override_frame_event (IntPtr gtype, FrameEventVMDelegate cb);

		static FrameEventVMDelegate FrameEventVMCallback;

		static bool frameevent_cb (IntPtr window, IntPtr evnt)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				return window_managed.OnFrameEvent (Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideFrameEvent (GLib.GType gtype)
		{
			if (FrameEventVMCallback == null)
				FrameEventVMCallback = new FrameEventVMDelegate (frameevent_cb);
			gtksharp_window_override_frame_event (gtype.Val, FrameEventVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_window_base_frame_event (IntPtr window, IntPtr evnt);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideFrameEvent")]
		protected virtual bool OnFrameEvent (Gdk.Event evnt)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_window_base_frame_event (Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __ret;
		}

		[GLib.Signal("frame_event")]
		public event Gtk.FrameEventHandler FrameEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "frame_event", typeof (Gtk.FrameEventArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "frame_event", typeof (Gtk.FrameEventArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FocusActivatedVMDelegate (IntPtr window);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_override_activate_focus (IntPtr gtype, FocusActivatedVMDelegate cb);

		static FocusActivatedVMDelegate FocusActivatedVMCallback;

		static void focusactivated_cb (IntPtr window)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				window_managed.OnFocusActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFocusActivated (GLib.GType gtype)
		{
			if (FocusActivatedVMCallback == null)
				FocusActivatedVMCallback = new FocusActivatedVMDelegate (focusactivated_cb);
			gtksharp_window_override_activate_focus (gtype.Val, FocusActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_base_activate_focus (IntPtr window);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideFocusActivated")]
		protected virtual void OnFocusActivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_window_base_activate_focus (Handle);
		}

		[GLib.Signal("activate_focus")]
		public event System.EventHandler FocusActivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_focus");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_focus");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DefaultActivatedVMDelegate (IntPtr window);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_override_activate_default (IntPtr gtype, DefaultActivatedVMDelegate cb);

		static DefaultActivatedVMDelegate DefaultActivatedVMCallback;

		static void defaultactivated_cb (IntPtr window)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				window_managed.OnDefaultActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDefaultActivated (GLib.GType gtype)
		{
			if (DefaultActivatedVMCallback == null)
				DefaultActivatedVMCallback = new DefaultActivatedVMDelegate (defaultactivated_cb);
			gtksharp_window_override_activate_default (gtype.Val, DefaultActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_base_activate_default (IntPtr window);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideDefaultActivated")]
		protected virtual void OnDefaultActivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_window_base_activate_default (Handle);
		}

		[GLib.Signal("activate_default")]
		public event System.EventHandler DefaultActivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_default");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_default");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void KeysChangedVMDelegate (IntPtr window);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_override_keys_changed (IntPtr gtype, KeysChangedVMDelegate cb);

		static KeysChangedVMDelegate KeysChangedVMCallback;

		static void keyschanged_cb (IntPtr window)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				window_managed.OnKeysChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideKeysChanged (GLib.GType gtype)
		{
			if (KeysChangedVMCallback == null)
				KeysChangedVMCallback = new KeysChangedVMDelegate (keyschanged_cb);
			gtksharp_window_override_keys_changed (gtype.Val, KeysChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_window_base_keys_changed (IntPtr window);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideKeysChanged")]
		protected virtual void OnKeysChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_window_base_keys_changed (Handle);
		}

		[GLib.Signal("keys_changed")]
		public event System.EventHandler KeysChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "keys_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "keys_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_activate_default(IntPtr raw);

		public bool ActivateDefault() {
			bool raw_ret = gtk_window_activate_default(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_activate_focus(IntPtr raw);

		public bool ActivateFocus() {
			bool raw_ret = gtk_window_activate_focus(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_activate_key(IntPtr raw, IntPtr evnt);

		public bool ActivateKey(Gdk.EventKey evnt) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_window_activate_key(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_add_accel_group(IntPtr raw, IntPtr accel_group);

		public void AddAccelGroup(Gtk.AccelGroup accel_group) {
			Gtk.Application.AssertMainThread();
			gtk_window_add_accel_group(Handle, accel_group == null ? IntPtr.Zero : accel_group.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_add_embedded_xid(IntPtr raw, uint xid);

		public void AddEmbeddedXid(uint xid) {
			Gtk.Application.AssertMainThread();
			gtk_window_add_embedded_xid(Handle, xid);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_add_mnemonic(IntPtr raw, uint keyval, IntPtr target);

		public void AddMnemonic(uint keyval, Gtk.Widget target) {
			Gtk.Application.AssertMainThread();
			gtk_window_add_mnemonic(Handle, keyval, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_begin_move_drag(IntPtr raw, int button, int root_x, int root_y, uint timestamp);

		public void BeginMoveDrag(int button, int root_x, int root_y, uint timestamp) {
			Gtk.Application.AssertMainThread();
			gtk_window_begin_move_drag(Handle, button, root_x, root_y, timestamp);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_begin_resize_drag(IntPtr raw, int edge, int button, int root_x, int root_y, uint timestamp);

		public void BeginResizeDrag(Gdk.WindowEdge edge, int button, int root_x, int root_y, uint timestamp) {
			Gtk.Application.AssertMainThread();
			gtk_window_begin_resize_drag(Handle, (int) edge, button, root_x, root_y, timestamp);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_deiconify(IntPtr raw);

		public void Deiconify() {
			gtk_window_deiconify(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_fullscreen(IntPtr raw);

		public void Fullscreen() {
			gtk_window_fullscreen(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_get_default_size(IntPtr raw, out int width, out int height);

		public void GetDefaultSize(out int width, out int height) {
			Gtk.Application.AssertMainThread();
			gtk_window_get_default_size(Handle, out width, out height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_focus(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_focus(IntPtr raw, IntPtr focus);

		public Gtk.Widget Focus { 
			get {
				IntPtr raw_ret = gtk_window_get_focus(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_focus(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_get_frame_dimensions(IntPtr raw, out int left, out int top, out int right, out int bottom);

		public void GetFrameDimensions(out int left, out int top, out int right, out int bottom) {
			Gtk.Application.AssertMainThread();
			gtk_window_get_frame_dimensions(Handle, out left, out top, out right, out bottom);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_get_position(IntPtr raw, out int root_x, out int root_y);

		public void GetPosition(out int root_x, out int root_y) {
			Gtk.Application.AssertMainThread();
			gtk_window_get_position(Handle, out root_x, out root_y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			Gtk.Application.AssertMainThread();
			gtk_window_get_size(Handle, out width, out height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_window_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_iconify(IntPtr raw);

		public void Iconify() {
			gtk_window_iconify(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_list_toplevels();

		public static Gtk.Window[] ListToplevels() {
			IntPtr raw_ret = gtk_window_list_toplevels();
			Gtk.Window[] ret = GLib.Marshaller.ListPtrToArray<Gtk.Window> (raw_ret, typeof(GLib.List), true, false);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_maximize(IntPtr raw);

		public void Maximize() {
			gtk_window_maximize(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_mnemonic_activate(IntPtr raw, uint keyval, int modifier);

		public bool MnemonicActivate(uint keyval, Gdk.ModifierType modifier) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_window_mnemonic_activate(Handle, keyval, (int) modifier);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_move(IntPtr raw, int x, int y);

		public void Move(int x, int y) {
			Gtk.Application.AssertMainThread();
			gtk_window_move(Handle, x, y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_parse_geometry(IntPtr raw, IntPtr geometry);

		public bool ParseGeometry(string geometry) {
			Gtk.Application.AssertMainThread();
			IntPtr native_geometry = GLib.Marshaller.StringToPtrGStrdup (geometry);
			bool raw_ret = gtk_window_parse_geometry(Handle, native_geometry);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_geometry);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_present(IntPtr raw);

		public void Present() {
			gtk_window_present(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_present_with_time(IntPtr raw, uint timestamp);

		public void PresentWithTime(uint timestamp) {
			Gtk.Application.AssertMainThread();
			gtk_window_present_with_time(Handle, timestamp);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_window_propagate_key_event(IntPtr raw, IntPtr evnt);

		public bool PropagateKeyEvent(Gdk.EventKey evnt) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_window_propagate_key_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_remove_accel_group(IntPtr raw, IntPtr accel_group);

		public void RemoveAccelGroup(Gtk.AccelGroup accel_group) {
			Gtk.Application.AssertMainThread();
			gtk_window_remove_accel_group(Handle, accel_group == null ? IntPtr.Zero : accel_group.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_remove_embedded_xid(IntPtr raw, uint xid);

		public void RemoveEmbeddedXid(uint xid) {
			Gtk.Application.AssertMainThread();
			gtk_window_remove_embedded_xid(Handle, xid);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_remove_mnemonic(IntPtr raw, uint keyval, IntPtr target);

		public void RemoveMnemonic(uint keyval, Gtk.Widget target) {
			Gtk.Application.AssertMainThread();
			gtk_window_remove_mnemonic(Handle, keyval, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_reshow_with_initial_size(IntPtr raw);

		public void ReshowWithInitialSize() {
			gtk_window_reshow_with_initial_size(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_resize(IntPtr raw, int width, int height);

		public void Resize(int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_window_resize(Handle, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_auto_startup_notification(bool setting);

		public static bool AutoStartupNotification { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_auto_startup_notification(value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_default(IntPtr raw, IntPtr default_widget);

		public Gtk.Widget Default { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_default(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_default_icon(IntPtr icon);

		public static Gdk.Pixbuf DefaultIcon { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_default_icon(value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_window_set_default_icon_from_file(IntPtr filename, out IntPtr err);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_window_set_default_icon_from_file_utf8(IntPtr filename, out IntPtr err);

		public static unsafe bool SetDefaultIconFromFile(string filename) {
			Gtk.Application.AssertMainThread();
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			bool raw_ret;
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				raw_ret = gtk_window_set_default_icon_from_file_utf8(native_filename, out error);
			else
				raw_ret = gtk_window_set_default_icon_from_file(native_filename, out error);
			bool ret = raw_ret;

			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_default_icon_name(IntPtr name);

		public static string DefaultIconName { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_window_set_default_icon_name(native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_default_size(IntPtr raw, int width, int height);

		public void SetDefaultSize(int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_window_set_default_size(Handle, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_frame_dimensions(IntPtr raw, int left, int top, int right, int bottom);

		public void SetFrameDimensions(int left, int top, int right, int bottom) {
			Gtk.Application.AssertMainThread();
			gtk_window_set_frame_dimensions(Handle, left, top, right, bottom);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_geometry_hints(IntPtr raw, IntPtr geometry_widget, ref Gdk.Geometry geometry, int geom_mask);

		public void SetGeometryHints(Gtk.Widget geometry_widget, Gdk.Geometry geometry, Gdk.WindowHints geom_mask) {
			Gtk.Application.AssertMainThread();
			gtk_window_set_geometry_hints(Handle, geometry_widget == null ? IntPtr.Zero : geometry_widget.Handle, ref geometry, (int) geom_mask);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_window_set_icon_from_file(IntPtr raw, IntPtr filename, out IntPtr err);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_window_set_icon_from_file_utf8(IntPtr raw, IntPtr filename, out IntPtr err);

		public unsafe bool SetIconFromFile(string filename) {
			Gtk.Application.AssertMainThread();
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			bool raw_ret;
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				raw_ret = gtk_window_set_icon_from_file_utf8(Handle, native_filename, out error);
			else
				raw_ret = gtk_window_set_icon_from_file(Handle, native_filename, out error);
			bool ret = raw_ret;

			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_keep_above(IntPtr raw, bool setting);

		public bool KeepAbove { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_keep_above(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_keep_below(IntPtr raw, bool setting);

		public bool KeepBelow { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_window_set_keep_below(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_policy(IntPtr raw, int allow_shrink, int allow_grow, int auto_shrink);

		[Obsolete]
		public void SetPolicy(int allow_shrink, int allow_grow, int auto_shrink) {
			Gtk.Application.AssertMainThread();
			gtk_window_set_policy(Handle, allow_shrink, allow_grow, auto_shrink);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_position(IntPtr raw, int position);

		public void SetPosition(Gtk.WindowPosition position) {
			Gtk.Application.AssertMainThread();
			gtk_window_set_position(Handle, (int) position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_set_wmclass(IntPtr raw, IntPtr wmclass_name, IntPtr wmclass_class);

		public void SetWmclass(string wmclass_name, string wmclass_class) {
			Gtk.Application.AssertMainThread();
			IntPtr native_wmclass_name = GLib.Marshaller.StringToPtrGStrdup (wmclass_name);
			IntPtr native_wmclass_class = GLib.Marshaller.StringToPtrGStrdup (wmclass_class);
			gtk_window_set_wmclass(Handle, native_wmclass_name, native_wmclass_class);
			GLib.Marshaller.Free (native_wmclass_name);
			GLib.Marshaller.Free (native_wmclass_class);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_stick(IntPtr raw);

		public void Stick() {
			gtk_window_stick(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_unfullscreen(IntPtr raw);

		public void Unfullscreen() {
			gtk_window_unfullscreen(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_unmaximize(IntPtr raw);

		public void Unmaximize() {
			gtk_window_unmaximize(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_window_unstick(IntPtr raw);

		public void Unstick() {
			gtk_window_unstick(Handle);
		}

#endregion
#region Customized extensions
#line 1 "Window.custom"
// Gtk.Window.custom - Gtk Window class customizations
//
// Author: Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2001 Mike Kestner
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public Window (String title) : this (WindowType.Toplevel)
		{
			this.Title = title;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_default_icon_list();

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_window_set_default_icon_list(IntPtr list);

		public static Gdk.Pixbuf[] DefaultIconList {
			get {
				IntPtr raw_ret = gtk_window_get_default_icon_list();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Pixbuf [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Pixbuf> (raw_ret, typeof (GLib.List), true, false);
			}
			set {
				GLib.List list = new GLib.List(IntPtr.Zero, typeof (IntPtr), true, false);
				foreach (Gdk.Pixbuf val in value)
					list.Append (val.Handle);
				gtk_window_set_default_icon_list(list.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_icon_list(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_window_set_icon_list(IntPtr raw, IntPtr list);

		public Gdk.Pixbuf[] IconList {
			get {
				IntPtr raw_ret = gtk_window_get_icon_list(Handle);
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Pixbuf [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Pixbuf> (raw_ret, typeof (GLib.List), true, false);
			}
			set {
				GLib.List list = new GLib.List(IntPtr.Zero, typeof (IntPtr), true, false);
				foreach (Gdk.Pixbuf val in value)
					list.Append (val.Handle);
				gtk_window_set_icon_list(Handle, list.Handle);
			}
		}

		public Gdk.Size DefaultSize {
			get {
				return new Gdk.Size (DefaultWidth, DefaultHeight);
			}
			set {
				DefaultWidth = value.Width;
				DefaultHeight = value.Height;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveFocusSignalDelegate (IntPtr arg0, int arg1, IntPtr gch);

		static void MoveFocusSignalCallback (IntPtr arg0, int arg1, IntPtr gch)
		{
			Gtk.MoveFocusArgs args = new Gtk.MoveFocusArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = (Gtk.DirectionType) arg1;
				Gtk.MoveFocusHandler handler = (Gtk.MoveFocusHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveFocusVMDelegate (IntPtr window, int direction);

		static MoveFocusVMDelegate MoveFocusVMCallback;

		static void movefocus_cb (IntPtr window, int direction)
		{
			try {
				Window window_managed = GLib.Object.GetObject (window, false) as Window;
				window_managed.OnMoveFocus ((Gtk.DirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMoveFocus (GLib.GType gtype)
		{
			if (MoveFocusVMCallback == null)
				MoveFocusVMCallback = new MoveFocusVMDelegate (movefocus_cb);
			OverrideVirtualMethod (gtype, "move_focus", MoveFocusVMCallback);
		}

		[Obsolete ("Replaced by Keybinding signal on Gtk.Widget")]
		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Window), ConnectionMethod="OverrideMoveFocus")]
		protected virtual void OnMoveFocus (Gtk.DirectionType direction)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params [0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (direction)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[Obsolete ("Replaced by Keybinding signal on Gtk.Widget")]
		[GLib.Signal("move_focus")]
		public event Gtk.MoveFocusHandler MoveFocus {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_focus", new MoveFocusSignalDelegate(MoveFocusSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_focus", new MoveFocusSignalDelegate(MoveFocusSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

#endregion
	}

	internal class WindowAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_window_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_window_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
