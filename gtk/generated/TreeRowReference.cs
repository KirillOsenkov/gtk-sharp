// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TreeRowReference]
	public class TreeRowReference : GLib.Opaque {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_copy(IntPtr raw);

		public Gtk.TreeRowReference Copy() {
			IntPtr raw_ret = gtk_tree_row_reference_copy(Handle);
			Gtk.TreeRowReference ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreeRowReference) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreeRowReference), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_deleted(IntPtr proxy, IntPtr path);

		public static void Deleted(GLib.Object proxy, Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_row_reference_deleted(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_model(IntPtr raw);

		public Gtk.TreeModel Model { 
			get {
				IntPtr raw_ret = gtk_tree_row_reference_get_model(Handle);
				Gtk.TreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_path(IntPtr raw);

		public Gtk.TreePath Path { 
			get {
				IntPtr raw_ret = gtk_tree_row_reference_get_path(Handle);
				Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tree_row_reference_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_inserted(IntPtr proxy, IntPtr path);

		public static void Inserted(GLib.Object proxy, Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_row_reference_inserted(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_reordered(IntPtr proxy, IntPtr path, ref Gtk.TreeIter iter, out int new_order);

		public static int Reordered(GLib.Object proxy, Gtk.TreePath path, Gtk.TreeIter iter) {
			int new_order;
			Gtk.Application.AssertMainThread();
			gtk_tree_row_reference_reordered(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle, ref iter, out new_order);
			return new_order;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_row_reference_valid(IntPtr raw);

		public bool Valid() {
			bool raw_ret = gtk_tree_row_reference_valid(Handle);
			bool ret = raw_ret;
			return ret;
		}

		public TreeRowReference(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_new(IntPtr model, IntPtr path);

		public TreeRowReference (Gtk.TreeModel model, Gtk.TreePath path) 
		{
			Gtk.Application.AssertMainThread();
			Raw = gtk_tree_row_reference_new(model == null ? IntPtr.Zero : model.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_new_proxy(IntPtr proxy, IntPtr model, IntPtr path);

		public TreeRowReference (GLib.Object proxy, Gtk.TreeModel model, Gtk.TreePath path) 
		{
			Gtk.Application.AssertMainThread();
			Raw = gtk_tree_row_reference_new_proxy(proxy == null ? IntPtr.Zero : proxy.Handle, model == null ? IntPtr.Zero : model.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_tree_row_reference_free (raw);
		}

		[Obsolete("Gtk.TreeRowReference is now freed automatically")]
		public void Free () {}

#endregion
	}

	internal class TreeRowReferenceAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_row_reference_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
