// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ProgressBar]
	public class ProgressBar : Gtk.Widget {

		[Obsolete]
		protected ProgressBar(GLib.GType gtype) : base(gtype) {}
		public ProgressBar(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_new();

		public ProgressBar () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ProgressBar)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_progress_bar_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_new_with_adjustment(IntPtr adjustment);

		public ProgressBar (Gtk.Adjustment adjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ProgressBar)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (adjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("adjustment");
						vals[param_count++] = new GLib.Value (adjustment);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_progress_bar_new_with_adjustment(adjustment == null ? IntPtr.Zero : adjustment.Handle);
		}

		[GLib.Property ("adjustment")]
		public Gtk.Adjustment Adjustment {
			get {
				using (GLib.Value val = GetProperty ("adjustment")) {
					Gtk.Adjustment ret = (Gtk.Adjustment) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("adjustment", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_progress_bar_get_orientation(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.ProgressBarOrientation Orientation {
			get  {
				int raw_ret = gtk_progress_bar_get_orientation(Handle);
				Gtk.ProgressBarOrientation ret = (Gtk.ProgressBarOrientation) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_orientation(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_bar_style(IntPtr raw, int style);

		[Obsolete]
		[GLib.Property ("bar-style")]
		public Gtk.ProgressBarStyle BarStyle {
			get {
				using (GLib.Value val = GetProperty ("bar-style")) {
					Gtk.ProgressBarStyle ret = (Gtk.ProgressBarStyle) (Enum) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_bar_style(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_activity_step(IntPtr raw, uint step);

		[Obsolete]
		[GLib.Property ("activity-step")]
		public uint ActivityStep {
			get {
				using (GLib.Value val = GetProperty ("activity-step")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_activity_step(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_activity_blocks(IntPtr raw, uint blocks);

		[Obsolete]
		[GLib.Property ("activity-blocks")]
		public uint ActivityBlocks {
			get {
				using (GLib.Value val = GetProperty ("activity-blocks")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_activity_blocks(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_discrete_blocks(IntPtr raw, uint blocks);

		[Obsolete]
		[GLib.Property ("discrete-blocks")]
		public uint DiscreteBlocks {
			get {
				using (GLib.Value val = GetProperty ("discrete-blocks")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_discrete_blocks(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_fraction(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_fraction(IntPtr raw, double fraction);

		[GLib.Property ("fraction")]
		public double Fraction {
			get  {
				double raw_ret = gtk_progress_bar_get_fraction(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_fraction(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_pulse_step(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_pulse_step(IntPtr raw, double fraction);

		[GLib.Property ("pulse-step")]
		public double PulseStep {
			get  {
				double raw_ret = gtk_progress_bar_get_pulse_step(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_pulse_step(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_text(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get  {
				IntPtr raw_ret = gtk_progress_bar_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_progress_bar_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_progress_bar_get_ellipsize(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_ellipsize(IntPtr raw, int mode);

		[GLib.Property ("ellipsize")]
		public Pango.EllipsizeMode Ellipsize {
			get  {
				int raw_ret = gtk_progress_bar_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_progress_bar_set_ellipsize(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_progress_bar_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_pulse(IntPtr raw);

		public void Pulse() {
			gtk_progress_bar_pulse(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_update(IntPtr raw, double percentage);

		[Obsolete]
		public void Update(double percentage) {
			Gtk.Application.AssertMainThread();
			gtk_progress_bar_update(Handle, percentage);
		}

#endregion
	}

	internal class ProgressBarAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_progress_bar_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
