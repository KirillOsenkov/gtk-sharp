// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[AccelGroup]
	public class AccelGroup : GLib.Object {

		[Obsolete]
		protected AccelGroup(GLib.GType gtype) : base(gtype) {}
		public AccelGroup(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_new();

		public AccelGroup () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AccelGroup)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_accel_group_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AccelActivateVMDelegate (IntPtr accel_group, IntPtr acceleratable, uint keyval, int modifier);

		static AccelActivateVMDelegate AccelActivateVMCallback;

		static bool accelactivate_cb (IntPtr accel_group, IntPtr acceleratable, uint keyval, int modifier)
		{
			try {
				AccelGroup accel_group_managed = GLib.Object.GetObject (accel_group, false) as AccelGroup;
				return accel_group_managed.OnAccelActivate (GLib.Object.GetObject (acceleratable), keyval, (Gdk.ModifierType) modifier);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideAccelActivate (GLib.GType gtype)
		{
			if (AccelActivateVMCallback == null)
				AccelActivateVMCallback = new AccelActivateVMDelegate (accelactivate_cb);
			OverrideVirtualMethod (gtype, "accel_activate", AccelActivateVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AccelGroup), ConnectionMethod="OverrideAccelActivate")]
		protected virtual bool OnAccelActivate (GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier)
		{
			GLib.Value ret = new GLib		.Value (GLib.GType.Boolean);
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [4];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (acceleratable)) {
						using (inst_and_params [2] = new GLib.Value (keyval)) {
							using (inst_and_params [3] = new GLib.Value (modifier)) {
								g_signal_chain_from_overridden (inst_and_params, ref ret);
							}
						}
					}
				}
			}
			bool result = (bool) ret;
			ret.Dispose ();
			return result;
		}

		[GLib.Signal("accel_activate")]
		public event Gtk.AccelActivateHandler AccelActivate {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel_activate", typeof (Gtk.AccelActivateArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel_activate", typeof (Gtk.AccelActivateArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AccelChangedVMDelegate (IntPtr accel_group, uint keyval, int modifier, IntPtr accel_closure);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_accelgroup_override_accel_changed (IntPtr gtype, AccelChangedVMDelegate cb);

		static AccelChangedVMDelegate AccelChangedVMCallback;

		static void accelchanged_cb (IntPtr accel_group, uint keyval, int modifier, IntPtr accel_closure)
		{
			try {
				AccelGroup accel_group_managed = GLib.Object.GetObject (accel_group, false) as AccelGroup;
				accel_group_managed.OnAccelChanged (keyval, (Gdk.ModifierType) modifier, accel_closure);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAccelChanged (GLib.GType gtype)
		{
			if (AccelChangedVMCallback == null)
				AccelChangedVMCallback = new AccelChangedVMDelegate (accelchanged_cb);
			gtksharp_accelgroup_override_accel_changed (gtype.Val, AccelChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_accelgroup_base_accel_changed (IntPtr accel_group, uint keyval, int modifier, IntPtr accel_closure);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AccelGroup), ConnectionMethod="OverrideAccelChanged")]
		protected virtual void OnAccelChanged (uint keyval, Gdk.ModifierType modifier, IntPtr accel_closure)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_accelgroup_base_accel_changed (Handle, keyval, (int) modifier, accel_closure);
		}

		[GLib.Signal("accel_changed")]
		public event Gtk.AccelChangedHandler AccelChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel_changed", typeof (Gtk.AccelChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel_changed", typeof (Gtk.AccelChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_activate(IntPtr raw, int accel_quark, IntPtr acceleratable, uint accel_key, int accel_mods);

		public bool Activate(int accel_quark, GLib.Object acceleratable, uint accel_key, Gdk.ModifierType accel_mods) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_accel_group_activate(Handle, accel_quark, acceleratable == null ? IntPtr.Zero : acceleratable.Handle, accel_key, (int) accel_mods);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_connect(IntPtr raw, uint accel_key, int accel_mods, int accel_flags, IntPtr closure);

		public void Connect(uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags, IntPtr closure) {
			Gtk.Application.AssertMainThread();
			gtk_accel_group_connect(Handle, accel_key, (int) accel_mods, (int) accel_flags, closure);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_connect_by_path(IntPtr raw, IntPtr accel_path, IntPtr closure);

		public void ConnectByPath(string accel_path, IntPtr closure) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			gtk_accel_group_connect_by_path(Handle, native_accel_path, closure);
			GLib.Marshaller.Free (native_accel_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_disconnect(IntPtr raw, IntPtr closure);

		public bool Disconnect(IntPtr closure) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_accel_group_disconnect(Handle, closure);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_disconnect_key(IntPtr raw, uint accel_key, int accel_mods);

		public bool DisconnectKey(uint accel_key, Gdk.ModifierType accel_mods) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_accel_group_disconnect_key(Handle, accel_key, (int) accel_mods);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_find(IntPtr raw, GtkSharp.AccelGroupFindFuncNative find_func, IntPtr data);

		public Gtk.AccelKey Find(Gtk.AccelGroupFindFunc find_func) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (find_func);
			IntPtr raw_ret = gtk_accel_group_find(Handle, (find_func == null) ? null : GtkSharp.AccelGroupFindFuncWrapper.NativeDelegate, (IntPtr)gch);
			Gtk.AccelKey ret = Gtk.AccelKey.New (raw_ret);
			gch.Free();
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_from_accel_closure(IntPtr closure);

		public static Gtk.AccelGroup FromAccelClosure(IntPtr closure) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_accel_group_from_accel_closure(closure);
			Gtk.AccelGroup ret = GLib.Object.GetObject(raw_ret) as Gtk.AccelGroup;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_accel_group_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_lock(IntPtr raw);

		public void Lock() {
			gtk_accel_group_lock(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_query(IntPtr raw, uint accel_key, int accel_mods, out uint n_entries);

		public Gtk.AccelGroupEntry Query(uint accel_key, Gdk.ModifierType accel_mods, out uint n_entries) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_accel_group_query(Handle, accel_key, (int) accel_mods, out n_entries);
			Gtk.AccelGroupEntry ret = Gtk.AccelGroupEntry.New (raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_unlock(IntPtr raw);

		public void Unlock() {
			gtk_accel_group_unlock(Handle);
		}

#endregion
	}

	internal class AccelGroupAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_accel_group_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
