// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Draw {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_arrow(IntPtr style, IntPtr window, int state_type, int shadow_type, int arrow_type, bool fill, int x, int y, int width, int height);

		[Obsolete]
		public static void Arrow(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.ArrowType arrow_type, bool fill, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_arrow(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, (int) arrow_type, fill, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_box(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Box(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_box(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_box_gap(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width);

		[Obsolete]
		public static void BoxGap(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width) {
			Gtk.Application.AssertMainThread();
			gtk_draw_box_gap(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height, (int) gap_side, gap_x, gap_width);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_check(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Check(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_check(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_diamond(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Diamond(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_diamond(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_expander(IntPtr style, IntPtr window, int state_type, int x, int y, int expander_style);

		[Obsolete]
		public static void Expander(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, int x, int y, Gtk.ExpanderStyle expander_style) {
			Gtk.Application.AssertMainThread();
			gtk_draw_expander(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, x, y, (int) expander_style);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_extension(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height, int gap_side);

		[Obsolete]
		public static void Extension(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height, Gtk.PositionType gap_side) {
			Gtk.Application.AssertMainThread();
			gtk_draw_extension(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height, (int) gap_side);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_flat_box(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void FlatBox(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_flat_box(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_focus(IntPtr style, IntPtr window, int x, int y, int width, int height);

		[Obsolete]
		public static void Focus(Gtk.Style style, Gdk.Window window, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_focus(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_handle(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height, int orientation);

		[Obsolete]
		public static void Handle(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height, Gtk.Orientation orientation) {
			Gtk.Application.AssertMainThread();
			gtk_draw_handle(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height, (int) orientation);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_hline(IntPtr style, IntPtr window, int state_type, int x1, int x2, int y);

		[Obsolete]
		public static void Hline(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, int x1, int x2, int y) {
			Gtk.Application.AssertMainThread();
			gtk_draw_hline(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, x1, x2, y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_insertion_cursor(IntPtr widget, IntPtr drawable, ref Gdk.Rectangle area, ref Gdk.Rectangle location, bool is_primary, int direction, bool draw_arrow);

		public static void InsertionCursor(Gtk.Widget widget, Gdk.Drawable drawable, Gdk.Rectangle area, Gdk.Rectangle location, bool is_primary, Gtk.TextDirection direction, bool draw_arrow) {
			Gtk.Application.AssertMainThread();
			gtk_draw_insertion_cursor(widget == null ? IntPtr.Zero : widget.Handle, drawable == null ? IntPtr.Zero : drawable.Handle, ref area, ref location, is_primary, (int) direction, draw_arrow);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_layout(IntPtr style, IntPtr window, int state_type, bool use_text, int x, int y, IntPtr layout);

		[Obsolete]
		public static void Layout(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, bool use_text, int x, int y, Pango.Layout layout) {
			Gtk.Application.AssertMainThread();
			gtk_draw_layout(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, use_text, x, y, layout == null ? IntPtr.Zero : layout.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_option(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Option(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_option(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_polygon(IntPtr style, IntPtr window, int state_type, int shadow_type, ref Gdk.Point points, int npoints, bool fill);

		[Obsolete]
		public static void Polygon(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gdk.Point points, int npoints, bool fill) {
			Gtk.Application.AssertMainThread();
			gtk_draw_polygon(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, ref points, npoints, fill);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_resize_grip(IntPtr style, IntPtr window, int state_type, int edge, int x, int y, int width, int height);

		[Obsolete]
		public static void ResizeGrip(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gdk.WindowEdge edge, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_resize_grip(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) edge, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_shadow(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Shadow(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_shadow(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_shadow_gap(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width);

		[Obsolete]
		public static void ShadowGap(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width) {
			Gtk.Application.AssertMainThread();
			gtk_draw_shadow_gap(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height, (int) gap_side, gap_x, gap_width);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_slider(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height, int orientation);

		[Obsolete]
		public static void Slider(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height, Gtk.Orientation orientation) {
			Gtk.Application.AssertMainThread();
			gtk_draw_slider(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height, (int) orientation);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_string(IntPtr style, IntPtr window, int state_type, int x, int y, IntPtr str1ng);

		[Obsolete]
		public static void String(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, int x, int y, string str1ng) {
			Gtk.Application.AssertMainThread();
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			gtk_draw_string(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, x, y, native_str1ng);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_tab(IntPtr style, IntPtr window, int state_type, int shadow_type, int x, int y, int width, int height);

		[Obsolete]
		public static void Tab(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gtk.ShadowType shadow_type, int x, int y, int width, int height) {
			Gtk.Application.AssertMainThread();
			gtk_draw_tab(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, (int) shadow_type, x, y, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_draw_vline(IntPtr style, IntPtr window, int state_type, int y1_, int y2_, int x);

		[Obsolete]
		public static void Vline(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, int y1_, int y2_, int x) {
			Gtk.Application.AssertMainThread();
			gtk_draw_vline(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, y1_, y2_, x);
		}

#endregion
	}
}
