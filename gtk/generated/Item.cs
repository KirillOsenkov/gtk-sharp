// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Item]
	public class Item : Gtk.Bin {

		[Obsolete]
		protected Item(GLib.GType gtype) : base(gtype) {}
		public Item(IntPtr raw) : base(raw) {}

		protected Item() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectedVMDelegate (IntPtr item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_override_select (IntPtr gtype, SelectedVMDelegate cb);

		static SelectedVMDelegate SelectedVMCallback;

		static void selected_cb (IntPtr item)
		{
			try {
				Item item_managed = GLib.Object.GetObject (item, false) as Item;
				item_managed.OnSelected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelected (GLib.GType gtype)
		{
			if (SelectedVMCallback == null)
				SelectedVMCallback = new SelectedVMDelegate (selected_cb);
			gtksharp_item_override_select (gtype.Val, SelectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_base_select (IntPtr item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Item), ConnectionMethod="OverrideSelected")]
		protected virtual void OnSelected ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_item_base_select (Handle);
		}

		[GLib.Signal("select")]
		public event System.EventHandler Selected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeselectedVMDelegate (IntPtr item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_override_deselect (IntPtr gtype, DeselectedVMDelegate cb);

		static DeselectedVMDelegate DeselectedVMCallback;

		static void deselected_cb (IntPtr item)
		{
			try {
				Item item_managed = GLib.Object.GetObject (item, false) as Item;
				item_managed.OnDeselected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDeselected (GLib.GType gtype)
		{
			if (DeselectedVMCallback == null)
				DeselectedVMCallback = new DeselectedVMDelegate (deselected_cb);
			gtksharp_item_override_deselect (gtype.Val, DeselectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_base_deselect (IntPtr item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Item), ConnectionMethod="OverrideDeselected")]
		protected virtual void OnDeselected ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_item_base_deselect (Handle);
		}

		[GLib.Signal("deselect")]
		public event System.EventHandler Deselected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "deselect");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "deselect");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_override_toggle (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr item)
		{
			try {
				Item item_managed = GLib.Object.GetObject (item, false) as Item;
				item_managed.OnToggled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_item_override_toggle (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_item_base_toggle (IntPtr item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Item), ConnectionMethod="OverrideToggled")]
		protected virtual void OnToggled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_item_base_toggle (Handle);
		}

		[GLib.Signal("toggle")]
		public event System.EventHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_deselect(IntPtr raw);

		public void Deselect() {
			gtk_item_deselect(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factories_path_delete(IntPtr ifactory_path, IntPtr path);

		[Obsolete]
		public static void FactoriesPathDelete(string ifactory_path, string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_ifactory_path = GLib.Marshaller.StringToPtrGStrdup (ifactory_path);
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gtk_item_factories_path_delete(native_ifactory_path, native_path);
			GLib.Marshaller.Free (native_ifactory_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_select(IntPtr raw);

		public void Select() {
			gtk_item_select(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_toggle(IntPtr raw);

		public void Toggle() {
			gtk_item_toggle(Handle);
		}

#endregion
	}

	internal class ItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
