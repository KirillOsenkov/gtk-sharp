// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TextMark]
	public class TextMark : GLib.Object {

		[Obsolete]
		protected TextMark(GLib.GType gtype) : base(gtype) {}
		public TextMark(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_mark_new(IntPtr name, bool left_gravity);

		public TextMark (string name, bool left_gravity) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TextMark)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("name");
					vals[0] = new GLib.Value (name);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("left_gravity");
					vals[1] = new GLib.Value (left_gravity);
					CreateNativeObject (names, vals, 2);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			owned = true;
			Raw = gtk_text_mark_new(native_name, left_gravity);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_mark_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = gtk_text_mark_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_mark_get_left_gravity(IntPtr raw);

		[GLib.Property ("left-gravity")]
		public bool LeftGravity {
			get  {
				bool raw_ret = gtk_text_mark_get_left_gravity(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_mark_get_buffer(IntPtr raw);

		public Gtk.TextBuffer Buffer { 
			get {
				IntPtr raw_ret = gtk_text_mark_get_buffer(Handle);
				Gtk.TextBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.TextBuffer;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_mark_get_deleted(IntPtr raw);

		public bool Deleted { 
			get {
				bool raw_ret = gtk_text_mark_get_deleted(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_mark_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_text_mark_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_mark_get_visible(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_mark_set_visible(IntPtr raw, bool setting);

		public bool Visible { 
			get {
				bool raw_ret = gtk_text_mark_get_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_mark_set_visible(Handle, value);
			}
		}

#endregion
#region Customized extensions
#line 1 "TextMark.custom"
// Gtk.TextMark.custom - Gtk TextMark class customizations
//
// Author: Mike Kestner  (mkestner@novell.com)
//
// Copyright (C) 2007 Novell, Inc. 
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		protected TextMark () : base (IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}


#endregion
	}

	internal class TextMarkAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_mark_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_text_mark_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
