// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RecentFilter]
	public class RecentFilter : Gtk.Object {

		[Obsolete]
		protected RecentFilter(GLib.GType gtype) : base(gtype) {}
		public RecentFilter(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_new();

		public RecentFilter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RecentFilter)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_recent_filter_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_age(IntPtr raw, int days);

		public void AddAge(int days) {
			Gtk.Application.AssertMainThread();
			gtk_recent_filter_add_age(Handle, days);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_application(IntPtr raw, IntPtr application);

		public void AddApplication(string application) {
			Gtk.Application.AssertMainThread();
			IntPtr native_application = GLib.Marshaller.StringToPtrGStrdup (application);
			gtk_recent_filter_add_application(Handle, native_application);
			GLib.Marshaller.Free (native_application);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_custom(IntPtr raw, int needed, GtkSharp.RecentFilterFuncNative func, IntPtr data, GLib.DestroyNotify data_destroy);

		public void AddCustom(Gtk.RecentFilterFlags needed, Gtk.RecentFilterFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr data;
			GLib.DestroyNotify data_destroy;
			if (func == null) {
				data = IntPtr.Zero;
				data_destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func);
				data_destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_recent_filter_add_custom(Handle, (int) needed, (func == null) ? null : GtkSharp.RecentFilterFuncWrapper.NativeDelegate, data, data_destroy);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_group(IntPtr raw, IntPtr group);

		public void AddGroup(string group) {
			Gtk.Application.AssertMainThread();
			IntPtr native_group = GLib.Marshaller.StringToPtrGStrdup (group);
			gtk_recent_filter_add_group(Handle, native_group);
			GLib.Marshaller.Free (native_group);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_mime_type(IntPtr raw, IntPtr mime_type);

		public void AddMimeType(string mime_type) {
			Gtk.Application.AssertMainThread();
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			gtk_recent_filter_add_mime_type(Handle, native_mime_type);
			GLib.Marshaller.Free (native_mime_type);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_pattern(IntPtr raw, IntPtr pattern);

		public void AddPattern(string pattern) {
			Gtk.Application.AssertMainThread();
			IntPtr native_pattern = GLib.Marshaller.StringToPtrGStrdup (pattern);
			gtk_recent_filter_add_pattern(Handle, native_pattern);
			GLib.Marshaller.Free (native_pattern);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_add_pixbuf_formats(IntPtr raw);

		public void AddPixbufFormats() {
			gtk_recent_filter_add_pixbuf_formats(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_filter_filter(IntPtr raw, ref Gtk.RecentFilterInfo filter_info);

		public bool Filter(Gtk.RecentFilterInfo filter_info) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_recent_filter_filter(Handle, ref filter_info);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_get_name(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_filter_set_name(IntPtr raw, IntPtr name);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_recent_filter_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_recent_filter_set_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_filter_get_needed(IntPtr raw);

		public Gtk.RecentFilterFlags Needed { 
			get {
				int raw_ret = gtk_recent_filter_get_needed(Handle);
				Gtk.RecentFilterFlags ret = (Gtk.RecentFilterFlags) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_recent_filter_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class RecentFilterAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_filter_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_recent_filter_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
