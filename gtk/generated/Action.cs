// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Action]
	public class Action : GLib.Object {

		[Obsolete]
		protected Action(GLib.GType gtype) : base(gtype) {}
		public Action(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_new(IntPtr name, IntPtr label, IntPtr tooltip, IntPtr stock_id);

		public Action (string name, string label, string tooltip, string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Action)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[4];
					var names = stackalloc IntPtr[4];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("name");
					vals[0] = new GLib.Value (name);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[1] = new GLib.Value (label);
					names[2] = GLib.Marshaller.StringToPtrGStrdup ("tooltip");
					vals[2] = new GLib.Value (tooltip);
					names[3] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[3] = new GLib.Value (stock_id);
					CreateNativeObject (names, vals, 4);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_action_new(native_name, native_label, native_tooltip, native_stock_id);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_tooltip);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = gtk_action_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[GLib.Property ("label")]
		public string Label {
			get {
				using (GLib.Value val = GetProperty ("label")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("label", val);
				}
			}
		}

		[GLib.Property ("short-label")]
		public string ShortLabel {
			get {
				using (GLib.Value val = GetProperty ("short-label")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("short-label", val);
				}
			}
		}

		[GLib.Property ("tooltip")]
		public string Tooltip {
			get {
				using (GLib.Value val = GetProperty ("tooltip")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("tooltip", val);
				}
			}
		}

		[GLib.Property ("stock-id")]
		public string StockId {
			get {
				using (GLib.Value val = GetProperty ("stock-id")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("stock-id", val);
				}
			}
		}

		[GLib.Property ("icon-name")]
		public string IconName {
			get {
				using (GLib.Value val = GetProperty ("icon-name")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("icon-name", val);
				}
			}
		}

		[GLib.Property ("visible-horizontal")]
		public bool VisibleHorizontal {
			get {
				using (GLib.Value val = GetProperty ("visible-horizontal")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("visible-horizontal", val);
				}
			}
		}

		[GLib.Property ("visible-overflown")]
		public bool VisibleOverflown {
			get {
				using (GLib.Value val = GetProperty ("visible-overflown")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("visible-overflown", val);
				}
			}
		}

		[GLib.Property ("visible-vertical")]
		public bool VisibleVertical {
			get {
				using (GLib.Value val = GetProperty ("visible-vertical")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("visible-vertical", val);
				}
			}
		}

		[GLib.Property ("is-important")]
		public bool IsImportant {
			get {
				using (GLib.Value val = GetProperty ("is-important")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("is-important", val);
				}
			}
		}

		[GLib.Property ("hide-if-empty")]
		public bool HideIfEmpty {
			get {
				using (GLib.Value val = GetProperty ("hide-if-empty")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("hide-if-empty", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_action_get_sensitive(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_set_sensitive(IntPtr raw, bool sensitive);

		[GLib.Property ("sensitive")]
		public bool Sensitive {
			get  {
				bool raw_ret = gtk_action_get_sensitive(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_action_set_sensitive(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_action_get_visible(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_set_visible(IntPtr raw, bool visible);

		[GLib.Property ("visible")]
		public bool Visible {
			get  {
				bool raw_ret = gtk_action_get_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_action_set_visible(Handle, value);
			}
		}

		[GLib.Property ("action-group")]
		public Gtk.ActionGroup ActionGroup {
			get {
				using (GLib.Value val = GetProperty ("action-group")) {
					Gtk.ActionGroup ret = (Gtk.ActionGroup) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("action-group", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedVMDelegate (IntPtr action);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_action_override_activate (IntPtr gtype, ActivatedVMDelegate cb);

		static ActivatedVMDelegate ActivatedVMCallback;

		static void activated_cb (IntPtr action)
		{
			try {
				Action action_managed = GLib.Object.GetObject (action, false) as Action;
				action_managed.OnActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivated (GLib.GType gtype)
		{
			if (ActivatedVMCallback == null)
				ActivatedVMCallback = new ActivatedVMDelegate (activated_cb);
			gtksharp_action_override_activate (gtype.Val, ActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_action_base_activate (IntPtr action);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Action), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_action_base_activate (Handle);
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_activate(IntPtr raw);

		public void Activate() {
			gtk_action_activate(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_block_activate_from(IntPtr raw, IntPtr proxy);

		public void BlockActivateFrom(Gtk.Widget proxy) {
			Gtk.Application.AssertMainThread();
			gtk_action_block_activate_from(Handle, proxy == null ? IntPtr.Zero : proxy.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_connect_accelerator(IntPtr raw);

		public void ConnectAccelerator() {
			gtk_action_connect_accelerator(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_connect_proxy(IntPtr raw, IntPtr proxy);

		public void ConnectProxy(Gtk.Widget proxy) {
			Gtk.Application.AssertMainThread();
			gtk_action_connect_proxy(Handle, proxy == null ? IntPtr.Zero : proxy.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_create_icon(IntPtr raw, int icon_size);

		public Gtk.Widget CreateIcon(Gtk.IconSize icon_size) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_action_create_icon(Handle, (int) icon_size);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_create_menu(IntPtr raw);

		public Gtk.Widget CreateMenu() {
			IntPtr raw_ret = gtk_action_create_menu(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_create_menu_item(IntPtr raw);

		public Gtk.Widget CreateMenuItem() {
			IntPtr raw_ret = gtk_action_create_menu_item(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_create_tool_item(IntPtr raw);

		public Gtk.Widget CreateToolItem() {
			IntPtr raw_ret = gtk_action_create_tool_item(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_disconnect_accelerator(IntPtr raw);

		public void DisconnectAccelerator() {
			gtk_action_disconnect_accelerator(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_disconnect_proxy(IntPtr raw, IntPtr proxy);

		public void DisconnectProxy(Gtk.Widget proxy) {
			Gtk.Application.AssertMainThread();
			gtk_action_disconnect_proxy(Handle, proxy == null ? IntPtr.Zero : proxy.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_get_accel_path(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_set_accel_path(IntPtr raw, IntPtr accel_path);

		public string AccelPath { 
			get {
				IntPtr raw_ret = gtk_action_get_accel_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_action_set_accel_path(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_action_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_action_is_sensitive(IntPtr raw);

		public bool IsSensitive { 
			get {
				bool raw_ret = gtk_action_is_sensitive(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_action_is_visible(IntPtr raw);

		public bool IsVisible { 
			get {
				bool raw_ret = gtk_action_is_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_set_accel_group(IntPtr raw, IntPtr accel_group);

		public Gtk.AccelGroup AccelGroup { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_action_set_accel_group(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_action_unblock_activate_from(IntPtr raw, IntPtr proxy);

		public void UnblockActivateFrom(Gtk.Widget proxy) {
			Gtk.Application.AssertMainThread();
			gtk_action_unblock_activate_from(Handle, proxy == null ? IntPtr.Zero : proxy.Handle);
		}

#endregion
#region Customized extensions
#line 1 "Action.custom"
// Gtk.Action.custom - Gtk Action class customizations
//
// Author: John Luke  <john.luke@gmail.com>
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

	public Action (string name, string label) : this (name, label, null, null)
	{
	}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
        static extern IntPtr gtk_action_get_proxies (IntPtr raw);

        public Gtk.Widget[] Proxies {
            get {
                IntPtr raw_ret = gtk_action_get_proxies (Handle);
                GLib.SList list = new GLib.SList (raw_ret);
                return GLib.Marshaller.ListToArray<Widget> (list);
            }
        }

#endregion
	}

	internal class ActionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_action_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_action_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
