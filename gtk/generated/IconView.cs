// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[IconView]
	public class IconView : Gtk.Container, Gtk.CellLayout {

		[Obsolete]
		protected IconView(GLib.GType gtype) : base(gtype) {}
		public IconView(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_new();

		public IconView () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconView)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_icon_view_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_new_with_model(IntPtr model);

		public IconView (Gtk.TreeModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconView)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (model != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("model");
						vals[param_count++] = new GLib.Value (model);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_icon_view_new_with_model(model == null ? IntPtr.Zero : model.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_selection_mode(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_selection_mode(IntPtr raw, int mode);

		[GLib.Property ("selection-mode")]
		public Gtk.SelectionMode SelectionMode {
			get  {
				int raw_ret = gtk_icon_view_get_selection_mode(Handle);
				Gtk.SelectionMode ret = (Gtk.SelectionMode) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_selection_mode(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_pixbuf_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_pixbuf_column(IntPtr raw, int column);

		[GLib.Property ("pixbuf-column")]
		public int PixbufColumn {
			get  {
				int raw_ret = gtk_icon_view_get_pixbuf_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_pixbuf_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_text_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_text_column(IntPtr raw, int column);

		[GLib.Property ("text-column")]
		public int TextColumn {
			get  {
				int raw_ret = gtk_icon_view_get_text_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_text_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_markup_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_markup_column(IntPtr raw, int column);

		[GLib.Property ("markup-column")]
		public int MarkupColumn {
			get  {
				int raw_ret = gtk_icon_view_get_markup_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_markup_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_model(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_model(IntPtr raw, IntPtr model);

		[GLib.Property ("model")]
		public Gtk.TreeModel Model {
			get  {
				IntPtr raw_ret = gtk_icon_view_get_model(Handle);
				Gtk.TreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_model(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_columns(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_columns(IntPtr raw, int columns);

		[GLib.Property ("columns")]
		public int Columns {
			get  {
				int raw_ret = gtk_icon_view_get_columns(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_columns(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_item_width(IntPtr raw, int item_width);

		[GLib.Property ("item-width")]
		public int ItemWidth {
			get  {
				int raw_ret = gtk_icon_view_get_item_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_item_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_spacing(IntPtr raw, int spacing);

		[GLib.Property ("spacing")]
		public int Spacing {
			get  {
				int raw_ret = gtk_icon_view_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_row_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_row_spacing(IntPtr raw, int row_spacing);

		[GLib.Property ("row-spacing")]
		public int RowSpacing {
			get  {
				int raw_ret = gtk_icon_view_get_row_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_row_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_column_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_column_spacing(IntPtr raw, int column_spacing);

		[GLib.Property ("column-spacing")]
		public int ColumnSpacing {
			get  {
				int raw_ret = gtk_icon_view_get_column_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_column_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_margin(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_margin(IntPtr raw, int margin);

		[GLib.Property ("margin")]
		public int Margin {
			get  {
				int raw_ret = gtk_icon_view_get_margin(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_margin(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_orientation(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gtk_icon_view_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_orientation(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_reorderable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_reorderable(IntPtr raw, bool reorderable);

		[GLib.Property ("reorderable")]
		public bool Reorderable {
			get  {
				bool raw_ret = gtk_icon_view_get_reorderable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_reorderable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_tooltip_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_column(IntPtr raw, int column);

		[GLib.Property ("tooltip-column")]
		public int TooltipColumn {
			get  {
				int raw_ret = gtk_icon_view_get_tooltip_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_icon_view_set_tooltip_column(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ItemActivatedVMDelegate (IntPtr icon_view, IntPtr path);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_item_activated (IntPtr gtype, ItemActivatedVMDelegate cb);

		static ItemActivatedVMDelegate ItemActivatedVMCallback;

		static void itemactivated_cb (IntPtr icon_view, IntPtr path)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnItemActivated (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideItemActivated (GLib.GType gtype)
		{
			if (ItemActivatedVMCallback == null)
				ItemActivatedVMCallback = new ItemActivatedVMDelegate (itemactivated_cb);
			gtksharp_iconview_override_item_activated (gtype.Val, ItemActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_item_activated (IntPtr icon_view, IntPtr path);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideItemActivated")]
		protected virtual void OnItemActivated (Gtk.TreePath path)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_item_activated (Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[GLib.Signal("item_activated")]
		public event Gtk.ItemActivatedHandler ItemActivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "item_activated", typeof (Gtk.ItemActivatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "item_activated", typeof (Gtk.ItemActivatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionChangedVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_selection_changed (IntPtr gtype, SelectionChangedVMDelegate cb);

		static SelectionChangedVMDelegate SelectionChangedVMCallback;

		static void selectionchanged_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectionChanged (GLib.GType gtype)
		{
			if (SelectionChangedVMCallback == null)
				SelectionChangedVMCallback = new SelectionChangedVMDelegate (selectionchanged_cb);
			gtksharp_iconview_override_selection_changed (gtype.Val, SelectionChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_selection_changed (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideSelectionChanged")]
		protected virtual void OnSelectionChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_selection_changed (Handle);
		}

		[GLib.Signal("selection-changed")]
		public event System.EventHandler SelectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection-changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection-changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllSelectedVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_select_all (IntPtr gtype, AllSelectedVMDelegate cb);

		static AllSelectedVMDelegate AllSelectedVMCallback;

		static void allselected_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnAllSelected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAllSelected (GLib.GType gtype)
		{
			if (AllSelectedVMCallback == null)
				AllSelectedVMCallback = new AllSelectedVMDelegate (allselected_cb);
			gtksharp_iconview_override_select_all (gtype.Val, AllSelectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_select_all (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideAllSelected")]
		protected virtual void OnAllSelected ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_select_all (Handle);
		}

		[GLib.Signal("select_all")]
		public event System.EventHandler AllSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_all");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_all");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllUnselectedVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_unselect_all (IntPtr gtype, AllUnselectedVMDelegate cb);

		static AllUnselectedVMDelegate AllUnselectedVMCallback;

		static void allunselected_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnAllUnselected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAllUnselected (GLib.GType gtype)
		{
			if (AllUnselectedVMCallback == null)
				AllUnselectedVMCallback = new AllUnselectedVMDelegate (allunselected_cb);
			gtksharp_iconview_override_unselect_all (gtype.Val, AllUnselectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_unselect_all (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideAllUnselected")]
		protected virtual void OnAllUnselected ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_unselect_all (Handle);
		}

		[GLib.Signal("unselect_all")]
		public event System.EventHandler AllUnselected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unselect_all");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unselect_all");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectCursorItemVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_select_cursor_item (IntPtr gtype, SelectCursorItemVMDelegate cb);

		static SelectCursorItemVMDelegate SelectCursorItemVMCallback;

		static void selectcursoritem_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnSelectCursorItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectCursorItem (GLib.GType gtype)
		{
			if (SelectCursorItemVMCallback == null)
				SelectCursorItemVMCallback = new SelectCursorItemVMDelegate (selectcursoritem_cb);
			gtksharp_iconview_override_select_cursor_item (gtype.Val, SelectCursorItemVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_select_cursor_item (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideSelectCursorItem")]
		protected virtual void OnSelectCursorItem ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_select_cursor_item (Handle);
		}

		[GLib.Signal("select_cursor_item")]
		public event System.EventHandler SelectCursorItem {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_cursor_item");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_cursor_item");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleCursorItemVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_toggle_cursor_item (IntPtr gtype, ToggleCursorItemVMDelegate cb);

		static ToggleCursorItemVMDelegate ToggleCursorItemVMCallback;

		static void togglecursoritem_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				icon_view_managed.OnToggleCursorItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggleCursorItem (GLib.GType gtype)
		{
			if (ToggleCursorItemVMCallback == null)
				ToggleCursorItemVMCallback = new ToggleCursorItemVMDelegate (togglecursoritem_cb);
			gtksharp_iconview_override_toggle_cursor_item (gtype.Val, ToggleCursorItemVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_base_toggle_cursor_item (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideToggleCursorItem")]
		protected virtual void OnToggleCursorItem ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_iconview_base_toggle_cursor_item (Handle);
		}

		[GLib.Signal("toggle_cursor_item")]
		public event System.EventHandler ToggleCursorItem {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_cursor_item");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_cursor_item");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ActivateCursorItemVMDelegate (IntPtr icon_view);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_activate_cursor_item (IntPtr gtype, ActivateCursorItemVMDelegate cb);

		static ActivateCursorItemVMDelegate ActivateCursorItemVMCallback;

		static bool activatecursoritem_cb (IntPtr icon_view)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				return icon_view_managed.OnActivateCursorItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideActivateCursorItem (GLib.GType gtype)
		{
			if (ActivateCursorItemVMCallback == null)
				ActivateCursorItemVMCallback = new ActivateCursorItemVMDelegate (activatecursoritem_cb);
			gtksharp_iconview_override_activate_cursor_item (gtype.Val, ActivateCursorItemVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_iconview_base_activate_cursor_item (IntPtr icon_view);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideActivateCursorItem")]
		protected virtual bool OnActivateCursorItem ()
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_iconview_base_activate_cursor_item (Handle);
			return __ret;
		}

		[GLib.Signal("activate_cursor_item")]
		public event Gtk.ActivateCursorItemHandler ActivateCursorItem {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_cursor_item", typeof (Gtk.ActivateCursorItemArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_cursor_item", typeof (Gtk.ActivateCursorItemArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveCursorVMDelegate (IntPtr icon_view, int step, int count);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_iconview_override_move_cursor (IntPtr gtype, MoveCursorVMDelegate cb);

		static MoveCursorVMDelegate MoveCursorVMCallback;

		static bool movecursor_cb (IntPtr icon_view, int step, int count)
		{
			try {
				IconView icon_view_managed = GLib.Object.GetObject (icon_view, false) as IconView;
				return icon_view_managed.OnMoveCursor ((Gtk.MovementStep) step, count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideMoveCursor (GLib.GType gtype)
		{
			if (MoveCursorVMCallback == null)
				MoveCursorVMCallback = new MoveCursorVMDelegate (movecursor_cb);
			gtksharp_iconview_override_move_cursor (gtype.Val, MoveCursorVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_iconview_base_move_cursor (IntPtr icon_view, int step, int count);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideMoveCursor")]
		protected virtual bool OnMoveCursor (Gtk.MovementStep step, int count)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_iconview_base_move_cursor (Handle, (int) step, count);
			return __ret;
		}

		[GLib.Signal("move_cursor")]
		public event Gtk.MoveCursorHandler MoveCursor {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_cursor", typeof (Gtk.MoveCursorArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_cursor", typeof (Gtk.MoveCursorArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_convert_widget_to_bin_window_coords(IntPtr raw, int wx, int wy, out int bx, out int by);

		public void ConvertWidgetToBinWindowCoords(int wx, int wy, out int bx, out int by) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_convert_widget_to_bin_window_coords(Handle, wx, wy, out bx, out by);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_create_drag_icon(IntPtr raw, IntPtr path);

		public Gdk.Pixmap CreateDragIcon(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_icon_view_create_drag_icon(Handle, path == null ? IntPtr.Zero : path.Handle);
			Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixmap;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_enable_model_drag_dest(IntPtr raw, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragDest(Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_enable_model_drag_dest(Handle, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_enable_model_drag_source(IntPtr raw, int start_button_mask, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragSource(Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_enable_model_drag_source(Handle, (int) start_button_mask, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_cursor(IntPtr raw, out IntPtr path, out IntPtr cell);

		public bool GetCursor(out Gtk.TreePath path, out Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path;
			IntPtr native_cell;
			bool raw_ret = gtk_icon_view_get_cursor(Handle, out native_path, out native_cell);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			cell = GLib.Object.GetObject(native_cell) as Gtk.CellRenderer;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_dest_item_at_pos(IntPtr raw, int drag_x, int drag_y, out IntPtr path, out int pos);

		public bool GetDestItemAtPos(int drag_x, int drag_y, out Gtk.TreePath path, out Gtk.IconViewDropPosition pos) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path;
			int native_pos;
			bool raw_ret = gtk_icon_view_get_dest_item_at_pos(Handle, drag_x, drag_y, out native_path, out native_pos);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.IconViewDropPosition) native_pos;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_get_drag_dest_item(IntPtr raw, out IntPtr path, out int pos);

		public void GetDragDestItem(out Gtk.TreePath path, out Gtk.IconViewDropPosition pos) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path;
			int native_pos;
			gtk_icon_view_get_drag_dest_item(Handle, out native_path, out native_pos);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.IconViewDropPosition) native_pos;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_item_at_pos(IntPtr raw, int x, int y, out IntPtr path, out IntPtr cell);

		public bool GetItemAtPos(int x, int y, out Gtk.TreePath path, out Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path;
			IntPtr native_cell;
			bool raw_ret = gtk_icon_view_get_item_at_pos(Handle, x, y, out native_path, out native_cell);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			cell = GLib.Object.GetObject(native_cell) as Gtk.CellRenderer;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_path_at_pos(IntPtr raw, int x, int y);

		public Gtk.TreePath GetPathAtPos(int x, int y) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_icon_view_get_path_at_pos(Handle, x, y);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_selected_items(IntPtr raw);

		public Gtk.TreePath[] SelectedItems { 
			get {
				IntPtr raw_ret = gtk_icon_view_get_selected_items(Handle);
				Gtk.TreePath[] ret = GLib.Marshaller.ListPtrToArray<Gtk.TreePath> (raw_ret, typeof(GLib.List), true, true);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_tooltip_context(IntPtr raw, out int x, out int y, bool keyboard_tip, out IntPtr model, out IntPtr path, ref Gtk.TreeIter iter);

		public bool GetTooltipContext(out int x, out int y, bool keyboard_tip, out Gtk.TreeModel model, out Gtk.TreePath path, out Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			IntPtr native_model;
			IntPtr native_path;
			iter = new Gtk.TreeIter();
			bool raw_ret = gtk_icon_view_get_tooltip_context(Handle, out x, out y, keyboard_tip, out native_model, out native_path, ref iter);
			bool ret = raw_ret;
			model = Gtk.TreeModelAdapter.GetObject (native_model, false);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_icon_view_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_visible_range(IntPtr raw, out IntPtr start_path, out IntPtr end_path);

		public bool GetVisibleRange(out Gtk.TreePath start_path, out Gtk.TreePath end_path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_start_path;
			IntPtr native_end_path;
			bool raw_ret = gtk_icon_view_get_visible_range(Handle, out native_start_path, out native_end_path);
			bool ret = raw_ret;
			start_path = native_start_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_start_path, typeof (Gtk.TreePath), true);
			end_path = native_end_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_end_path, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_item_activated(IntPtr raw, IntPtr path);

		public void ActivateItem(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_item_activated(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_path_is_selected(IntPtr raw, IntPtr path);

		public bool PathIsSelected(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_icon_view_path_is_selected(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_select_all(IntPtr raw);

		public void SelectAll() {
			gtk_icon_view_select_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_select_path(IntPtr raw, IntPtr path);

		public void SelectPath(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_select_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_selected_foreach(IntPtr raw, GtkSharp.IconViewForeachFuncNative func, IntPtr data);

		public void SelectedForeach(Gtk.IconViewForeachFunc func) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (func);
			gtk_icon_view_selected_foreach(Handle, (func == null) ? null : GtkSharp.IconViewForeachFuncWrapper.NativeDelegate, (IntPtr)gch);
			gch.Free();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_cursor(IntPtr raw, IntPtr path, IntPtr cell, bool start_editing);

		public void SetCursor(Gtk.TreePath path, Gtk.CellRenderer cell, bool start_editing) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_set_cursor(Handle, path == null ? IntPtr.Zero : path.Handle, cell == null ? IntPtr.Zero : cell.Handle, start_editing);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_drag_dest_item(IntPtr raw, IntPtr path, int pos);

		public void SetDragDestItem(Gtk.TreePath path, Gtk.IconViewDropPosition pos) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_set_drag_dest_item(Handle, path == null ? IntPtr.Zero : path.Handle, (int) pos);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_cell(IntPtr raw, IntPtr tooltip, IntPtr path, IntPtr cell);

		public void SetTooltipCell(Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_set_tooltip_cell(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_item(IntPtr raw, IntPtr tooltip, IntPtr path);

		public void SetTooltipItem(Gtk.Tooltip tooltip, Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_set_tooltip_item(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unselect_all(IntPtr raw);

		public void UnselectAll() {
			gtk_icon_view_unselect_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unselect_path(IntPtr raw, IntPtr path);

		public void UnselectPath(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_icon_view_unselect_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unset_model_drag_dest(IntPtr raw);

		public void UnsetModelDragDest() {
			gtk_icon_view_unset_model_drag_dest(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unset_model_drag_source(IntPtr raw);

		public void UnsetModelDragSource() {
			gtk_icon_view_unset_model_drag_source(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_add_attribute(IntPtr raw, IntPtr cell, IntPtr attribute, int column);

		public void AddAttribute(Gtk.CellRenderer cell, string attribute, int column) {
			Gtk.Application.AssertMainThread();
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_layout_add_attribute(Handle, cell == null ? IntPtr.Zero : cell.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear(IntPtr raw);

		public void Clear() {
			gtk_cell_layout_clear(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear_attributes(IntPtr raw, IntPtr cell);

		public void ClearAttributes(Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_clear_attributes(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_cells(IntPtr raw);

		public Gtk.CellRenderer[] Cells { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_cells(Handle);
				Gtk.CellRenderer[] ret = GLib.Marshaller.ListPtrToArray<Gtk.CellRenderer> (raw_ret, typeof(GLib.List), true, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_end(IntPtr raw, IntPtr cell, bool expand);

		public void PackEnd(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_end(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_start(IntPtr raw, IntPtr cell, bool expand);

		public void PackStart(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_start(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_reorder(IntPtr raw, IntPtr cell, int position);

		public void Reorder(Gtk.CellRenderer cell, int position) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_reorder(Handle, cell == null ? IntPtr.Zero : cell.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_set_cell_data_func(IntPtr raw, IntPtr cell, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell, Gtk.CellLayoutDataFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_cell_layout_set_cell_data_func(Handle, cell == null ? IntPtr.Zero : cell.Handle, (func == null) ? null : GtkSharp.CellLayoutDataFuncWrapper.NativeDelegate, func_data, destroy);
		}

#endregion
#region Customized extensions
#line 1 "IconView.custom"
// IconView.custom - customizations to Gtk.IconView
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

#if GTK_SHARP_2_8

		public void SetAttributes (CellRenderer cell, params object[] attrs)
		{
			if (attrs.Length % 2 != 0)
				throw new ArgumentException ("attrs should contain pairs of attribute/col");

			ClearAttributes (cell);
			for (int i = 0; i < attrs.Length - 1; i += 2) {
				AddAttribute (cell, (string) attrs [i], (int) attrs [i + 1]);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_icon_view_scroll_to_path(IntPtr raw, IntPtr path, bool use_align, float row_align, float col_align);

		public void ScrollToPath (Gtk.TreePath path) 
		{
			gtk_icon_view_scroll_to_path(Handle, path == null ? IntPtr.Zero : path.Handle, false, 0.0f, 0.0f);
		}

		public void ScrollToPath (Gtk.TreePath path, float row_align, float col_align) 
		{
			gtk_icon_view_scroll_to_path(Handle, path == null ? IntPtr.Zero : path.Handle, true, row_align, col_align);
		}

#endif


#endregion
	}

	internal class IconViewAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_icon_view_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
