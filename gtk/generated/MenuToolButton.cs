// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[MenuToolButton]
	public class MenuToolButton : Gtk.ToolButton {

		[Obsolete]
		protected MenuToolButton(GLib.GType gtype) : base(gtype) {}
		public MenuToolButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_tool_button_new(IntPtr icon_widget, IntPtr label);

		public MenuToolButton (Gtk.Widget icon_widget, string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MenuToolButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (icon_widget != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("icon_widget");
						vals[param_count++] = new GLib.Value (icon_widget);
					}
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[param_count++] = new GLib.Value (label);
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_menu_tool_button_new(icon_widget == null ? IntPtr.Zero : icon_widget.Handle, native_label);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_tool_button_new_from_stock(IntPtr stock_id);

		public MenuToolButton (string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MenuToolButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[0] = new GLib.Value (stock_id);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_menu_tool_button_new_from_stock(native_stock_id);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_tool_button_get_menu(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_tool_button_set_menu(IntPtr raw, IntPtr menu);

		[GLib.Property ("menu")]
		public Gtk.Widget Menu {
			get  {
				IntPtr raw_ret = gtk_menu_tool_button_get_menu(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_menu_tool_button_set_menu(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowMenuVMDelegate (IntPtr button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menutoolbutton_override_show_menu (IntPtr gtype, ShowMenuVMDelegate cb);

		static ShowMenuVMDelegate ShowMenuVMCallback;

		static void showmenu_cb (IntPtr button)
		{
			try {
				MenuToolButton button_managed = GLib.Object.GetObject (button, false) as MenuToolButton;
				button_managed.OnShowMenu ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideShowMenu (GLib.GType gtype)
		{
			if (ShowMenuVMCallback == null)
				ShowMenuVMCallback = new ShowMenuVMDelegate (showmenu_cb);
			gtksharp_menutoolbutton_override_show_menu (gtype.Val, ShowMenuVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menutoolbutton_base_show_menu (IntPtr button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuToolButton), ConnectionMethod="OverrideShowMenu")]
		protected virtual void OnShowMenu ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menutoolbutton_base_show_menu (Handle);
		}

		[GLib.Signal("show-menu")]
		public event System.EventHandler ShowMenu {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show-menu");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show-menu");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_tool_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_menu_tool_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_tool_button_set_arrow_tooltip(IntPtr raw, IntPtr tooltips, IntPtr tip_text, IntPtr tip_private);

		[Obsolete]
		public void SetArrowTooltip(Gtk.Tooltips tooltips, string tip_text, string tip_private) {
			Gtk.Application.AssertMainThread();
			IntPtr native_tip_text = GLib.Marshaller.StringToPtrGStrdup (tip_text);
			IntPtr native_tip_private = GLib.Marshaller.StringToPtrGStrdup (tip_private);
			gtk_menu_tool_button_set_arrow_tooltip(Handle, tooltips == null ? IntPtr.Zero : tooltips.Handle, native_tip_text, native_tip_private);
			GLib.Marshaller.Free (native_tip_text);
			GLib.Marshaller.Free (native_tip_private);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_tool_button_set_arrow_tooltip_markup(IntPtr raw, IntPtr markup);

		public string ArrowTooltipMarkup { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_menu_tool_button_set_arrow_tooltip_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_tool_button_set_arrow_tooltip_text(IntPtr raw, IntPtr text);

		public string ArrowTooltipText { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_menu_tool_button_set_arrow_tooltip_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}

	internal class MenuToolButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_tool_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_menu_tool_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
