// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Expander]
	public class Expander : Gtk.Bin {

		[Obsolete]
		protected Expander(GLib.GType gtype) : base(gtype) {}
		public Expander(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_new(IntPtr label);

		public static Expander New(string label)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			Expander result = new Expander (gtk_expander_new(native_label));
			GLib.Marshaller.Free (native_label);
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_new_with_mnemonic(IntPtr label);

		public Expander (string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Expander)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[0] = new GLib.Value (label);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_expander_new_with_mnemonic(native_label);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_expander_get_expanded(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_expanded(IntPtr raw, bool expanded);

		[GLib.Property ("expanded")]
		public bool Expanded {
			get  {
				bool raw_ret = gtk_expander_get_expanded(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_expander_set_expanded(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_get_label(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_label(IntPtr raw, IntPtr label);

		[GLib.Property ("label")]
		public string Label {
			get  {
				IntPtr raw_ret = gtk_expander_get_label(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_expander_set_label(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_expander_get_use_underline(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_use_underline(IntPtr raw, bool use_underline);

		[GLib.Property ("use-underline")]
		public bool UseUnderline {
			get  {
				bool raw_ret = gtk_expander_get_use_underline(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_expander_set_use_underline(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_expander_get_use_markup(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_use_markup(IntPtr raw, bool use_markup);

		[GLib.Property ("use-markup")]
		public bool UseMarkup {
			get  {
				bool raw_ret = gtk_expander_get_use_markup(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_expander_set_use_markup(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_expander_get_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_spacing(IntPtr raw, int spacing);

		[GLib.Property ("spacing")]
		public int Spacing {
			get  {
				int raw_ret = gtk_expander_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_expander_set_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_get_label_widget(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_expander_set_label_widget(IntPtr raw, IntPtr label_widget);

		[GLib.Property ("label-widget")]
		public Gtk.Widget LabelWidget {
			get  {
				IntPtr raw_ret = gtk_expander_get_label_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_expander_set_label_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedVMDelegate (IntPtr expander);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_expander_override_activate (IntPtr gtype, ActivatedVMDelegate cb);

		static ActivatedVMDelegate ActivatedVMCallback;

		static void activated_cb (IntPtr expander)
		{
			try {
				Expander expander_managed = GLib.Object.GetObject (expander, false) as Expander;
				expander_managed.OnActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivated (GLib.GType gtype)
		{
			if (ActivatedVMCallback == null)
				ActivatedVMCallback = new ActivatedVMDelegate (activated_cb);
			gtksharp_expander_override_activate (gtype.Val, ActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_expander_base_activate (IntPtr expander);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Expander), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_expander_base_activate (Handle);
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_expander_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ExpanderAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_expander_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_expander_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
