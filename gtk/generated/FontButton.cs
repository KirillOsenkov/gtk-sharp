// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[FontButton]
	public class FontButton : Gtk.Button {

		[Obsolete]
		protected FontButton(GLib.GType gtype) : base(gtype) {}
		public FontButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_new();

		public FontButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FontButton)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_font_button_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_new_with_font(IntPtr fontname);

		public FontButton (string fontname) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FontButton)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_fontname = GLib.Marshaller.StringToPtrGStrdup (fontname);
			owned = true;
			Raw = gtk_font_button_new_with_font(native_fontname);
			GLib.Marshaller.Free (native_fontname);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_get_title(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_button_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_font_button_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_font_button_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_get_font_name(IntPtr raw);

		[GLib.Property ("font-name")]
		public string FontName {
			get  {
				IntPtr raw_ret = gtk_font_button_get_font_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("font-name", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_button_get_use_font(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_button_set_use_font(IntPtr raw, bool use_font);

		[GLib.Property ("use-font")]
		public bool UseFont {
			get  {
				bool raw_ret = gtk_font_button_get_use_font(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_font_button_set_use_font(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_button_get_use_size(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_button_set_use_size(IntPtr raw, bool use_size);

		[GLib.Property ("use-size")]
		public bool UseSize {
			get  {
				bool raw_ret = gtk_font_button_get_use_size(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_font_button_set_use_size(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_button_get_show_style(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_button_set_show_style(IntPtr raw, bool show_style);

		[GLib.Property ("show-style")]
		public bool ShowStyle {
			get  {
				bool raw_ret = gtk_font_button_get_show_style(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_font_button_set_show_style(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_button_get_show_size(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_button_set_show_size(IntPtr raw, bool show_size);

		[GLib.Property ("show-size")]
		public bool ShowSize {
			get  {
				bool raw_ret = gtk_font_button_get_show_size(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_font_button_set_show_size(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FontSetVMDelegate (IntPtr gfp);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_fontbutton_override_font_set (IntPtr gtype, FontSetVMDelegate cb);

		static FontSetVMDelegate FontSetVMCallback;

		static void fontset_cb (IntPtr gfp)
		{
			try {
				FontButton gfp_managed = GLib.Object.GetObject (gfp, false) as FontButton;
				gfp_managed.OnFontSet ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFontSet (GLib.GType gtype)
		{
			if (FontSetVMCallback == null)
				FontSetVMCallback = new FontSetVMDelegate (fontset_cb);
			gtksharp_fontbutton_override_font_set (gtype.Val, FontSetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_fontbutton_base_font_set (IntPtr gfp);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FontButton), ConnectionMethod="OverrideFontSet")]
		protected virtual void OnFontSet ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_fontbutton_base_font_set (Handle);
		}

		[GLib.Signal("font-set")]
		public event System.EventHandler FontSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "font-set");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "font-set");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_font_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_button_set_font_name(IntPtr raw, IntPtr fontname);

		public bool SetFontName(string fontname) {
			Gtk.Application.AssertMainThread();
			IntPtr native_fontname = GLib.Marshaller.StringToPtrGStrdup (fontname);
			bool raw_ret = gtk_font_button_set_font_name(Handle, native_fontname);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_fontname);
			return ret;
		}

#endregion
	}

	internal class FontButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_font_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
