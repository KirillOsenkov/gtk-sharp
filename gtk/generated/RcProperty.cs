// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[GLib.GTypeStruct]
	public struct RcProperty {

		public int TypeName;
		public int PropertyName;
		public string Origin;
		public GLib.Value Value;

		public static Gtk.RcProperty Zero = new Gtk.RcProperty ();

		public static Gtk.RcProperty New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.RcProperty.Zero;
			return Marshal.PtrToStructure<Gtk.RcProperty> (raw);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_property_parse_border(IntPtr pspec, IntPtr gstring, ref GLib.Value property_value);

		public static bool ParseBorder(IntPtr pspec, string gstring, GLib.Value property_value) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_rc_property_parse_border(pspec, new GLib.GString (gstring).Handle, ref property_value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_property_parse_color(IntPtr pspec, IntPtr gstring, ref GLib.Value property_value);

		public static bool ParseColor(IntPtr pspec, string gstring, GLib.Value property_value) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_rc_property_parse_color(pspec, new GLib.GString (gstring).Handle, ref property_value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_property_parse_enum(IntPtr pspec, IntPtr gstring, ref GLib.Value property_value);

		public static bool ParseEnum(IntPtr pspec, string gstring, GLib.Value property_value) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_rc_property_parse_enum(pspec, new GLib.GString (gstring).Handle, ref property_value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_property_parse_flags(IntPtr pspec, IntPtr gstring, ref GLib.Value property_value);

		public static bool ParseFlags(IntPtr pspec, string gstring, GLib.Value property_value) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_rc_property_parse_flags(pspec, new GLib.GString (gstring).Handle, ref property_value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_rc_property_parse_requisition(IntPtr pspec, IntPtr gstring, ref GLib.Value property_value);

		public static bool ParseRequisition(IntPtr pspec, string gstring, GLib.Value property_value) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_rc_property_parse_requisition(pspec, new GLib.GString (gstring).Handle, ref property_value);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
