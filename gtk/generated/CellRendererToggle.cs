// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[CellRendererToggle]
	public class CellRendererToggle : Gtk.CellRenderer {

		[Obsolete]
		protected CellRendererToggle(GLib.GType gtype) : base(gtype) {}
		public CellRendererToggle(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_toggle_new();

		public CellRendererToggle () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CellRendererToggle)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_cell_renderer_toggle_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_renderer_toggle_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_renderer_toggle_set_active(IntPtr raw, bool setting);

		[GLib.Property ("active")]
		public bool Active {
			get  {
				bool raw_ret = gtk_cell_renderer_toggle_get_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_cell_renderer_toggle_set_active(Handle, value);
			}
		}

		[GLib.Property ("inconsistent")]
		public bool Inconsistent {
			get {
				using (GLib.Value val = GetProperty ("inconsistent")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("inconsistent", val);
				}
			}
		}

		[GLib.Property ("activatable")]
		public bool Activatable {
			get {
				using (GLib.Value val = GetProperty ("activatable")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("activatable", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_renderer_toggle_get_radio(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_renderer_toggle_set_radio(IntPtr raw, bool radio);

		[GLib.Property ("radio")]
		public bool Radio {
			get  {
				bool raw_ret = gtk_cell_renderer_toggle_get_radio(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_cell_renderer_toggle_set_radio(Handle, value);
			}
		}

		[GLib.Property ("indicator-size")]
		public int IndicatorSize {
			get {
				using (GLib.Value val = GetProperty ("indicator-size")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("indicator-size", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr cell_renderer_toggle, IntPtr path);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrenderertoggle_override_toggled (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr cell_renderer_toggle, IntPtr path)
		{
			try {
				CellRendererToggle cell_renderer_toggle_managed = GLib.Object.GetObject (cell_renderer_toggle, false) as CellRendererToggle;
				cell_renderer_toggle_managed.OnToggled (GLib.Marshaller.Utf8PtrToString (path));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_cellrenderertoggle_override_toggled (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrenderertoggle_base_toggled (IntPtr cell_renderer_toggle, IntPtr path);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRendererToggle), ConnectionMethod="OverrideToggled")]
		protected virtual void OnToggled (string path)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gtksharp_cellrenderertoggle_base_toggled (Handle, native_path);
			GLib.Marshaller.Free (native_path);
		}

		[GLib.Signal("toggled")]
		public event Gtk.ToggledHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled", typeof (Gtk.ToggledArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled", typeof (Gtk.ToggledArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_toggle_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_toggle_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "CellRendererToggle.custom"
//
// CellRendererToggle.custom - Gtk CellRendererToggle class customizations
//
// Author: Peter Johanson <peter@peterjohanson.com>
//
// Copyright (C) 2007 Peter Johanson
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public override void GetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			CellRenderer.InternalGetSize (Gtk.CellRendererToggle.GType, this, widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		protected override void Render (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			CellRenderer.InternalRender (Gtk.CellRendererToggle.GType, this, window, widget, background_area, cell_area, expose_area, flags);
		}

		public override Gtk.CellEditable StartEditing(Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) 
		{
			return Gtk.CellRenderer.InternalStartEditing (Gtk.CellRendererToggle.GType, this, evnt, widget, path, ref background_area, ref cell_area, flags);
		}

#endregion
	}

	internal class CellRendererToggleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_toggle_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_toggle_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
