// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PrintOperationPreviewAdapter : GLib.GInterfaceAdapter, Gtk.PrintOperationPreview {

		static PrintOperationPreviewIface iface;

		struct PrintOperationPreviewIface {
			public IntPtr gtype;
			public IntPtr itype;

			public IntPtr ready;
			public IntPtr got_page_size;
			public RenderPageDelegate render_page;
			public IsSelectedDelegate is_selected;
			public EndPreviewDelegate end_preview;
		}

		static PrintOperationPreviewAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(PrintOperationPreviewAdapter));
			iface.render_page = new RenderPageDelegate (RenderPageCallback);
			iface.is_selected = new IsSelectedDelegate (IsSelectedCallback);
			iface.end_preview = new EndPreviewDelegate (EndPreviewCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderPageDelegate (IntPtr preview, int page_nr);

		static void RenderPageCallback (IntPtr preview, int page_nr)
		{
			try {
				Gtk.PrintOperationPreviewImplementor __obj = GLib.Object.GetObject (preview, false) as Gtk.PrintOperationPreviewImplementor;
				__obj.RenderPage (page_nr);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool IsSelectedDelegate (IntPtr preview, int page_nr);

		static bool IsSelectedCallback (IntPtr preview, int page_nr)
		{
			try {
				Gtk.PrintOperationPreviewImplementor __obj = GLib.Object.GetObject (preview, false) as Gtk.PrintOperationPreviewImplementor;
				bool __result = __obj.IsSelected (page_nr);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EndPreviewDelegate (IntPtr preview);

		static void EndPreviewCallback (IntPtr preview)
		{
			try {
				Gtk.PrintOperationPreviewImplementor __obj = GLib.Object.GetObject (preview, false) as Gtk.PrintOperationPreviewImplementor;
				__obj.EndPreview ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			PrintOperationPreviewIface native_iface = Marshal.PtrToStructure<PrintOperationPreviewIface> (ifaceptr);
			native_iface.render_page = iface.render_page;
			native_iface.is_selected = iface.is_selected;
			native_iface.end_preview = iface.end_preview;
			Marshal.StructureToPtr<PrintOperationPreviewIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public PrintOperationPreviewAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		PrintOperationPreviewImplementor implementor;

		public PrintOperationPreviewAdapter (PrintOperationPreviewImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public PrintOperationPreviewAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_preview_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_operation_preview_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static PrintOperationPreview GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static PrintOperationPreview GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is PrintOperationPreviewImplementor)
				return new PrintOperationPreviewAdapter (obj as PrintOperationPreviewImplementor);
			else if (obj as PrintOperationPreview == null)
				return new PrintOperationPreviewAdapter (obj.Handle);
			else
				return obj as PrintOperationPreview;
		}

		public PrintOperationPreviewImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("ready")]
		public event Gtk.ReadyHandler Ready {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "ready", typeof (Gtk.ReadyArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "ready", typeof (Gtk.ReadyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("got-page-size")]
		public event Gtk.GotPageSizeHandler GotPageSize {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "got-page-size", typeof (Gtk.GotPageSizeArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "got-page-size", typeof (Gtk.GotPageSizeArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_preview_end_preview(IntPtr raw);

		public void EndPreview() {
			gtk_print_operation_preview_end_preview(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_operation_preview_is_selected(IntPtr raw, int page_nr);

		public bool IsSelected(int page_nr) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_print_operation_preview_is_selected(Handle, page_nr);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_preview_render_page(IntPtr raw, int page_nr);

		public void RenderPage(int page_nr) {
			Gtk.Application.AssertMainThread();
			gtk_print_operation_preview_render_page(Handle, page_nr);
		}

#endregion
	}
}
