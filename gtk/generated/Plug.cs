// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Plug]
	public class Plug : Gtk.Window {

		[Obsolete]
		protected Plug(GLib.GType gtype) : base(gtype) {}
		public Plug(IntPtr raw) : base(raw) {}

		protected Plug() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[GLib.Property ("embedded")]
		public bool IsEmbedded {
			get {
				using (GLib.Value val = GetProperty ("embedded")) {
					bool ret = (bool) val;
					return ret;
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EmbeddedVMDelegate (IntPtr plug);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_plug_override_embedded (IntPtr gtype, EmbeddedVMDelegate cb);

		static EmbeddedVMDelegate EmbeddedVMCallback;

		static void embedded_cb (IntPtr plug)
		{
			try {
				Plug plug_managed = GLib.Object.GetObject (plug, false) as Plug;
				plug_managed.OnEmbedded ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEmbedded (GLib.GType gtype)
		{
			if (EmbeddedVMCallback == null)
				EmbeddedVMCallback = new EmbeddedVMDelegate (embedded_cb);
			gtksharp_plug_override_embedded (gtype.Val, EmbeddedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_plug_base_embedded (IntPtr plug);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Plug), ConnectionMethod="OverrideEmbedded")]
		protected virtual void OnEmbedded ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_plug_base_embedded (Handle);
		}

		[GLib.Signal("embedded")]
		public event System.EventHandler Embedded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "embedded");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "embedded");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_plug_construct(IntPtr raw, uint socket_id);

		public void Construct(uint socket_id) {
			Gtk.Application.AssertMainThread();
			gtk_plug_construct(Handle, socket_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_plug_construct_for_display(IntPtr raw, IntPtr display, uint socket_id);

		public void ConstructForDisplay(Gdk.Display display, uint socket_id) {
			Gtk.Application.AssertMainThread();
			gtk_plug_construct_for_display(Handle, display == null ? IntPtr.Zero : display.Handle, socket_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_plug_get_id(IntPtr raw);

		public uint Id { 
			get {
				uint raw_ret = gtk_plug_get_id(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_plug_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "Plug.custom"
// Gtk.Plug.custom - Gtk Plug class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_new(uint socket_id);

		public Plug (uint socket_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Plug)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				Construct (socket_id);
				return;
			}
			owned = true;
			Raw = gtk_plug_new(socket_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_new_for_display(IntPtr display, uint socket_id);

		public Plug (Gdk.Display display, uint socket_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Plug)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				ConstructForDisplay (display, socket_id);
				return;
			}
			owned = true;
			Raw = gtk_plug_new_for_display(display.Handle, socket_id);
		}


#endregion
	}

	internal class PlugAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_plug_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_plug_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
