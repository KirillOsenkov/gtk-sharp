// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RadioAction]
	public class RadioAction : Gtk.ToggleAction {

		[Obsolete]
		protected RadioAction(GLib.GType gtype) : base(gtype) {}
		public RadioAction(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_new(IntPtr name, IntPtr label, IntPtr tooltip, IntPtr stock_id, int value);

		public RadioAction (string name, string label, string tooltip, string stock_id, int value) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioAction)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[5];
					var names = stackalloc IntPtr[5];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("name");
					vals[0] = new GLib.Value (name);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[1] = new GLib.Value (label);
					names[2] = GLib.Marshaller.StringToPtrGStrdup ("tooltip");
					vals[2] = new GLib.Value (tooltip);
					names[3] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[3] = new GLib.Value (stock_id);
					names[4] = GLib.Marshaller.StringToPtrGStrdup ("value");
					vals[4] = new GLib.Value (value);
					CreateNativeObject (names, vals, 5);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_radio_action_new(native_name, native_label, native_tooltip, native_stock_id, value);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_tooltip);
			GLib.Marshaller.Free (native_stock_id);
		}

		[GLib.Property ("value")]
		public int Value {
			get {
				using (GLib.Value val = GetProperty ("value")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("value", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_get_group(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_action_set_group(IntPtr raw, IntPtr group);

		[GLib.Property ("group")]
		public GLib.SList Group {
			get  {
				IntPtr raw_ret = gtk_radio_action_get_group(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_radio_action_set_group(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_radio_action_get_current_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_action_set_current_value(IntPtr raw, int current_value);

		[GLib.Property ("current-value")]
		public int CurrentValue {
			get  {
				int raw_ret = gtk_radio_action_get_current_value(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_radio_action_set_current_value(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr action, IntPtr current);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_radioaction_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr action, IntPtr current)
		{
			try {
				RadioAction action_managed = GLib.Object.GetObject (action, false) as RadioAction;
				action_managed.OnChanged (GLib.Object.GetObject(current) as Gtk.RadioAction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_radioaction_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_radioaction_base_changed (IntPtr action, IntPtr current);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.RadioAction), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged (Gtk.RadioAction current)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_radioaction_base_changed (Handle, current == null ? IntPtr.Zero : current.Handle);
		}

		[GLib.Signal("changed")]
		public event Gtk.ChangedHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed", typeof (Gtk.ChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed", typeof (Gtk.ChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_radio_action_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class RadioActionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_action_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_radio_action_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
