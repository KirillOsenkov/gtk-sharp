// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[TextIter]
	public struct TextIter {

		private IntPtr _dummy1;
		private IntPtr _dummy2;
		private int dummy3;
		private int dummy4;
		private int dummy5;
		private int dummy6;
		private int dummy7;
		private int dummy8;
		private IntPtr _dummy9;
		private IntPtr _dummy10;
		private int dummy11;
		private int dummy12;
		private int dummy13;
		private IntPtr _dummy14;

		public static Gtk.TextIter Zero = new Gtk.TextIter ();

		public static Gtk.TextIter New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.TextIter.Zero;
			unsafe { return *(Gtk.TextIter*)raw; }
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_char(ref Gtk.TextIter raw);

		public bool BackwardChar() {
			bool raw_ret = gtk_text_iter_backward_char(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_chars(ref Gtk.TextIter raw, int count);

		public bool BackwardChars(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_chars(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_cursor_position(ref Gtk.TextIter raw);

		public bool BackwardCursorPosition() {
			bool raw_ret = gtk_text_iter_backward_cursor_position(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_cursor_positions(ref Gtk.TextIter raw, int count);

		public bool BackwardCursorPositions(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_cursor_positions(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_find_char(ref Gtk.TextIter raw, GtkSharp.TextCharPredicateNative pred, IntPtr user_data, ref Gtk.TextIter limit);

		public bool BackwardFindChar(Gtk.TextCharPredicate pred, Gtk.TextIter limit) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (pred);
			bool raw_ret = gtk_text_iter_backward_find_char(ref this, (pred == null) ? null : GtkSharp.TextCharPredicateWrapper.NativeDelegate, (IntPtr)gch, ref limit);
			bool ret = raw_ret;
			gch.Free();
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_line(ref Gtk.TextIter raw);

		public bool BackwardLine() {
			bool raw_ret = gtk_text_iter_backward_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_lines(ref Gtk.TextIter raw, int count);

		public bool BackwardLines(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_lines(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_search(ref Gtk.TextIter raw, IntPtr str, int flags, ref Gtk.TextIter match_start, ref Gtk.TextIter match_end, ref Gtk.TextIter limit);

		public bool BackwardSearch(string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter limit) {
			Gtk.Application.AssertMainThread();
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			match_start = new Gtk.TextIter();
			match_end = new Gtk.TextIter();
			bool raw_ret = gtk_text_iter_backward_search(ref this, native_str, (int) flags, ref match_start, ref match_end, ref limit);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_sentence_start(ref Gtk.TextIter raw);

		public bool BackwardSentenceStart() {
			bool raw_ret = gtk_text_iter_backward_sentence_start(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_sentence_starts(ref Gtk.TextIter raw, int count);

		public bool BackwardSentenceStarts(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_sentence_starts(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_to_tag_toggle(ref Gtk.TextIter raw, IntPtr tag);

		public bool BackwardToTagToggle(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_to_tag_toggle(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_cursor_position(ref Gtk.TextIter raw);

		public bool BackwardVisibleCursorPosition() {
			bool raw_ret = gtk_text_iter_backward_visible_cursor_position(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_cursor_positions(ref Gtk.TextIter raw, int count);

		public bool BackwardVisibleCursorPositions(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_visible_cursor_positions(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_line(ref Gtk.TextIter raw);

		public bool BackwardVisibleLine() {
			bool raw_ret = gtk_text_iter_backward_visible_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_lines(ref Gtk.TextIter raw, int count);

		public bool BackwardVisibleLines(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_visible_lines(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_word_start(ref Gtk.TextIter raw);

		public bool BackwardVisibleWordStart() {
			bool raw_ret = gtk_text_iter_backward_visible_word_start(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_visible_word_starts(ref Gtk.TextIter raw, int count);

		public bool BackwardVisibleWordStarts(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_visible_word_starts(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_word_start(ref Gtk.TextIter raw);

		public bool BackwardWordStart() {
			bool raw_ret = gtk_text_iter_backward_word_start(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_backward_word_starts(ref Gtk.TextIter raw, int count);

		public bool BackwardWordStarts(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_backward_word_starts(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_begins_tag(ref Gtk.TextIter raw, IntPtr tag);

		public bool BeginsTag(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_begins_tag(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_can_insert(ref Gtk.TextIter raw, bool default_editability);

		public bool CanInsert(bool default_editability) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_can_insert(ref this, default_editability);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_compare(ref Gtk.TextIter raw, ref Gtk.TextIter rhs);

		public int Compare(Gtk.TextIter rhs) {
			Gtk.Application.AssertMainThread();
			int raw_ret = gtk_text_iter_compare(ref this, ref rhs);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_editable(ref Gtk.TextIter raw, bool default_setting);

		public bool Editable(bool default_setting) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_editable(ref this, default_setting);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_ends_line(ref Gtk.TextIter raw);

		public bool EndsLine() {
			bool raw_ret = gtk_text_iter_ends_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_ends_sentence(ref Gtk.TextIter raw);

		public bool EndsSentence() {
			bool raw_ret = gtk_text_iter_ends_sentence(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_ends_tag(ref Gtk.TextIter raw, IntPtr tag);

		public bool EndsTag(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_ends_tag(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_ends_word(ref Gtk.TextIter raw);

		public bool EndsWord() {
			bool raw_ret = gtk_text_iter_ends_word(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_equal(ref Gtk.TextIter raw, ref Gtk.TextIter rhs);

		public bool Equal(Gtk.TextIter rhs) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_equal(ref this, ref rhs);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_char(ref Gtk.TextIter raw);

		public bool ForwardChar() {
			bool raw_ret = gtk_text_iter_forward_char(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_chars(ref Gtk.TextIter raw, int count);

		public bool ForwardChars(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_chars(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_cursor_position(ref Gtk.TextIter raw);

		public bool ForwardCursorPosition() {
			bool raw_ret = gtk_text_iter_forward_cursor_position(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_cursor_positions(ref Gtk.TextIter raw, int count);

		public bool ForwardCursorPositions(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_cursor_positions(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_find_char(ref Gtk.TextIter raw, GtkSharp.TextCharPredicateNative pred, IntPtr user_data, ref Gtk.TextIter limit);

		public bool ForwardFindChar(Gtk.TextCharPredicate pred, Gtk.TextIter limit) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (pred);
			bool raw_ret = gtk_text_iter_forward_find_char(ref this, (pred == null) ? null : GtkSharp.TextCharPredicateWrapper.NativeDelegate, (IntPtr)gch, ref limit);
			bool ret = raw_ret;
			gch.Free();
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_line(ref Gtk.TextIter raw);

		public bool ForwardLine() {
			bool raw_ret = gtk_text_iter_forward_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_lines(ref Gtk.TextIter raw, int count);

		public bool ForwardLines(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_lines(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_search(ref Gtk.TextIter raw, IntPtr str, int flags, ref Gtk.TextIter match_start, ref Gtk.TextIter match_end, ref Gtk.TextIter limit);

		public bool ForwardSearch(string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter limit) {
			Gtk.Application.AssertMainThread();
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			match_start = new Gtk.TextIter();
			match_end = new Gtk.TextIter();
			bool raw_ret = gtk_text_iter_forward_search(ref this, native_str, (int) flags, ref match_start, ref match_end, ref limit);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_sentence_end(ref Gtk.TextIter raw);

		public bool ForwardSentenceEnd() {
			bool raw_ret = gtk_text_iter_forward_sentence_end(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_sentence_ends(ref Gtk.TextIter raw, int count);

		public bool ForwardSentenceEnds(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_sentence_ends(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_forward_to_end(ref Gtk.TextIter raw);

		public void ForwardToEnd() {
			gtk_text_iter_forward_to_end(ref this);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_to_line_end(ref Gtk.TextIter raw);

		public bool ForwardToLineEnd() {
			bool raw_ret = gtk_text_iter_forward_to_line_end(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_to_tag_toggle(ref Gtk.TextIter raw, IntPtr tag);

		public bool ForwardToTagToggle(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_to_tag_toggle(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_cursor_position(ref Gtk.TextIter raw);

		public bool ForwardVisibleCursorPosition() {
			bool raw_ret = gtk_text_iter_forward_visible_cursor_position(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_cursor_positions(ref Gtk.TextIter raw, int count);

		public bool ForwardVisibleCursorPositions(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_visible_cursor_positions(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_line(ref Gtk.TextIter raw);

		public bool ForwardVisibleLine() {
			bool raw_ret = gtk_text_iter_forward_visible_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_lines(ref Gtk.TextIter raw, int count);

		public bool ForwardVisibleLines(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_visible_lines(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_word_end(ref Gtk.TextIter raw);

		public bool ForwardVisibleWordEnd() {
			bool raw_ret = gtk_text_iter_forward_visible_word_end(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_visible_word_ends(ref Gtk.TextIter raw, int count);

		public bool ForwardVisibleWordEnds(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_visible_word_ends(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_word_end(ref Gtk.TextIter raw);

		public bool ForwardWordEnd() {
			bool raw_ret = gtk_text_iter_forward_word_end(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_forward_word_ends(ref Gtk.TextIter raw, int count);

		public bool ForwardWordEnds(int count) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_forward_word_ends(ref this, count);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_get_attributes(ref Gtk.TextIter raw, IntPtr values);

		public bool GetAttributes(Gtk.TextAttributes values) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_get_attributes(ref this, values == null ? IntPtr.Zero : values.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_buffer(ref Gtk.TextIter raw);

		public Gtk.TextBuffer Buffer { 
			get {
				IntPtr raw_ret = gtk_text_iter_get_buffer(ref this);
				Gtk.TextBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.TextBuffer;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_bytes_in_line(ref Gtk.TextIter raw);

		public int BytesInLine { 
			get {
				int raw_ret = gtk_text_iter_get_bytes_in_line(ref this);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_chars_in_line(ref Gtk.TextIter raw);

		public int CharsInLine { 
			get {
				int raw_ret = gtk_text_iter_get_chars_in_line(ref this);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_child_anchor(ref Gtk.TextIter raw);

		public Gtk.TextChildAnchor ChildAnchor { 
			get {
				IntPtr raw_ret = gtk_text_iter_get_child_anchor(ref this);
				Gtk.TextChildAnchor ret = GLib.Object.GetObject(raw_ret) as Gtk.TextChildAnchor;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_language(ref Gtk.TextIter raw);

		public Pango.Language Language { 
			get {
				IntPtr raw_ret = gtk_text_iter_get_language(ref this);
				Pango.Language ret = raw_ret == IntPtr.Zero ? null : (Pango.Language) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Language), false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_line(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_line(ref Gtk.TextIter raw, int line_number);

		public int Line { 
			get {
				int raw_ret = gtk_text_iter_get_line(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_line(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_line_index(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_line_index(ref Gtk.TextIter raw, int byte_on_line);

		public int LineIndex { 
			get {
				int raw_ret = gtk_text_iter_get_line_index(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_line_index(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_line_offset(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_line_offset(ref Gtk.TextIter raw, int char_on_line);

		public int LineOffset { 
			get {
				int raw_ret = gtk_text_iter_get_line_offset(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_line_offset(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_offset(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_offset(ref Gtk.TextIter raw, int char_offset);

		public int Offset { 
			get {
				int raw_ret = gtk_text_iter_get_offset(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_offset(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_pixbuf(ref Gtk.TextIter raw);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gtk_text_iter_get_pixbuf(ref this);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_slice(ref Gtk.TextIter raw, ref Gtk.TextIter end);

		public string GetSlice(Gtk.TextIter end) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_text_iter_get_slice(ref this, ref end);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_text(ref Gtk.TextIter raw, ref Gtk.TextIter end);

		public string GetText(Gtk.TextIter end) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_text_iter_get_text(ref this, ref end);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_text_iter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_visible_line_index(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_visible_line_index(ref Gtk.TextIter raw, int byte_on_line);

		public int VisibleLineIndex { 
			get {
				int raw_ret = gtk_text_iter_get_visible_line_index(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_visible_line_index(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_visible_line_offset(ref Gtk.TextIter raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_set_visible_line_offset(ref Gtk.TextIter raw, int char_on_line);

		public int VisibleLineOffset { 
			get {
				int raw_ret = gtk_text_iter_get_visible_line_offset(ref this);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_text_iter_set_visible_line_offset(ref this, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_visible_slice(ref Gtk.TextIter raw, ref Gtk.TextIter end);

		public string GetVisibleSlice(Gtk.TextIter end) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_text_iter_get_visible_slice(ref this, ref end);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_visible_text(ref Gtk.TextIter raw, ref Gtk.TextIter end);

		public string GetVisibleText(Gtk.TextIter end) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_text_iter_get_visible_text(ref this, ref end);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_has_tag(ref Gtk.TextIter raw, IntPtr tag);

		public bool HasTag(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_has_tag(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_in_range(ref Gtk.TextIter raw, ref Gtk.TextIter start, ref Gtk.TextIter end);

		public bool InRange(Gtk.TextIter start, Gtk.TextIter end) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_in_range(ref this, ref start, ref end);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_inside_sentence(ref Gtk.TextIter raw);

		public bool InsideSentence() {
			bool raw_ret = gtk_text_iter_inside_sentence(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_inside_word(ref Gtk.TextIter raw);

		public bool InsideWord() {
			bool raw_ret = gtk_text_iter_inside_word(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_is_cursor_position(ref Gtk.TextIter raw);

		public bool IsCursorPosition { 
			get {
				bool raw_ret = gtk_text_iter_is_cursor_position(ref this);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_is_end(ref Gtk.TextIter raw);

		public bool IsEnd { 
			get {
				bool raw_ret = gtk_text_iter_is_end(ref this);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_is_start(ref Gtk.TextIter raw);

		public bool IsStart { 
			get {
				bool raw_ret = gtk_text_iter_is_start(ref this);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_iter_order(ref Gtk.TextIter raw, ref Gtk.TextIter second);

		public void Order(Gtk.TextIter second) {
			Gtk.Application.AssertMainThread();
			gtk_text_iter_order(ref this, ref second);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_starts_line(ref Gtk.TextIter raw);

		public bool StartsLine() {
			bool raw_ret = gtk_text_iter_starts_line(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_starts_sentence(ref Gtk.TextIter raw);

		public bool StartsSentence() {
			bool raw_ret = gtk_text_iter_starts_sentence(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_starts_word(ref Gtk.TextIter raw);

		public bool StartsWord() {
			bool raw_ret = gtk_text_iter_starts_word(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_iter_toggles_tag(ref Gtk.TextIter raw, IntPtr tag);

		public bool TogglesTag(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_iter_toggles_tag(ref this, tag == null ? IntPtr.Zero : tag.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Gtk.TextIter boxed);

		public static explicit operator GLib.Value (Gtk.TextIter boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (TextIterAttribute.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Gtk.TextIter (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}

		[Obsolete("This is a no-op")]
		public Gtk.TextIter Copy() {
			return this;
		}
#endregion
#region Customized extensions
#line 1 "TextIter.custom"
// TextIter.custom - customizations to Gtk.TextIter
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("glibsharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_unichar_to_utf8_string (int raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern int gtk_text_iter_get_char(ref Gtk.TextIter raw);

		public string Char { 
			get {
				IntPtr raw_ret = gtksharp_unichar_to_utf8_string (gtk_text_iter_get_char (ref this));
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_marks (ref TextIter iter);

		public TextMark[] Marks {
			get {
				IntPtr raw_ret = gtk_text_iter_get_marks (ref this);
				if (raw_ret == IntPtr.Zero)
					return new TextMark [0];
				return GLib.Marshaller.ListPtrToArray<TextMark> (raw_ret, typeof (GLib.SList), true, false);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_tags (ref TextIter iter);

		public TextTag[] Tags {
			get {
				IntPtr raw_ret = gtk_text_iter_get_tags (ref this);
				if (raw_ret == IntPtr.Zero)
					return new TextTag [0];
				return GLib.Marshaller.ListPtrToArray<TextTag> (raw_ret, typeof (GLib.SList), true, false);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_toggled_tags (ref TextIter iter, bool toggled_on);

		public TextTag[] GetToggledTags (bool toggled_on)
		{
			IntPtr raw_ret = gtk_text_iter_get_toggled_tags (ref this, toggled_on);
			if (raw_ret == IntPtr.Zero)
				return new TextTag [0];
				return GLib.Marshaller.ListPtrToArray<TextTag> (raw_ret, typeof (GLib.SList), true, false);
		}

		[Obsolete("Replaced by overload without IntPtr argument")]
		public bool ForwardFindChar (Gtk.TextCharPredicate pred, IntPtr user_data, Gtk.TextIter limit) {
			return ForwardFindChar (pred, limit);
		}

		[Obsolete("Replaced by overload without IntPtr argument")]
		public bool BackwardFindChar (Gtk.TextCharPredicate pred, IntPtr user_data, Gtk.TextIter limit) {
			return BackwardFindChar (pred, limit);
		}

#endregion
	}

	internal class TextIterAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_iter_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_text_iter_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
