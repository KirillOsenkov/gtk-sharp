// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TextTagTable]
	public class TextTagTable : GLib.Object {

		[Obsolete]
		protected TextTagTable(GLib.GType gtype) : base(gtype) {}
		public TextTagTable(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_table_new();

		public TextTagTable () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TextTagTable)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_text_tag_table_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TagChangedVMDelegate (IntPtr table, IntPtr tag, bool size_changed);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_override_tag_changed (IntPtr gtype, TagChangedVMDelegate cb);

		static TagChangedVMDelegate TagChangedVMCallback;

		static void tagchanged_cb (IntPtr table, IntPtr tag, bool size_changed)
		{
			try {
				TextTagTable table_managed = GLib.Object.GetObject (table, false) as TextTagTable;
				table_managed.OnTagChanged (GLib.Object.GetObject(tag) as Gtk.TextTag, size_changed);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTagChanged (GLib.GType gtype)
		{
			if (TagChangedVMCallback == null)
				TagChangedVMCallback = new TagChangedVMDelegate (tagchanged_cb);
			gtksharp_texttagtable_override_tag_changed (gtype.Val, TagChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_base_tag_changed (IntPtr table, IntPtr tag, bool size_changed);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextTagTable), ConnectionMethod="OverrideTagChanged")]
		protected virtual void OnTagChanged (Gtk.TextTag tag, bool size_changed)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_texttagtable_base_tag_changed (Handle, tag == null ? IntPtr.Zero : tag.Handle, size_changed);
		}

		[GLib.Signal("tag_changed")]
		public event Gtk.TagChangedHandler TagChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_changed", typeof (Gtk.TagChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_changed", typeof (Gtk.TagChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TagAddedVMDelegate (IntPtr table, IntPtr tag);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_override_tag_added (IntPtr gtype, TagAddedVMDelegate cb);

		static TagAddedVMDelegate TagAddedVMCallback;

		static void tagadded_cb (IntPtr table, IntPtr tag)
		{
			try {
				TextTagTable table_managed = GLib.Object.GetObject (table, false) as TextTagTable;
				table_managed.OnTagAdded (GLib.Object.GetObject(tag) as Gtk.TextTag);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTagAdded (GLib.GType gtype)
		{
			if (TagAddedVMCallback == null)
				TagAddedVMCallback = new TagAddedVMDelegate (tagadded_cb);
			gtksharp_texttagtable_override_tag_added (gtype.Val, TagAddedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_base_tag_added (IntPtr table, IntPtr tag);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextTagTable), ConnectionMethod="OverrideTagAdded")]
		protected virtual void OnTagAdded (Gtk.TextTag tag)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_texttagtable_base_tag_added (Handle, tag == null ? IntPtr.Zero : tag.Handle);
		}

		[GLib.Signal("tag_added")]
		public event Gtk.TagAddedHandler TagAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_added", typeof (Gtk.TagAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_added", typeof (Gtk.TagAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TagRemovedVMDelegate (IntPtr table, IntPtr tag);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_override_tag_removed (IntPtr gtype, TagRemovedVMDelegate cb);

		static TagRemovedVMDelegate TagRemovedVMCallback;

		static void tagremoved_cb (IntPtr table, IntPtr tag)
		{
			try {
				TextTagTable table_managed = GLib.Object.GetObject (table, false) as TextTagTable;
				table_managed.OnTagRemoved (GLib.Object.GetObject(tag) as Gtk.TextTag);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTagRemoved (GLib.GType gtype)
		{
			if (TagRemovedVMCallback == null)
				TagRemovedVMCallback = new TagRemovedVMDelegate (tagremoved_cb);
			gtksharp_texttagtable_override_tag_removed (gtype.Val, TagRemovedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttagtable_base_tag_removed (IntPtr table, IntPtr tag);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextTagTable), ConnectionMethod="OverrideTagRemoved")]
		protected virtual void OnTagRemoved (Gtk.TextTag tag)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_texttagtable_base_tag_removed (Handle, tag == null ? IntPtr.Zero : tag.Handle);
		}

		[GLib.Signal("tag_removed")]
		public event Gtk.TagRemovedHandler TagRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_removed", typeof (Gtk.TagRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_removed", typeof (Gtk.TagRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_tag_table_add(IntPtr raw, IntPtr tag);

		public void Add(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			gtk_text_tag_table_add(Handle, tag == null ? IntPtr.Zero : tag.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_tag_table_foreach(IntPtr raw, GtkSharp.TextTagTableForeachNative func, IntPtr data);

		public void Foreach(Gtk.TextTagTableForeach func) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (func);
			gtk_text_tag_table_foreach(Handle, (func == null) ? null : GtkSharp.TextTagTableForeachWrapper.NativeDelegate, (IntPtr)gch);
			gch.Free();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_tag_table_get_size(IntPtr raw);

		public int Size { 
			get {
				int raw_ret = gtk_text_tag_table_get_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_table_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_text_tag_table_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_table_lookup(IntPtr raw, IntPtr name);

		public Gtk.TextTag Lookup(string name) {
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_text_tag_table_lookup(Handle, native_name);
			Gtk.TextTag ret = GLib.Object.GetObject(raw_ret) as Gtk.TextTag;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_tag_table_remove(IntPtr raw, IntPtr tag);

		public void Remove(Gtk.TextTag tag) {
			Gtk.Application.AssertMainThread();
			gtk_text_tag_table_remove(Handle, tag == null ? IntPtr.Zero : tag.Handle);
		}

#endregion
	}

	internal class TextTagTableAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_table_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_text_tag_table_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
