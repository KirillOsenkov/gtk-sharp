// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PrintUnixDialog]
	public class PrintUnixDialog : Gtk.Dialog {

		[Obsolete]
		protected PrintUnixDialog(GLib.GType gtype) : base(gtype) {}
		public PrintUnixDialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_new(IntPtr title, IntPtr parent);

		public PrintUnixDialog (string title, Gtk.Window parent) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintUnixDialog)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("title");
					vals[param_count++] = new GLib.Value (title);
					if (parent != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("parent");
						vals[param_count++] = new GLib.Value (parent);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			owned = true;
			Raw = gtk_print_unix_dialog_new(native_title, parent == null ? IntPtr.Zero : parent.Handle);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_page_setup(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_page_setup(IntPtr raw, IntPtr page_setup);

		[GLib.Property ("page-setup")]
		public Gtk.PageSetup PageSetup {
			get  {
				IntPtr raw_ret = gtk_print_unix_dialog_get_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_unix_dialog_set_page_setup(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_unix_dialog_get_current_page(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_current_page(IntPtr raw, int current_page);

		[GLib.Property ("current-page")]
		public int CurrentPage {
			get  {
				int raw_ret = gtk_print_unix_dialog_get_current_page(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_unix_dialog_set_current_page(Handle, value);
			}
		}

		[GLib.Property ("print-settings")]
		public Gtk.PrintSettings PrintSettings {
			get {
				using (GLib.Value val = GetProperty ("print-settings")) {
					Gtk.PrintSettings ret = (Gtk.PrintSettings) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("print-settings", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_selected_printer(IntPtr raw);

		[GLib.Property ("selected-printer")]
		public Gtk.Printer SelectedPrinter {
			get  {
				IntPtr raw_ret = gtk_print_unix_dialog_get_selected_printer(Handle);
				Gtk.Printer ret = GLib.Object.GetObject(raw_ret) as Gtk.Printer;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_add_custom_tab(IntPtr raw, IntPtr child, IntPtr tab_label);

		public void AddCustomTab(Gtk.Widget child, Gtk.Widget tab_label) {
			Gtk.Application.AssertMainThread();
			gtk_print_unix_dialog_add_custom_tab(Handle, child == null ? IntPtr.Zero : child.Handle, tab_label == null ? IntPtr.Zero : tab_label.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_settings(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_settings(IntPtr raw, IntPtr settings);

		public new Gtk.PrintSettings Settings { 
			get {
				IntPtr raw_ret = gtk_print_unix_dialog_get_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_unix_dialog_set_settings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_print_unix_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_manual_capabilities(IntPtr raw, int capabilities);

		public Gtk.PrintCapabilities ManualCapabilities { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_unix_dialog_set_manual_capabilities(Handle, (int) value);
			}
		}

#endregion
	}

	internal class PrintUnixDialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_unix_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
