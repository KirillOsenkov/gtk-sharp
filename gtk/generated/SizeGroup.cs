// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SizeGroup]
	public class SizeGroup : GLib.Object {

		[Obsolete]
		protected SizeGroup(GLib.GType gtype) : base(gtype) {}
		public SizeGroup(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_size_group_new(int mode);

		public SizeGroup (Gtk.SizeGroupMode mode) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SizeGroup)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("mode");
					vals[0] = new GLib.Value (mode);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_size_group_new((int) mode);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_size_group_get_mode(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_size_group_set_mode(IntPtr raw, int mode);

		[GLib.Property ("mode")]
		public Gtk.SizeGroupMode Mode {
			get  {
				int raw_ret = gtk_size_group_get_mode(Handle);
				Gtk.SizeGroupMode ret = (Gtk.SizeGroupMode) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_size_group_set_mode(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_size_group_get_ignore_hidden(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_size_group_set_ignore_hidden(IntPtr raw, bool ignore_hidden);

		[GLib.Property ("ignore-hidden")]
		public bool IgnoreHidden {
			get  {
				bool raw_ret = gtk_size_group_get_ignore_hidden(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_size_group_set_ignore_hidden(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_size_group_get_widgets(IntPtr raw);

		public Gtk.Widget[] Widgets {
			get  {
				IntPtr raw_ret = gtk_size_group_get_widgets(Handle);
				Gtk.Widget[] ret = GLib.Marshaller.ListPtrToArray<Gtk.Widget> (raw_ret, typeof(GLib.SList), false, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_size_group_add_widget(IntPtr raw, IntPtr widget);

		public void AddWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			gtk_size_group_add_widget(Handle, widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_size_group_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_size_group_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_size_group_remove_widget(IntPtr raw, IntPtr widget);

		public void RemoveWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			gtk_size_group_remove_widget(Handle, widget == null ? IntPtr.Zero : widget.Handle);
		}

#endregion
	}

	internal class SizeGroupAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_size_group_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_size_group_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
