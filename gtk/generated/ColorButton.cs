// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ColorButton]
	public class ColorButton : Gtk.Button {

		[Obsolete]
		protected ColorButton(GLib.GType gtype) : base(gtype) {}
		public ColorButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_button_new();

		public ColorButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorButton)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_color_button_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_button_new_with_color(ref Gdk.Color color);

		public ColorButton (Gdk.Color color) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("color");
					vals[0] = new GLib.Value (color);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_color_button_new_with_color(ref color);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_color_button_get_use_alpha(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_button_set_use_alpha(IntPtr raw, bool use_alpha);

		[GLib.Property ("use-alpha")]
		public bool UseAlpha {
			get  {
				bool raw_ret = gtk_color_button_get_use_alpha(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_color_button_set_use_alpha(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_button_get_title(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_button_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_color_button_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_color_button_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_button_get_color(IntPtr raw, ref Gdk.Color color);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_button_set_color(IntPtr raw, ref Gdk.Color value);

		[GLib.Property ("color")]
		public Gdk.Color Color {
			get  {
				Gdk.Color color;
				Gtk.Application.AssertMainThread();
				color = new Gdk.Color();
				gtk_color_button_get_color(Handle, ref color);
				return color;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_color_button_set_color(Handle, ref value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort gtk_color_button_get_alpha(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_color_button_set_alpha(IntPtr raw, ushort alpha);

		[GLib.Property ("alpha")]
		public ushort Alpha {
			get  {
				ushort raw_ret = gtk_color_button_get_alpha(Handle);
				ushort ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_color_button_set_alpha(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColorSetVMDelegate (IntPtr cp);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_colorbutton_override_color_set (IntPtr gtype, ColorSetVMDelegate cb);

		static ColorSetVMDelegate ColorSetVMCallback;

		static void colorset_cb (IntPtr cp)
		{
			try {
				ColorButton cp_managed = GLib.Object.GetObject (cp, false) as ColorButton;
				cp_managed.OnColorSet ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideColorSet (GLib.GType gtype)
		{
			if (ColorSetVMCallback == null)
				ColorSetVMCallback = new ColorSetVMDelegate (colorset_cb);
			gtksharp_colorbutton_override_color_set (gtype.Val, ColorSetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_colorbutton_base_color_set (IntPtr cp);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ColorButton), ConnectionMethod="OverrideColorSet")]
		protected virtual void OnColorSet ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_colorbutton_base_color_set (Handle);
		}

		[GLib.Signal("color_set")]
		public event System.EventHandler ColorSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "color_set");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "color_set");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_color_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ColorButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_color_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_color_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
