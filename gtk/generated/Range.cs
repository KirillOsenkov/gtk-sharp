// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Range]
	public class Range : Gtk.Widget {

		[Obsolete]
		protected Range(GLib.GType gtype) : base(gtype) {}
		public Range(IntPtr raw) : base(raw) {}

		protected Range() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_update_policy(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_update_policy(IntPtr raw, int policy);

		[GLib.Property ("update-policy")]
		public Gtk.UpdateType UpdatePolicy {
			get  {
				int raw_ret = gtk_range_get_update_policy(Handle);
				Gtk.UpdateType ret = (Gtk.UpdateType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_update_policy(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_range_get_adjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_adjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("adjustment")]
		public Gtk.Adjustment Adjustment {
			get  {
				IntPtr raw_ret = gtk_range_get_adjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_adjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_inverted(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_inverted(IntPtr raw, bool setting);

		[GLib.Property ("inverted")]
		public bool Inverted {
			get  {
				bool raw_ret = gtk_range_get_inverted(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_inverted(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_lower_stepper_sensitivity(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_lower_stepper_sensitivity(IntPtr raw, int sensitivity);

		[GLib.Property ("lower-stepper-sensitivity")]
		public Gtk.SensitivityType LowerStepperSensitivity {
			get  {
				int raw_ret = gtk_range_get_lower_stepper_sensitivity(Handle);
				Gtk.SensitivityType ret = (Gtk.SensitivityType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_lower_stepper_sensitivity(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_range_get_upper_stepper_sensitivity(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_upper_stepper_sensitivity(IntPtr raw, int sensitivity);

		[GLib.Property ("upper-stepper-sensitivity")]
		public Gtk.SensitivityType UpperStepperSensitivity {
			get  {
				int raw_ret = gtk_range_get_upper_stepper_sensitivity(Handle);
				Gtk.SensitivityType ret = (Gtk.SensitivityType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_upper_stepper_sensitivity(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_show_fill_level(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_show_fill_level(IntPtr raw, bool show_fill_level);

		[GLib.Property ("show-fill-level")]
		public bool ShowFillLevel {
			get  {
				bool raw_ret = gtk_range_get_show_fill_level(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_show_fill_level(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_range_get_restrict_to_fill_level(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_restrict_to_fill_level(IntPtr raw, bool restrict_to_fill_level);

		[GLib.Property ("restrict-to-fill-level")]
		public bool RestrictToFillLevel {
			get  {
				bool raw_ret = gtk_range_get_restrict_to_fill_level(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_restrict_to_fill_level(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_range_get_fill_level(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_fill_level(IntPtr raw, double fill_level);

		[GLib.Property ("fill-level")]
		public double FillLevel {
			get  {
				double raw_ret = gtk_range_get_fill_level(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_range_set_fill_level(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ValueChangedVMDelegate (IntPtr range);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_override_value_changed (IntPtr gtype, ValueChangedVMDelegate cb);

		static ValueChangedVMDelegate ValueChangedVMCallback;

		static void valuechanged_cb (IntPtr range)
		{
			try {
				Range range_managed = GLib.Object.GetObject (range, false) as Range;
				range_managed.OnValueChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideValueChanged (GLib.GType gtype)
		{
			if (ValueChangedVMCallback == null)
				ValueChangedVMCallback = new ValueChangedVMDelegate (valuechanged_cb);
			gtksharp_range_override_value_changed (gtype.Val, ValueChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_base_value_changed (IntPtr range);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideValueChanged")]
		protected virtual void OnValueChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_range_base_value_changed (Handle);
		}

		[GLib.Signal("value_changed")]
		public event System.EventHandler ValueChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AdjustBoundsVMDelegate (IntPtr range, double new_value);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_override_adjust_bounds (IntPtr gtype, AdjustBoundsVMDelegate cb);

		static AdjustBoundsVMDelegate AdjustBoundsVMCallback;

		static void adjustbounds_cb (IntPtr range, double new_value)
		{
			try {
				Range range_managed = GLib.Object.GetObject (range, false) as Range;
				range_managed.OnAdjustBounds (new_value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAdjustBounds (GLib.GType gtype)
		{
			if (AdjustBoundsVMCallback == null)
				AdjustBoundsVMCallback = new AdjustBoundsVMDelegate (adjustbounds_cb);
			gtksharp_range_override_adjust_bounds (gtype.Val, AdjustBoundsVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_base_adjust_bounds (IntPtr range, double new_value);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideAdjustBounds")]
		protected virtual void OnAdjustBounds (double new_value)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_range_base_adjust_bounds (Handle, new_value);
		}

		[GLib.Signal("adjust_bounds")]
		public event Gtk.AdjustBoundsHandler AdjustBounds {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "adjust_bounds", typeof (Gtk.AdjustBoundsArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "adjust_bounds", typeof (Gtk.AdjustBoundsArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveSliderVMDelegate (IntPtr range, int scroll);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_override_move_slider (IntPtr gtype, MoveSliderVMDelegate cb);

		static MoveSliderVMDelegate MoveSliderVMCallback;

		static void moveslider_cb (IntPtr range, int scroll)
		{
			try {
				Range range_managed = GLib.Object.GetObject (range, false) as Range;
				range_managed.OnMoveSlider ((Gtk.ScrollType) scroll);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMoveSlider (GLib.GType gtype)
		{
			if (MoveSliderVMCallback == null)
				MoveSliderVMCallback = new MoveSliderVMDelegate (moveslider_cb);
			gtksharp_range_override_move_slider (gtype.Val, MoveSliderVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_base_move_slider (IntPtr range, int scroll);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideMoveSlider")]
		protected virtual void OnMoveSlider (Gtk.ScrollType scroll)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_range_base_move_slider (Handle, (int) scroll);
		}

		[GLib.Signal("move_slider")]
		public event Gtk.MoveSliderHandler MoveSlider {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_slider", typeof (Gtk.MoveSliderArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_slider", typeof (Gtk.MoveSliderArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ChangeValueVMDelegate (IntPtr range, int scroll, double new_value);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_range_override_change_value (IntPtr gtype, ChangeValueVMDelegate cb);

		static ChangeValueVMDelegate ChangeValueVMCallback;

		static bool changevalue_cb (IntPtr range, int scroll, double new_value)
		{
			try {
				Range range_managed = GLib.Object.GetObject (range, false) as Range;
				return range_managed.OnChangeValue ((Gtk.ScrollType) scroll, new_value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideChangeValue (GLib.GType gtype)
		{
			if (ChangeValueVMCallback == null)
				ChangeValueVMCallback = new ChangeValueVMDelegate (changevalue_cb);
			gtksharp_range_override_change_value (gtype.Val, ChangeValueVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_range_base_change_value (IntPtr range, int scroll, double new_value);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Range), ConnectionMethod="OverrideChangeValue")]
		protected virtual bool OnChangeValue (Gtk.ScrollType scroll, double new_value)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_range_base_change_value (Handle, (int) scroll, new_value);
			return __ret;
		}

		[GLib.Signal("change_value")]
		public event Gtk.ChangeValueHandler ChangeValue {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "change_value", typeof (Gtk.ChangeValueArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "change_value", typeof (Gtk.ChangeValueArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_range_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_range_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_range_get_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_value(IntPtr raw, double value);

		public double Value { 
			get {
				double raw_ret = gtk_range_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_range_set_value(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_increments(IntPtr raw, double step, double page);

		public void SetIncrements(double step, double page) {
			Gtk.Application.AssertMainThread();
			gtk_range_set_increments(Handle, step, page);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_range_set_range(IntPtr raw, double min, double max);

		public void SetRange(double min, double max) {
			Gtk.Application.AssertMainThread();
			gtk_range_set_range(Handle, min, max);
		}

#endregion
	}

	internal class RangeAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_range_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_range_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
