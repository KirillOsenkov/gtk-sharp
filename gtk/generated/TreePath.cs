// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TreePath]
	public class TreePath : GLib.Opaque {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_path_append_index(IntPtr raw, int index_);

		public void AppendIndex(int index_) {
			Gtk.Application.AssertMainThread();
			gtk_tree_path_append_index(Handle, index_);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_path_compare(IntPtr raw, IntPtr b);

		public int Compare(Gtk.TreePath b) {
			Gtk.Application.AssertMainThread();
			int raw_ret = gtk_tree_path_compare(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_copy(IntPtr raw);

		public Gtk.TreePath Copy() {
			IntPtr raw_ret = gtk_tree_path_copy(Handle);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_path_down(IntPtr raw);

		public void Down() {
			gtk_tree_path_down(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_path_get_depth(IntPtr raw);

		public int Depth { 
			get {
				int raw_ret = gtk_tree_path_get_depth(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tree_path_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_path_is_ancestor(IntPtr raw, IntPtr descendant);

		public bool IsAncestor(Gtk.TreePath descendant) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_path_is_ancestor(Handle, descendant == null ? IntPtr.Zero : descendant.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_path_is_descendant(IntPtr raw, IntPtr ancestor);

		public bool IsDescendant(Gtk.TreePath ancestor) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_path_is_descendant(Handle, ancestor == null ? IntPtr.Zero : ancestor.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_path_next(IntPtr raw);

		public void Next() {
			gtk_tree_path_next(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_path_prepend_index(IntPtr raw, int index_);

		public void PrependIndex(int index_) {
			Gtk.Application.AssertMainThread();
			gtk_tree_path_prepend_index(Handle, index_);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_path_prev(IntPtr raw);

		public bool Prev() {
			bool raw_ret = gtk_tree_path_prev(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = gtk_tree_path_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_path_up(IntPtr raw);

		public bool Up() {
			bool raw_ret = gtk_tree_path_up(Handle);
			bool ret = raw_ret;
			return ret;
		}

		public TreePath(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_new();

		public TreePath () 
		{
			Raw = gtk_tree_path_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_new_first();

		public static TreePath NewFirst()
		{
			TreePath result = new TreePath (gtk_tree_path_new_first());
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_new_from_string(IntPtr path);

		public TreePath (string path) 
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			Raw = gtk_tree_path_new_from_string(native_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_path_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_tree_path_free (raw);
		}

		[Obsolete("Gtk.TreePath is now freed automatically")]
		public void Free () {}

#endregion
#region Customized extensions
#line 1 "TreePath.custom"
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		// Patch submitted by malte on bug #49518
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_get_indices(IntPtr raw);

		public int [] Indices { 
			get {
				IntPtr ptr = gtk_tree_path_get_indices(Handle);
				int [] arr = new int [Depth];
				Marshal.Copy (ptr, arr, 0, Depth);
				return arr;
			}
		}

		public TreePath (int[] indices) : this ()
		{
			foreach (int i in indices)
				AppendIndex (i);
		}

		public override bool Equals (object o)
		{
			if (!(o is TreePath))
				return false;

			return (Compare (o as TreePath) == 0);
		}

#endregion
	}

	internal class TreePathAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_path_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_path_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
