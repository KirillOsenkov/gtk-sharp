// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[MenuShell]
	public class MenuShell : Gtk.Container {

		[Obsolete]
		protected MenuShell(GLib.GType gtype) : base(gtype) {}
		public MenuShell(IntPtr raw) : base(raw) {}

		protected MenuShell() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_menu_shell_get_take_focus(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_set_take_focus(IntPtr raw, bool take_focus);

		[GLib.Property ("take-focus")]
		public bool TakeFocus {
			get  {
				bool raw_ret = gtk_menu_shell_get_take_focus(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_menu_shell_set_take_focus(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeactivatedVMDelegate (IntPtr menu_shell);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_deactivate (IntPtr gtype, DeactivatedVMDelegate cb);

		static DeactivatedVMDelegate DeactivatedVMCallback;

		static void deactivated_cb (IntPtr menu_shell)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				menu_shell_managed.OnDeactivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDeactivated (GLib.GType gtype)
		{
			if (DeactivatedVMCallback == null)
				DeactivatedVMCallback = new DeactivatedVMDelegate (deactivated_cb);
			gtksharp_menushell_override_deactivate (gtype.Val, DeactivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_base_deactivate (IntPtr menu_shell);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideDeactivated")]
		protected virtual void OnDeactivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menushell_base_deactivate (Handle);
		}

		[GLib.Signal("deactivate")]
		public event System.EventHandler Deactivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "deactivate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "deactivate");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionDoneVMDelegate (IntPtr menu_shell);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_selection_done (IntPtr gtype, SelectionDoneVMDelegate cb);

		static SelectionDoneVMDelegate SelectionDoneVMCallback;

		static void selectiondone_cb (IntPtr menu_shell)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				menu_shell_managed.OnSelectionDone ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectionDone (GLib.GType gtype)
		{
			if (SelectionDoneVMCallback == null)
				SelectionDoneVMCallback = new SelectionDoneVMDelegate (selectiondone_cb);
			gtksharp_menushell_override_selection_done (gtype.Val, SelectionDoneVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_base_selection_done (IntPtr menu_shell);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideSelectionDone")]
		protected virtual void OnSelectionDone ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menushell_base_selection_done (Handle);
		}

		[GLib.Signal("selection-done")]
		public event System.EventHandler SelectionDone {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection-done");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection-done");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveCurrentVMDelegate (IntPtr menu_shell, int direction);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_move_current (IntPtr gtype, MoveCurrentVMDelegate cb);

		static MoveCurrentVMDelegate MoveCurrentVMCallback;

		static void movecurrent_cb (IntPtr menu_shell, int direction)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				menu_shell_managed.OnMoveCurrent ((Gtk.MenuDirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMoveCurrent (GLib.GType gtype)
		{
			if (MoveCurrentVMCallback == null)
				MoveCurrentVMCallback = new MoveCurrentVMDelegate (movecurrent_cb);
			gtksharp_menushell_override_move_current (gtype.Val, MoveCurrentVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_base_move_current (IntPtr menu_shell, int direction);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideMoveCurrent")]
		protected virtual void OnMoveCurrent (Gtk.MenuDirectionType direction)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menushell_base_move_current (Handle, (int) direction);
		}

		[GLib.Signal("move_current")]
		public event Gtk.MoveCurrentHandler MoveCurrent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_current", typeof (Gtk.MoveCurrentArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_current", typeof (Gtk.MoveCurrentArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateCurrentVMDelegate (IntPtr menu_shell, bool force_hide);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_activate_current (IntPtr gtype, ActivateCurrentVMDelegate cb);

		static ActivateCurrentVMDelegate ActivateCurrentVMCallback;

		static void activatecurrent_cb (IntPtr menu_shell, bool force_hide)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				menu_shell_managed.OnActivateCurrent (force_hide);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivateCurrent (GLib.GType gtype)
		{
			if (ActivateCurrentVMCallback == null)
				ActivateCurrentVMCallback = new ActivateCurrentVMDelegate (activatecurrent_cb);
			gtksharp_menushell_override_activate_current (gtype.Val, ActivateCurrentVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_base_activate_current (IntPtr menu_shell, bool force_hide);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideActivateCurrent")]
		protected virtual void OnActivateCurrent (bool force_hide)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menushell_base_activate_current (Handle, force_hide);
		}

		[GLib.Signal("activate_current")]
		public event Gtk.ActivateCurrentHandler ActivateCurrent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_current", typeof (Gtk.ActivateCurrentArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_current", typeof (Gtk.ActivateCurrentArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanceledVMDelegate (IntPtr menu_shell);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_cancel (IntPtr gtype, CanceledVMDelegate cb);

		static CanceledVMDelegate CanceledVMCallback;

		static void canceled_cb (IntPtr menu_shell)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				menu_shell_managed.OnCanceled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCanceled (GLib.GType gtype)
		{
			if (CanceledVMCallback == null)
				CanceledVMCallback = new CanceledVMDelegate (canceled_cb);
			gtksharp_menushell_override_cancel (gtype.Val, CanceledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_base_cancel (IntPtr menu_shell);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideCanceled")]
		protected virtual void OnCanceled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menushell_base_cancel (Handle);
		}

		[GLib.Signal("cancel")]
		public event System.EventHandler Canceled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cancel");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cancel");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FocusCycledVMDelegate (IntPtr inst, int p0);

		static FocusCycledVMDelegate FocusCycledVMCallback;

		static void focuscycled_cb (IntPtr inst, int p0)
		{
			try {
				MenuShell inst_managed = GLib.Object.GetObject (inst, false) as MenuShell;
				inst_managed.OnFocusCycled ((Gtk.DirectionType) p0);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFocusCycled (GLib.GType gtype)
		{
			if (FocusCycledVMCallback == null)
				FocusCycledVMCallback = new FocusCycledVMDelegate (focuscycled_cb);
			OverrideVirtualMethod (gtype, "cycle_focus", FocusCycledVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideFocusCycled")]
		protected virtual void OnFocusCycled (Gtk.DirectionType p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (p0)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("cycle_focus")]
		public event Gtk.FocusCycledHandler FocusCycled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cycle_focus", typeof (Gtk.FocusCycledArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cycle_focus", typeof (Gtk.FocusCycledArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveSelectedVMDelegate (IntPtr menu_shell, int distance);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menushell_override_move_selected (IntPtr gtype, MoveSelectedVMDelegate cb);

		static MoveSelectedVMDelegate MoveSelectedVMCallback;

		static bool moveselected_cb (IntPtr menu_shell, int distance)
		{
			try {
				MenuShell menu_shell_managed = GLib.Object.GetObject (menu_shell, false) as MenuShell;
				return menu_shell_managed.OnMoveSelected (distance);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideMoveSelected (GLib.GType gtype)
		{
			if (MoveSelectedVMCallback == null)
				MoveSelectedVMCallback = new MoveSelectedVMDelegate (moveselected_cb);
			gtksharp_menushell_override_move_selected (gtype.Val, MoveSelectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_menushell_base_move_selected (IntPtr menu_shell, int distance);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuShell), ConnectionMethod="OverrideMoveSelected")]
		protected virtual bool OnMoveSelected (int distance)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_menushell_base_move_selected (Handle, distance);
			return __ret;
		}

		[GLib.Signal("move_selected")]
		public event Gtk.MoveSelectedHandler MoveSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_selected", typeof (Gtk.MoveSelectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_selected", typeof (Gtk.MoveSelectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_activate_item(IntPtr raw, IntPtr menu_item, bool force_deactivate);

		public void ActivateItem(Gtk.Widget menu_item, bool force_deactivate) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_activate_item(Handle, menu_item == null ? IntPtr.Zero : menu_item.Handle, force_deactivate);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_append(IntPtr raw, IntPtr child);

		public void Append(Gtk.Widget child) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_append(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_cancel(IntPtr raw);

		public void Cancel() {
			gtk_menu_shell_cancel(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_deactivate(IntPtr raw);

		public void Deactivate() {
			gtk_menu_shell_deactivate(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_deselect(IntPtr raw);

		public void Deselect() {
			gtk_menu_shell_deselect(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_shell_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_menu_shell_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_insert(IntPtr raw, IntPtr child, int position);

		public void Insert(Gtk.Widget child, int position) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_insert(Handle, child == null ? IntPtr.Zero : child.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_prepend(IntPtr raw, IntPtr child);

		public void Prepend(Gtk.Widget child) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_prepend(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_select_first(IntPtr raw, bool search_sensitive);

		public void SelectFirst(bool search_sensitive) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_select_first(Handle, search_sensitive);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_shell_select_item(IntPtr raw, IntPtr menu_item);

		public void SelectItem(Gtk.Widget menu_item) {
			Gtk.Application.AssertMainThread();
			gtk_menu_shell_select_item(Handle, menu_item == null ? IntPtr.Zero : menu_item.Handle);
		}

#endregion
	}

	internal class MenuShellAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_shell_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_menu_shell_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
