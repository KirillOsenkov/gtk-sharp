// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SpinButton]
	public class SpinButton : Gtk.Entry {

		[Obsolete]
		protected SpinButton(GLib.GType gtype) : base(gtype) {}
		public SpinButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_spin_button_new(IntPtr adjustment, double climb_rate, uint digits);

		public SpinButton (Gtk.Adjustment adjustment, double climb_rate, uint digits) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SpinButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[3];
					var names = stackalloc IntPtr[3];
					var param_count = 0;
					if (adjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("adjustment");
						vals[param_count++] = new GLib.Value (adjustment);
					}
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("climb_rate");
					vals[param_count++] = new GLib.Value (climb_rate);
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("digits");
					vals[param_count++] = new GLib.Value (digits);
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_spin_button_new(adjustment == null ? IntPtr.Zero : adjustment.Handle, climb_rate, digits);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_spin_button_get_adjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_adjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("adjustment")]
		public Gtk.Adjustment Adjustment {
			get  {
				IntPtr raw_ret = gtk_spin_button_get_adjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_adjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("climb-rate")]
		public double ClimbRate {
			get {
				using (GLib.Value val = GetProperty ("climb-rate")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("climb-rate", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_spin_button_get_digits(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_digits(IntPtr raw, uint digits);

		[GLib.Property ("digits")]
		public uint Digits {
			get  {
				uint raw_ret = gtk_spin_button_get_digits(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_digits(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_spin_button_get_snap_to_ticks(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_snap_to_ticks(IntPtr raw, bool snap_to_ticks);

		[GLib.Property ("snap-to-ticks")]
		public bool SnapToTicks {
			get  {
				bool raw_ret = gtk_spin_button_get_snap_to_ticks(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_snap_to_ticks(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_spin_button_get_numeric(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_numeric(IntPtr raw, bool numeric);

		[GLib.Property ("numeric")]
		public bool Numeric {
			get  {
				bool raw_ret = gtk_spin_button_get_numeric(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_numeric(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_spin_button_get_wrap(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_wrap(IntPtr raw, bool wrap);

		[GLib.Property ("wrap")]
		public bool Wrap {
			get  {
				bool raw_ret = gtk_spin_button_get_wrap(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_wrap(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_spin_button_get_update_policy(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_update_policy(IntPtr raw, int policy);

		[GLib.Property ("update-policy")]
		public Gtk.SpinButtonUpdatePolicy UpdatePolicy {
			get  {
				int raw_ret = gtk_spin_button_get_update_policy(Handle);
				Gtk.SpinButtonUpdatePolicy ret = (Gtk.SpinButtonUpdatePolicy) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_update_policy(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_spin_button_get_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_value(IntPtr raw, double value);

		[GLib.Property ("value")]
		public double Value {
			get  {
				double raw_ret = gtk_spin_button_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_spin_button_set_value(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int InputVMDelegate (IntPtr spin_button, out double new_value);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_override_input (IntPtr gtype, InputVMDelegate cb);

		static InputVMDelegate InputVMCallback;

		static int input_cb (IntPtr spin_button, out double new_value)
		{
			try {
				SpinButton spin_button_managed = GLib.Object.GetObject (spin_button, false) as SpinButton;
				return spin_button_managed.OnInput (out new_value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideInput (GLib.GType gtype)
		{
			if (InputVMCallback == null)
				InputVMCallback = new InputVMDelegate (input_cb);
			gtksharp_spinbutton_override_input (gtype.Val, InputVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtksharp_spinbutton_base_input (IntPtr spin_button, out double new_value);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SpinButton), ConnectionMethod="OverrideInput")]
		protected virtual int OnInput (out double new_value)
		{
			Gtk.Application.AssertMainThread();
			int __ret = gtksharp_spinbutton_base_input (Handle, out new_value);
			return __ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int InputSignalDelegate (IntPtr arg0, out double arg1, IntPtr gch);

		static int InputSignalCallback (IntPtr arg0, out double arg1, IntPtr gch)
		{
			Gtk.InputArgs args = new Gtk.InputArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				Gtk.InputHandler handler = (Gtk.InputHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			try {
				arg1 = ((double)args.Args[0]);
				return ((int)args.RetVal);
			} catch (Exception) {
				Exception ex = new Exception ("args.RetVal or 'out' property unset or set to incorrect type in Gtk.InputHandler callback");
				GLib.ExceptionManager.RaiseUnhandledException (ex, true);
				// NOTREACHED: above call doesn't return.
				throw ex;
			}
		}

		[GLib.Signal("input")]
		public event Gtk.InputHandler Input {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "input", new InputSignalDelegate(InputSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "input", new InputSignalDelegate(InputSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int OutputVMDelegate (IntPtr spin_button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_override_output (IntPtr gtype, OutputVMDelegate cb);

		static OutputVMDelegate OutputVMCallback;

		static int output_cb (IntPtr spin_button)
		{
			try {
				SpinButton spin_button_managed = GLib.Object.GetObject (spin_button, false) as SpinButton;
				return spin_button_managed.OnOutput ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideOutput (GLib.GType gtype)
		{
			if (OutputVMCallback == null)
				OutputVMCallback = new OutputVMDelegate (output_cb);
			gtksharp_spinbutton_override_output (gtype.Val, OutputVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtksharp_spinbutton_base_output (IntPtr spin_button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SpinButton), ConnectionMethod="OverrideOutput")]
		protected virtual int OnOutput ()
		{
			Gtk.Application.AssertMainThread();
			int __ret = gtksharp_spinbutton_base_output (Handle);
			return __ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int OutputSignalDelegate (IntPtr arg0, IntPtr gch);

		static int OutputSignalCallback (IntPtr arg0, IntPtr gch)
		{
			Gtk.OutputArgs args = new Gtk.OutputArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				Gtk.OutputHandler handler = (Gtk.OutputHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			try {
				return ((int)args.RetVal);
			} catch (Exception) {
				Exception ex = new Exception ("args.RetVal or 'out' property unset or set to incorrect type in Gtk.OutputHandler callback");
				GLib.ExceptionManager.RaiseUnhandledException (ex, true);
				// NOTREACHED: above call doesn't return.
				throw ex;
			}
		}

		[GLib.Signal("output")]
		public event Gtk.OutputHandler Output {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "output", new OutputSignalDelegate(OutputSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "output", new OutputSignalDelegate(OutputSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ValueChangedVMDelegate (IntPtr spin_button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_override_value_changed (IntPtr gtype, ValueChangedVMDelegate cb);

		static ValueChangedVMDelegate ValueChangedVMCallback;

		static void valuechanged_cb (IntPtr spin_button)
		{
			try {
				SpinButton spin_button_managed = GLib.Object.GetObject (spin_button, false) as SpinButton;
				spin_button_managed.OnValueChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideValueChanged (GLib.GType gtype)
		{
			if (ValueChangedVMCallback == null)
				ValueChangedVMCallback = new ValueChangedVMDelegate (valuechanged_cb);
			gtksharp_spinbutton_override_value_changed (gtype.Val, ValueChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_base_value_changed (IntPtr spin_button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SpinButton), ConnectionMethod="OverrideValueChanged")]
		protected virtual void OnValueChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_spinbutton_base_value_changed (Handle);
		}

		[GLib.Signal("value_changed")]
		public event System.EventHandler ValueChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WrappedVMDelegate (IntPtr spin_button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_override_wrapped (IntPtr gtype, WrappedVMDelegate cb);

		static WrappedVMDelegate WrappedVMCallback;

		static void wrapped_cb (IntPtr spin_button)
		{
			try {
				SpinButton spin_button_managed = GLib.Object.GetObject (spin_button, false) as SpinButton;
				spin_button_managed.OnWrapped ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWrapped (GLib.GType gtype)
		{
			if (WrappedVMCallback == null)
				WrappedVMCallback = new WrappedVMDelegate (wrapped_cb);
			gtksharp_spinbutton_override_wrapped (gtype.Val, WrappedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_base_wrapped (IntPtr spin_button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SpinButton), ConnectionMethod="OverrideWrapped")]
		protected virtual void OnWrapped ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_spinbutton_base_wrapped (Handle);
		}

		[GLib.Signal("wrapped")]
		public event System.EventHandler Wrapped {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "wrapped");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "wrapped");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangeValueVMDelegate (IntPtr spin_button, int scroll);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_override_change_value (IntPtr gtype, ChangeValueVMDelegate cb);

		static ChangeValueVMDelegate ChangeValueVMCallback;

		static void changevalue_cb (IntPtr spin_button, int scroll)
		{
			try {
				SpinButton spin_button_managed = GLib.Object.GetObject (spin_button, false) as SpinButton;
				spin_button_managed.OnChangeValue ((Gtk.ScrollType) scroll);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChangeValue (GLib.GType gtype)
		{
			if (ChangeValueVMCallback == null)
				ChangeValueVMCallback = new ChangeValueVMDelegate (changevalue_cb);
			gtksharp_spinbutton_override_change_value (gtype.Val, ChangeValueVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_spinbutton_base_change_value (IntPtr spin_button, int scroll);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SpinButton), ConnectionMethod="OverrideChangeValue")]
		protected virtual void OnChangeValue (Gtk.ScrollType scroll)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_spinbutton_base_change_value (Handle, (int) scroll);
		}

		[GLib.Signal("change_value")]
		public event Gtk.ChangeValueHandler ChangeValue {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "change_value", typeof (Gtk.ChangeValueArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "change_value", typeof (Gtk.ChangeValueArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_configure(IntPtr raw, IntPtr adjustment, double climb_rate, uint digits);

		public void Configure(Gtk.Adjustment adjustment, double climb_rate, uint digits) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_configure(Handle, adjustment == null ? IntPtr.Zero : adjustment.Handle, climb_rate, digits);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_get_increments(IntPtr raw, out double step, out double page);

		public void GetIncrements(out double step, out double page) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_get_increments(Handle, out step, out page);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_get_range(IntPtr raw, out double min, out double max);

		public void GetRange(out double min, out double max) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_get_range(Handle, out min, out max);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_spin_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_spin_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_spin_button_get_value_as_int(IntPtr raw);

		public int ValueAsInt { 
			get {
				int raw_ret = gtk_spin_button_get_value_as_int(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_increments(IntPtr raw, double step, double page);

		public void SetIncrements(double step, double page) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_set_increments(Handle, step, page);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_set_range(IntPtr raw, double min, double max);

		public void SetRange(double min, double max) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_set_range(Handle, min, max);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_spin(IntPtr raw, int direction, double increment);

		public void Spin(Gtk.SpinType direction, double increment) {
			Gtk.Application.AssertMainThread();
			gtk_spin_button_spin(Handle, (int) direction, increment);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_spin_button_update(IntPtr raw);

		public void Update() {
			gtk_spin_button_update(Handle);
		}

#endregion
#region Customized extensions
#line 1 "SpinButton.custom"
// Gtk.SpinButton.custom - Gtk SpinButton class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_spin_button_new_with_range (double min, double max, double step);

		public SpinButton (double min, double max, double step) : base (IntPtr.Zero)
		{
			if (GetType() != typeof (SpinButton)) {
				Adjustment adj = new Adjustment (min, min, max, step, 10 * step, 0);
				unsafe {
					var names = stackalloc IntPtr [1];
					var vals = stackalloc GLib.Value [1];
					names [0] = GLib.Marshaller.StringToPtrGStrdup ("adjustment");
					vals [0] = new GLib.Value (adj);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}

			owned = true;
			Raw = gtk_spin_button_new_with_range (min, max, step);
		}


#endregion
	}

	internal class SpinButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_spin_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_spin_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
