// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	[GLib.GTypeStruct]
	public struct TextAppearance {

		public Gdk.Color BgColor;
		public Gdk.Color FgColor;
		private IntPtr _bg_stipple;
		public Gdk.Pixmap BgStipple {
			get {
				return GLib.Object.GetObject(_bg_stipple) as Gdk.Pixmap;
			}
			set {
				_bg_stipple = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _fg_stipple;
		public Gdk.Pixmap FgStipple {
			get {
				return GLib.Object.GetObject(_fg_stipple) as Gdk.Pixmap;
			}
			set {
				_fg_stipple = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public int Rise;
		private IntPtr _padding1;
		private uint _bitfield0;

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static int gtksharp_gtk_textappearance_get_underline (ref Gtk.TextAppearance raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textappearance_set_underline (ref Gtk.TextAppearance raw, int value);
		public Pango.Underline Underline {
			get {
				Pango.Underline result = (Pango.Underline) gtksharp_gtk_textappearance_get_underline (ref this);
				return result;
			}
			set {
				gtksharp_gtk_textappearance_set_underline (ref this, (int) value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool gtksharp_gtk_textappearance_get_strikethrough (ref Gtk.TextAppearance raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textappearance_set_strikethrough (ref Gtk.TextAppearance raw, bool value);
		public bool Strikethrough {
			get {
				bool result = gtksharp_gtk_textappearance_get_strikethrough (ref this);
				return result;
			}
			set {
				gtksharp_gtk_textappearance_set_strikethrough (ref this, value);
			}
		}


		public static Gtk.TextAppearance Zero = new Gtk.TextAppearance ();

		public static Gtk.TextAppearance New (IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.TextAppearance.Zero;
			unsafe { return *(Gtk.TextAppearance*)raw; }
		}

#endregion
#region Customized extensions
#line 1 "TextAppearance.custom"
// Gtk.TextAppearance.custom - Gtk TextAppearance class customizations
//
// Authors:    Mike Kestner  <mkestner@novell.com>
//
// Copyright (c) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[Obsolete ("Replaced by BgStipple property.")]
		public Gdk.Pixmap bg_stipple {
			get { 
				Gdk.Pixmap ret = GLib.Object.GetObject(_bg_stipple) as Gdk.Pixmap;
				return ret;
			}
			set { _bg_stipple = value.Handle; }
		}

		[Obsolete ("Replaced by FgStipple property.")]
		public Gdk.Pixmap fg_stipple {
			get { 
				Gdk.Pixmap ret = GLib.Object.GetObject(_fg_stipple) as Gdk.Pixmap;
				return ret;
			}
			set { _fg_stipple = value.Handle; }
		}


#endregion
	}
}
