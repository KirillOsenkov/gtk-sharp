// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Image]
	public class Image : Gtk.Misc {

		[Obsolete]
		protected Image(GLib.GType gtype) : base(gtype) {}
		public Image(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new();

		public Image () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_image_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_animation(IntPtr animation);

		public Image (Gdk.PixbufAnimation animation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (animation != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("pixbuf_animation");
						vals[param_count++] = new GLib.Value (animation);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_image_new_from_animation(animation == null ? IntPtr.Zero : animation.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_file(IntPtr filename);

		public Image (string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("file");
					vals[0] = new GLib.Value (filename);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			owned = true;
			Raw = gtk_image_new_from_file(native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_icon_name(IntPtr icon_name, int size);

		public static Image NewFromIconName(string icon_name, Gtk.IconSize size)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			Image result = new Image (gtk_image_new_from_icon_name(native_icon_name, (int) size));
			GLib.Marshaller.Free (native_icon_name);
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_image(IntPtr image, IntPtr mask);

		public Image (Gdk.Image image, Gdk.Pixmap mask) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (image != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("image");
						vals[param_count++] = new GLib.Value (image);
					}
					if (mask != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("mask");
						vals[param_count++] = new GLib.Value (mask);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_image_new_from_image(image == null ? IntPtr.Zero : image.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_pixbuf(IntPtr pixbuf);

		public Image (Gdk.Pixbuf pixbuf) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (pixbuf != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("pixbuf");
						vals[param_count++] = new GLib.Value (pixbuf);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_image_new_from_pixbuf(pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_pixmap(IntPtr pixmap, IntPtr mask);

		public Image (Gdk.Pixmap pixmap, Gdk.Pixmap mask) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (pixmap != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("pixmap");
						vals[param_count++] = new GLib.Value (pixmap);
					}
					if (mask != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("mask");
						vals[param_count++] = new GLib.Value (mask);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_image_new_from_pixmap(pixmap == null ? IntPtr.Zero : pixmap.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_get_pixbuf(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_pixbuf(IntPtr raw, IntPtr pixbuf);

		[GLib.Property ("pixbuf")]
		public Gdk.Pixbuf Pixbuf {
			get  {
				IntPtr raw_ret = gtk_image_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_image_set_from_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("pixmap")]
		public Gdk.Pixmap Pixmap {
			get {
				using (GLib.Value val = GetProperty ("pixmap")) {
					Gdk.Pixmap ret = (Gdk.Pixmap) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixmap", val);
				}
			}
		}

		[GLib.Property ("image")]
		public Gdk.Image ImageProp {
			get {
				using (GLib.Value val = GetProperty ("image")) {
					Gdk.Image ret = (Gdk.Image) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("image", val);
				}
			}
		}

		[GLib.Property ("mask")]
		public Gdk.Pixmap Mask {
			get {
				using (GLib.Value val = GetProperty ("mask")) {
					Gdk.Pixmap ret = (Gdk.Pixmap) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("mask", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_file(IntPtr raw, IntPtr filename);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_file_utf8(IntPtr raw, IntPtr filename);

		[GLib.Property ("file")]
		public string File {
			get {
				using (GLib.Value val = GetProperty ("file")) {
					string ret = (string) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
				    Environment.OSVersion.Platform == PlatformID.Win32S ||
				    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
				    Environment.OSVersion.Platform == PlatformID.WinCE)
					gtk_image_set_from_file_utf8(Handle, native_value);
				else
					gtk_image_set_from_file(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("stock")]
		public string Stock {
			get {
				using (GLib.Value val = GetProperty ("stock")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("stock", val);
				}
			}
		}

		[GLib.Property ("icon-set")]
		public Gtk.IconSet IconSet {
			get {
				using (GLib.Value val = GetProperty ("icon-set")) {
					Gtk.IconSet ret = (Gtk.IconSet) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value, "GtkIconSet")) {
					SetProperty("icon-set", val);
				}
			}
		}

		[GLib.Property ("icon-size")]
		public int IconSize {
			get {
				using (GLib.Value val = GetProperty ("icon-size")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("icon-size", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_image_get_pixel_size(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_pixel_size(IntPtr raw, int pixel_size);

		[GLib.Property ("pixel-size")]
		public int PixelSize {
			get  {
				int raw_ret = gtk_image_get_pixel_size(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_image_set_pixel_size(Handle, value);
			}
		}

		[GLib.Property ("pixbuf-animation")]
		public Gdk.PixbufAnimation PixbufAnimation {
			get {
				using (GLib.Value val = GetProperty ("pixbuf-animation")) {
					Gdk.PixbufAnimation ret = (Gdk.PixbufAnimation) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixbuf-animation", val);
				}
			}
		}

		[GLib.Property ("icon-name")]
		public string IconName {
			get {
				using (GLib.Value val = GetProperty ("icon-name")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("icon-name", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_image_get_storage_type(IntPtr raw);

		[GLib.Property ("storage-type")]
		public Gtk.ImageType StorageType {
			get  {
				int raw_ret = gtk_image_get_storage_type(Handle);
				Gtk.ImageType ret = (Gtk.ImageType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_clear(IntPtr raw);

		public void Clear() {
			gtk_image_clear(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get(IntPtr raw, IntPtr val, IntPtr mask);

		[Obsolete]
		public void Get(Gdk.Image val, Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			gtk_image_get(Handle, val == null ? IntPtr.Zero : val.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_get_animation(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_animation(IntPtr raw, IntPtr animation);

		public Gdk.PixbufAnimation Animation { 
			get {
				IntPtr raw_ret = gtk_image_get_animation(Handle);
				Gdk.PixbufAnimation ret = GLib.Object.GetObject(raw_ret) as Gdk.PixbufAnimation;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_image_set_from_animation(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get_icon_name(IntPtr raw, out IntPtr icon_name, out int size);

		public void GetIconName(out string icon_name, out Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name;
			int native_size;
			gtk_image_get_icon_name(Handle, out native_icon_name, out native_size);
			icon_name = GLib.Marshaller.Utf8PtrToString (native_icon_name);
			size = (Gtk.IconSize) native_size;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get_icon_set(IntPtr raw, out IntPtr icon_set, out int size);

		public void GetIconSet(out Gtk.IconSet icon_set, out Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_set;
			int native_size;
			gtk_image_get_icon_set(Handle, out native_icon_set, out native_size);
			icon_set = native_icon_set == IntPtr.Zero ? null : (Gtk.IconSet) GLib.Opaque.GetOpaque (native_icon_set, typeof (Gtk.IconSet), false);
			size = (Gtk.IconSize) native_size;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get_image(IntPtr raw, out IntPtr gdk_image, out IntPtr mask);

		public void GetImage(out Gdk.Image gdk_image, out Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			IntPtr native_gdk_image;
			IntPtr native_mask;
			gtk_image_get_image(Handle, out native_gdk_image, out native_mask);
			gdk_image = GLib.Object.GetObject(native_gdk_image) as Gdk.Image;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get_pixmap(IntPtr raw, out IntPtr pixmap, out IntPtr mask);

		public void GetPixmap(out Gdk.Pixmap pixmap, out Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			IntPtr native_pixmap;
			IntPtr native_mask;
			gtk_image_get_pixmap(Handle, out native_pixmap, out native_mask);
			pixmap = GLib.Object.GetObject(native_pixmap) as Gdk.Pixmap;
			mask = GLib.Object.GetObject(native_mask) as Gdk.Pixmap;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_get_stock(IntPtr raw, out IntPtr stock_id, out int size);

		public void GetStock(out string stock_id, out Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id;
			int native_size;
			gtk_image_get_stock(Handle, out native_stock_id, out native_size);
			stock_id = GLib.Marshaller.PtrToStringGFree(native_stock_id);
			size = (Gtk.IconSize) native_size;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_image_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set(IntPtr raw, IntPtr val, IntPtr mask);

		[Obsolete]
		public void Set(Gdk.Image val, Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			gtk_image_set(Handle, val == null ? IntPtr.Zero : val.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_icon_name(IntPtr raw, IntPtr icon_name, int size);

		public void SetFromIconName(string icon_name, Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_image_set_from_icon_name(Handle, native_icon_name, (int) size);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_icon_set(IntPtr raw, IntPtr icon_set, int size);

		public void SetFromIconSet(Gtk.IconSet icon_set, Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			gtk_image_set_from_icon_set(Handle, icon_set == null ? IntPtr.Zero : icon_set.Handle, (int) size);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_image(IntPtr raw, IntPtr gdk_image, IntPtr mask);

		public void SetFromImage(Gdk.Image gdk_image, Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			gtk_image_set_from_image(Handle, gdk_image == null ? IntPtr.Zero : gdk_image.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_pixmap(IntPtr raw, IntPtr pixmap, IntPtr mask);

		public void SetFromPixmap(Gdk.Pixmap pixmap, Gdk.Pixmap mask) {
			Gtk.Application.AssertMainThread();
			gtk_image_set_from_pixmap(Handle, pixmap == null ? IntPtr.Zero : pixmap.Handle, mask == null ? IntPtr.Zero : mask.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_image_set_from_stock(IntPtr raw, IntPtr stock_id, int size);

		public void SetFromStock(string stock_id, Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_image_set_from_stock(Handle, native_stock_id, (int) size);
			GLib.Marshaller.Free (native_stock_id);
		}

#endregion
#region Customized extensions
#line 1 "Image.custom"
// Image.custom - Customizations to Gtk.Image
//
// Authors: Mike Kestner  <mkestner@novell.com>
// Authors: Stephane Delcroix  <sdelcroix@novell.com>
//
// Copyright (c) 2004-2008 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_icon_set(IntPtr icon_set, int size);

		public Image (Gtk.IconSet icon_set, Gtk.IconSize size) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("icon_set");
					vals[0] = new GLib.Value (icon_set);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("icon_size");
					vals[1] = new GLib.Value ((int)size);
					CreateNativeObject (names, vals, 2);
				}
				return;
			}
			owned = true;
			Raw = gtk_image_new_from_icon_set(icon_set.Handle, (int) size);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_new_from_stock(IntPtr stock_id, int size);

		public Image (string stock_id, Gtk.IconSize size) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Image)) {
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("stock");
					vals[0] = new GLib.Value (stock_id);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("icon_size");
					vals[1] = new GLib.Value ((int)size);
					CreateNativeObject (names, vals, 2);
				}
				return;
			}
			owned = true;
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			Raw = gtk_image_new_from_stock(native, (int) size);
			GLib.Marshaller.Free (native);
		}

		void LoadFromStream (System.IO.Stream stream)
		{
			try {
				Gdk.PixbufAnimation anim = new Gdk.PixbufAnimation (stream);
				if (anim.IsStaticImage)
					Pixbuf = anim.StaticImage;
				else
					PixbufAnimation = anim;
			} catch {
				Stock = Gtk.Stock.MissingImage;
			}
		}

		public Image (System.IO.Stream stream) : this ()
		{
			LoadFromStream (stream);
		}

		public Image (System.Reflection.Assembly assembly, string resource) : this ()
		{
			if (assembly == null)
				assembly = System.Reflection.Assembly.GetCallingAssembly ();

			System.IO.Stream s = assembly.GetManifestResourceStream (resource);
			if (s == null)
				throw new ArgumentException ("'" + resource + "' is not a valid resource name of assembly '" + assembly + "'.");

			LoadFromStream (s);
		}

		static public Image LoadFromResource (string resource)
		{
			return new Image (System.Reflection.Assembly.GetCallingAssembly (), resource);
		}

		[Obsolete ("Use the Animation property instead")]
		public Gdk.PixbufAnimation FromAnimation {
			set {
				gtk_image_set_from_animation(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[Obsolete ("Use the File property instead")]
		public string FromFile {
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_image_set_from_file(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[Obsolete ("Use the Pixbuf property instead")]
		public Gdk.Pixbuf FromPixbuf {
			set {
				gtk_image_set_from_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}



#endregion
	}

	internal class ImageAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_image_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_image_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
