// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_alternative_dialog_button_order(IntPtr screen);

		public static bool AlternativeDialogButtonOrder(Gdk.Screen screen) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_alternative_dialog_button_order(screen == null ? IntPtr.Zero : screen.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_check_version(uint required_major, uint required_minor, uint required_micro);

		public static string CheckVersion(uint required_major, uint required_minor, uint required_micro) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_check_version(required_major, required_minor, required_micro);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_disable_setlocale();

		public static void DisableSetlocale() {
			gtk_disable_setlocale();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_events_pending();

		public static bool EventsPending { 
			get {
				bool raw_ret = gtk_events_pending();
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_get_current_event_state(out int state);

		public static bool GetCurrentEventState(out Gdk.ModifierType state) {
			Gtk.Application.AssertMainThread();
			int native_state;
			bool raw_ret = gtk_get_current_event_state(out native_state);
			bool ret = raw_ret;
			state = (Gdk.ModifierType) native_state;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_get_current_event_time();

		public static uint CurrentEventTime { 
			get {
				uint raw_ret = gtk_get_current_event_time();
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_get_default_language();

		public static Pango.Language DefaultLanguage { 
			get {
				IntPtr raw_ret = gtk_get_default_language();
				Pango.Language ret = raw_ret == IntPtr.Zero ? null : (Pango.Language) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Language), false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_get_event_widget(IntPtr evnt);

		public static Gtk.Widget GetEventWidget(Gdk.Event evnt) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_get_event_widget(evnt == null ? IntPtr.Zero : evnt.Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paint_string(IntPtr style, IntPtr window, int state_type, ref Gdk.Rectangle area, IntPtr widget, IntPtr detail, int x, int y, IntPtr str1ng);

		[Obsolete]
		public static void PaintString(Gtk.Style style, Gdk.Window window, Gtk.StateType state_type, Gdk.Rectangle area, Gtk.Widget widget, string detail, int x, int y, string str1ng) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			gtk_paint_string(style == null ? IntPtr.Zero : style.Handle, window == null ? IntPtr.Zero : window.Handle, (int) state_type, ref area, widget == null ? IntPtr.Zero : widget.Handle, native_detail, x, y, native_str1ng);
			GLib.Marshaller.Free (native_detail);
			GLib.Marshaller.Free (native_str1ng);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_propagate_event(IntPtr widget, IntPtr evnt);

		public static void PropagateEvent(Gtk.Widget widget, Gdk.Event evnt) {
			Gtk.Application.AssertMainThread();
			gtk_propagate_event(widget == null ? IntPtr.Zero : widget.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_rgb_to_hsv(double r, double g, double b, out double h, out double s, out double v);

		public static void RgbToHsv(double r, double g, double b, out double h, out double s, out double v) {
			Gtk.Application.AssertMainThread();
			gtk_rgb_to_hsv(r, g, b, out h, out s, out v);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_set_locale();

		public static string SetLocale() {
			IntPtr raw_ret = gtk_set_locale();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_bindings_activate(IntPtr objekt, uint keyval, int modifiers);

		public static bool BindingsActivate(Gtk.Object objekt, uint keyval, Gdk.ModifierType modifiers) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_bindings_activate(objekt == null ? IntPtr.Zero : objekt.Handle, keyval, (int) modifiers);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Global.custom"
// Global.custom - customizations to Gtk.Global
//
// Authors: Marius Ungureanu <maungu@microsoft.com>
//
// Copyright (c) 2016 Microsoft
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_parse_args(ref int argc, ref IntPtr argv);

		public static bool ParseArgs(ref int argc, ref string[] argv) {
			GLib.Argv a = new GLib.Argv (argv);
			IntPtr buf = a.Handle;

			bool ret = gtk_parse_args (ref argc, ref buf);
			argv = a.GetArgs (argc);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_get_current_event();

		[DllImport ("libgdk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_event_free (IntPtr raw);

		public static Gdk.Event CurrentEvent { 
			get {
				IntPtr raw_ret = gtk_get_current_event();
				Gdk.Event ret = Gdk.Event.GetEvent (raw_ret, true);
				return ret;
			}
		}

#endregion
	}
}
