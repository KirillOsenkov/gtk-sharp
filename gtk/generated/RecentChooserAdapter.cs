// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class RecentChooserAdapter : GLib.GInterfaceAdapter, Gtk.RecentChooser {

		static RecentChooserIface iface;

		struct RecentChooserIface {
			public IntPtr gtype;
			public IntPtr itype;

			public SetCurrentUriDelegate set_current_uri;
			public GetCurrentUriDelegate get_current_uri;
			public SelectUriDelegate select_uri;
			public UnselectUriDelegate unselect_uri;
			public SelectAllDelegate select_all;
			public UnselectAllDelegate unselect_all;
			public GetItemsDelegate get_items;
			public IntPtr get_recent_manager;
			public AddFilterDelegate add_filter;
			public RemoveFilterDelegate remove_filter;
			public ListFiltersDelegate list_filters;
			public SetSortFuncDelegate set_sort_func;
			public IntPtr selection_changed;
			public IntPtr item_activated;
		}

		static RecentChooserAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(RecentChooserAdapter));
			iface.set_current_uri = new SetCurrentUriDelegate (SetCurrentUriCallback);
			iface.get_current_uri = new GetCurrentUriDelegate (GetCurrentUriCallback);
			iface.select_uri = new SelectUriDelegate (SelectUriCallback);
			iface.unselect_uri = new UnselectUriDelegate (UnselectUriCallback);
			iface.select_all = new SelectAllDelegate (SelectAllCallback);
			iface.unselect_all = new UnselectAllDelegate (UnselectAllCallback);
			iface.get_items = new GetItemsDelegate (GetItemsCallback);
			iface.add_filter = new AddFilterDelegate (AddFilterCallback);
			iface.remove_filter = new RemoveFilterDelegate (RemoveFilterCallback);
			iface.list_filters = new ListFiltersDelegate (ListFiltersCallback);
			iface.set_sort_func = new SetSortFuncDelegate (SetSortFuncCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetCurrentUriDelegate (IntPtr chooser, IntPtr uri, out IntPtr error);

		static bool SetCurrentUriCallback (IntPtr chooser, IntPtr uri, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				bool __result = __obj.SetCurrentUri (GLib.Marshaller.Utf8PtrToString (uri));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetCurrentUriDelegate (IntPtr chooser);

		static IntPtr GetCurrentUriCallback (IntPtr chooser)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				string __result = __obj.CurrentUri;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SelectUriDelegate (IntPtr chooser, IntPtr uri, out IntPtr error);

		static bool SelectUriCallback (IntPtr chooser, IntPtr uri, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				bool __result = __obj.SelectUri (GLib.Marshaller.Utf8PtrToString (uri));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UnselectUriDelegate (IntPtr chooser, IntPtr uri);

		static void UnselectUriCallback (IntPtr chooser, IntPtr uri)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				__obj.UnselectUri (GLib.Marshaller.Utf8PtrToString (uri));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectAllDelegate (IntPtr chooser);

		static void SelectAllCallback (IntPtr chooser)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				__obj.SelectAll ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UnselectAllDelegate (IntPtr chooser);

		static void UnselectAllCallback (IntPtr chooser)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				__obj.UnselectAll ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetItemsDelegate (IntPtr chooser);

		static IntPtr GetItemsCallback (IntPtr chooser)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				GLib.List __result = __obj.Items;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AddFilterDelegate (IntPtr chooser, IntPtr filter);

		static void AddFilterCallback (IntPtr chooser, IntPtr filter)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				__obj.AddFilter (GLib.Object.GetObject(filter) as Gtk.RecentFilter);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RemoveFilterDelegate (IntPtr chooser, IntPtr filter);

		static void RemoveFilterCallback (IntPtr chooser, IntPtr filter)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				__obj.RemoveFilter (GLib.Object.GetObject(filter) as Gtk.RecentFilter);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListFiltersDelegate (IntPtr chooser);

		static IntPtr ListFiltersCallback (IntPtr chooser)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				GLib.SList __result = __obj.ListFilters ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetSortFuncDelegate (IntPtr chooser, GtkSharp.RecentSortFuncNative sort_func, IntPtr data, GLib.DestroyNotify destroy);

		static void SetSortFuncCallback (IntPtr chooser, GtkSharp.RecentSortFuncNative sort_func, IntPtr data, GLib.DestroyNotify destroy)
		{
			try {
				Gtk.RecentChooserImplementor __obj = GLib.Object.GetObject (chooser, false) as Gtk.RecentChooserImplementor;
				GtkSharp.RecentSortFuncInvoker sort_func_invoker = new GtkSharp.RecentSortFuncInvoker (sort_func, data, destroy);
				__obj.SortFunc = sort_func_invoker.Handler;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			RecentChooserIface native_iface = Marshal.PtrToStructure<RecentChooserIface> (ifaceptr);
			native_iface.set_current_uri = iface.set_current_uri;
			native_iface.get_current_uri = iface.get_current_uri;
			native_iface.select_uri = iface.select_uri;
			native_iface.unselect_uri = iface.unselect_uri;
			native_iface.select_all = iface.select_all;
			native_iface.unselect_all = iface.unselect_all;
			native_iface.get_items = iface.get_items;
			native_iface.get_recent_manager = iface.get_recent_manager;
			native_iface.add_filter = iface.add_filter;
			native_iface.remove_filter = iface.remove_filter;
			native_iface.list_filters = iface.list_filters;
			native_iface.set_sort_func = iface.set_sort_func;
			Marshal.StructureToPtr<RecentChooserIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public RecentChooserAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		RecentChooserImplementor implementor;

		public RecentChooserAdapter (RecentChooserImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public RecentChooserAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_recent_chooser_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static RecentChooser GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static RecentChooser GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is RecentChooserImplementor)
				return new RecentChooserAdapter (obj as RecentChooserImplementor);
			else if (obj as RecentChooser == null)
				return new RecentChooserAdapter (obj.Handle);
			else
				return obj as RecentChooser;
		}

		public RecentChooserImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_show_private(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_show_private(IntPtr raw, bool show_private);

		[GLib.Property ("show-private")]
		public bool ShowPrivate {
			get  {
				bool raw_ret = gtk_recent_chooser_get_show_private(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_show_private(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_show_tips(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_show_tips(IntPtr raw, bool show_tips);

		[GLib.Property ("show-tips")]
		public bool ShowTips {
			get  {
				bool raw_ret = gtk_recent_chooser_get_show_tips(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_show_tips(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_show_icons(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_show_icons(IntPtr raw, bool show_icons);

		[GLib.Property ("show-icons")]
		public bool ShowIcons {
			get  {
				bool raw_ret = gtk_recent_chooser_get_show_icons(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_show_icons(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_show_not_found(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_show_not_found(IntPtr raw, bool show_not_found);

		[GLib.Property ("show-not-found")]
		public bool ShowNotFound {
			get  {
				bool raw_ret = gtk_recent_chooser_get_show_not_found(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_show_not_found(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_select_multiple(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_select_multiple(IntPtr raw, bool select_multiple);

		[GLib.Property ("select-multiple")]
		public bool SelectMultiple {
			get  {
				bool raw_ret = gtk_recent_chooser_get_select_multiple(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_select_multiple(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_local_only(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_local_only(IntPtr raw, bool local_only);

		[GLib.Property ("local-only")]
		public bool LocalOnly {
			get  {
				bool raw_ret = gtk_recent_chooser_get_local_only(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_local_only(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_chooser_get_limit(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_limit(IntPtr raw, int limit);

		[GLib.Property ("limit")]
		public int Limit {
			get  {
				int raw_ret = gtk_recent_chooser_get_limit(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_limit(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_chooser_get_sort_type(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_sort_type(IntPtr raw, int sort_type);

		[GLib.Property ("sort-type")]
		public Gtk.RecentSortType SortType {
			get  {
				int raw_ret = gtk_recent_chooser_get_sort_type(Handle);
				Gtk.RecentSortType ret = (Gtk.RecentSortType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_sort_type(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_filter(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_filter(IntPtr raw, IntPtr filter);

		[GLib.Property ("filter")]
		public Gtk.RecentFilter Filter {
			get  {
				IntPtr raw_ret = gtk_recent_chooser_get_filter(Handle);
				Gtk.RecentFilter ret = GLib.Object.GetObject(raw_ret) as Gtk.RecentFilter;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_filter(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Signal("selection-changed")]
		public event System.EventHandler SelectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "selection-changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "selection-changed");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("item-activated")]
		public event System.EventHandler ItemActivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "item-activated");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "item-activated");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_add_filter(IntPtr raw, IntPtr filter);

		public void AddFilter(Gtk.RecentFilter filter) {
			Gtk.Application.AssertMainThread();
			gtk_recent_chooser_add_filter(Handle, filter == null ? IntPtr.Zero : filter.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_chooser_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gtk_recent_chooser_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_current_item(IntPtr raw);

		public Gtk.RecentInfo CurrentItem { 
			get {
				IntPtr raw_ret = gtk_recent_chooser_get_current_item(Handle);
				Gtk.RecentInfo ret = raw_ret == IntPtr.Zero ? null : (Gtk.RecentInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.RecentInfo), false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_current_uri(IntPtr raw);

		public string CurrentUri { 
			get {
				IntPtr raw_ret = gtk_recent_chooser_get_current_uri(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_items(IntPtr raw);

		public GLib.List Items { 
			get {
				IntPtr raw_ret = gtk_recent_chooser_get_items(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_get_show_numbers(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_show_numbers(IntPtr raw, bool show_numbers);

		[Obsolete]
		public bool ShowNumbers { 
			get {
				bool raw_ret = gtk_recent_chooser_get_show_numbers(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_recent_chooser_set_show_numbers(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_get_uris(IntPtr raw, out UIntPtr length);

		public string[] GetSelectedUris(out ulong length) {
			Gtk.Application.AssertMainThread();
			UIntPtr native_length;
			IntPtr raw_ret = gtk_recent_chooser_get_uris(Handle, out native_length);
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
			length = (ulong) native_length;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_chooser_list_filters(IntPtr raw);

		public GLib.SList ListFilters() {
			IntPtr raw_ret = gtk_recent_chooser_list_filters(Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_remove_filter(IntPtr raw, IntPtr filter);

		public void RemoveFilter(Gtk.RecentFilter filter) {
			Gtk.Application.AssertMainThread();
			gtk_recent_chooser_remove_filter(Handle, filter == null ? IntPtr.Zero : filter.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_select_all(IntPtr raw);

		public void SelectAll() {
			gtk_recent_chooser_select_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_select_uri(IntPtr raw, IntPtr uri, out IntPtr error);

		public bool SelectUri(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_recent_chooser_select_uri(Handle, native_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_chooser_set_current_uri(IntPtr raw, IntPtr uri, out IntPtr error);

		public bool SetCurrentUri(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_recent_chooser_set_current_uri(Handle, native_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_set_sort_func(IntPtr raw, GtkSharp.RecentSortFuncNative sort_func, IntPtr sort_data, GLib.DestroyNotify data_destroy);

		public Gtk.RecentSortFunc SortFunc { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr sort_data;
				GLib.DestroyNotify data_destroy;
				if (value == null) {
					sort_data = IntPtr.Zero;
					data_destroy = null;
				} else {
					sort_data = (IntPtr) GCHandle.Alloc (value);
					data_destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_recent_chooser_set_sort_func(Handle, (value == null) ? null : GtkSharp.RecentSortFuncWrapper.NativeDelegate, sort_data, data_destroy);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_unselect_all(IntPtr raw);

		public void UnselectAll() {
			gtk_recent_chooser_unselect_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_chooser_unselect_uri(IntPtr raw, IntPtr uri);

		public void UnselectUri(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			gtk_recent_chooser_unselect_uri(Handle, native_uri);
			GLib.Marshaller.Free (native_uri);
		}

#endregion
#region Customized extensions
#line 1 "RecentChooserAdapter.custom"
		[Obsolete ("Use GetSelectedUris instead")]
		public string GetUris (out ulong length)
		{
			var res = GetSelectedUris (out length);
			if (length > 0)
				return res [0];
			return null;
		}

#endregion
	}
}
