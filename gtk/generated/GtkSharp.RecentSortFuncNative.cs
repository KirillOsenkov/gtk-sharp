// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int RecentSortFuncNative(IntPtr a, IntPtr b, IntPtr user_data);

	internal class RecentSortFuncInvoker {

		RecentSortFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~RecentSortFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal RecentSortFuncInvoker (RecentSortFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal RecentSortFuncInvoker (RecentSortFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal RecentSortFuncInvoker (RecentSortFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.RecentSortFunc Handler {
			get {
				return new Gtk.RecentSortFunc(InvokeNative);
			}
		}

		int InvokeNative (Gtk.RecentInfo a, Gtk.RecentInfo b)
		{
			Gtk.Application.AssertMainThread();
			int result = native_cb (a == null ? IntPtr.Zero : a.Handle, b == null ? IntPtr.Zero : b.Handle, __data);
			return result;
		}
	}

	internal static class RecentSortFuncWrapper {

		public static int NativeCallback (IntPtr a, IntPtr b, IntPtr user_data)
		{
			try {
				var gch = (GCHandle)user_data;
				var managed = (Gtk.RecentSortFunc)gch.Target;
				int __ret = managed (a == IntPtr.Zero ? null : (Gtk.RecentInfo) GLib.Opaque.GetOpaque (a, typeof (Gtk.RecentInfo), false), b == IntPtr.Zero ? null : (Gtk.RecentInfo) GLib.Opaque.GetOpaque (b, typeof (Gtk.RecentInfo), false));
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}


		internal static readonly RecentSortFuncNative NativeDelegate = new RecentSortFuncNative (NativeCallback);
	}
#endregion
}
