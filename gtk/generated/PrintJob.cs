// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PrintJob]
	public class PrintJob : GLib.Object {

		[Obsolete]
		protected PrintJob(GLib.GType gtype) : base(gtype) {}
		public PrintJob(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_new(IntPtr title, IntPtr printer, IntPtr settings, IntPtr page_setup);

		public PrintJob (string title, Gtk.Printer printer, Gtk.PrintSettings settings, Gtk.PageSetup page_setup) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintJob)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[4];
					var names = stackalloc IntPtr[4];
					var param_count = 0;
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("title");
					vals[param_count++] = new GLib.Value (title);
					if (printer != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("printer");
						vals[param_count++] = new GLib.Value (printer);
					}
					if (settings != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("settings");
						vals[param_count++] = new GLib.Value (settings);
					}
					if (page_setup != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("page_setup");
						vals[param_count++] = new GLib.Value (page_setup);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			owned = true;
			Raw = gtk_print_job_new(native_title, printer == null ? IntPtr.Zero : printer.Handle, settings == null ? IntPtr.Zero : settings.Handle, page_setup == null ? IntPtr.Zero : page_setup.Handle);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_title(IntPtr raw);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_print_job_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_printer(IntPtr raw);

		[GLib.Property ("printer")]
		public Gtk.Printer Printer {
			get  {
				IntPtr raw_ret = gtk_print_job_get_printer(Handle);
				Gtk.Printer ret = GLib.Object.GetObject(raw_ret) as Gtk.Printer;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_settings(IntPtr raw);

		[GLib.Property ("settings")]
		public Gtk.PrintSettings Settings {
			get  {
				IntPtr raw_ret = gtk_print_job_get_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
		}

		[GLib.Property ("page-setup")]
		public Gtk.PageSetup PageSetup {
			get {
				using (GLib.Value val = GetProperty ("page-setup")) {
					Gtk.PageSetup ret = (Gtk.PageSetup) val;
					return ret;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_job_get_track_print_status(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_track_print_status(IntPtr raw, bool track_status);

		[GLib.Property ("track-print-status")]
		public bool TrackPrintStatus {
			get  {
				bool raw_ret = gtk_print_job_get_track_print_status(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_job_set_track_print_status(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StatusChangedVMDelegate (IntPtr job);

		static StatusChangedVMDelegate StatusChangedVMCallback;

		static void statuschanged_cb (IntPtr job)
		{
			try {
				PrintJob job_managed = GLib.Object.GetObject (job, false) as PrintJob;
				job_managed.OnStatusChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStatusChanged (GLib.GType gtype)
		{
			if (StatusChangedVMCallback == null)
				StatusChangedVMCallback = new StatusChangedVMDelegate (statuschanged_cb);
			OverrideVirtualMethod (gtype, "status-changed", StatusChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintJob), ConnectionMethod="OverrideStatusChanged")]
		protected virtual void OnStatusChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("status-changed")]
		public event System.EventHandler StatusChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status-changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status-changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_status(IntPtr raw);

		public Gtk.PrintStatus Status { 
			get {
				int raw_ret = gtk_print_job_get_status(Handle);
				Gtk.PrintStatus ret = (Gtk.PrintStatus) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_print_job_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_send(IntPtr raw, GtkSharp.PrintJobCompleteFuncNative cb, IntPtr user_data, GLib.DestroyNotify dnotify);

		public void Send(Gtk.PrintJobCompleteFunc cb) {
			Gtk.Application.AssertMainThread();
			IntPtr user_data;
			GLib.DestroyNotify dnotify;
			if (cb == null) {
				user_data = IntPtr.Zero;
				dnotify = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb);
				dnotify = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_print_job_send(Handle, (cb == null) ? null : GtkSharp.PrintJobCompleteFuncWrapper.NativeDelegate, user_data, dnotify);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_print_job_set_source_file(IntPtr raw, IntPtr filename, out IntPtr error);

		public unsafe bool SetSourceFile(string filename) {
			Gtk.Application.AssertMainThread();
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_print_job_set_source_file(Handle, native_filename, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}

	internal class PrintJobAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_job_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
