// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	[Combo]
	public class Combo : Gtk.HBox {

		[Obsolete]
		protected Combo(GLib.GType gtype) : base(gtype) {}
		public Combo(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_new();

		public Combo () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Combo)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_combo_new();
		}

		[GLib.Property ("enable-arrow-keys")]
		public bool EnableArrowKeys {
			get {
				using (GLib.Value val = GetProperty ("enable-arrow-keys")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("enable-arrow-keys", val);
				}
			}
		}

		[GLib.Property ("enable-arrows-always")]
		public bool EnableArrowsAlways {
			get {
				using (GLib.Value val = GetProperty ("enable-arrows-always")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("enable-arrows-always", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_set_case_sensitive(IntPtr raw, bool val);

		[GLib.Property ("case-sensitive")]
		public bool CaseSensitive {
			get {
				using (GLib.Value val = GetProperty ("case-sensitive")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_set_case_sensitive(Handle, value);
			}
		}

		[GLib.Property ("allow-empty")]
		public bool AllowEmpty {
			get {
				using (GLib.Value val = GetProperty ("allow-empty")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("allow-empty", val);
				}
			}
		}

		[GLib.Property ("value-in-list")]
		public bool ValueInList {
			get {
				using (GLib.Value val = GetProperty ("value-in-list")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("value-in-list", val);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_combo_get_entry_offset ();

		static uint entry_offset = gtksharp_gtk_combo_get_entry_offset ();
		public Gtk.Entry Entry {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + entry_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Entry;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_combo_get_button_offset ();

		static uint button_offset = gtksharp_gtk_combo_get_button_offset ();
		public Gtk.Button Button {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_combo_get_list_offset ();

		static uint list_offset = gtksharp_gtk_combo_get_list_offset ();
		public Gtk.Widget List {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + list_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Widget;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_set_use_arrows(IntPtr raw, bool val);

		public bool UseArrows {
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_set_use_arrows(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_set_use_arrows_always(IntPtr raw, bool val);

		public bool UseArrowsAlways {
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_set_use_arrows_always(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_disable_activate(IntPtr raw);

		public void DisableActivate() {
			gtk_combo_disable_activate(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_combo_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_set_item_string(IntPtr raw, IntPtr item, IntPtr item_value);

		public void SetItemString(Gtk.Item item, string item_value) {
			Gtk.Application.AssertMainThread();
			IntPtr native_item_value = GLib.Marshaller.StringToPtrGStrdup (item_value);
			gtk_combo_set_item_string(Handle, item == null ? IntPtr.Zero : item.Handle, native_item_value);
			GLib.Marshaller.Free (native_item_value);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_set_value_in_list(IntPtr raw, bool val, bool ok_if_empty);

		public void SetValueInList(bool val, bool ok_if_empty) {
			Gtk.Application.AssertMainThread();
			gtk_combo_set_value_in_list(Handle, val, ok_if_empty);
		}

#endregion
#region Customized extensions
#line 1 "Combo.custom"
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern void gtk_combo_set_popdown_strings(IntPtr raw, IntPtr strings);

public string[] PopdownStrings {
	set {
		GLib.List list = new GLib.List (IntPtr.Zero, typeof (string), true, true);
		foreach (string val in value)
			list.Append (val);
		gtk_combo_set_popdown_strings(Handle, list.Handle);
	}
}

#endregion
	}

	internal class ComboAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_combo_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
