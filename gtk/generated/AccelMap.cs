// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[AccelMap]
	public class AccelMap : GLib.Object {

		[Obsolete]
		protected AccelMap(GLib.GType gtype) : base(gtype) {}
		public AccelMap(IntPtr raw) : base(raw) {}

		protected AccelMap() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MapChangedVMDelegate (IntPtr map, IntPtr accel_path, uint accel_key, int accel_mods);

		static MapChangedVMDelegate MapChangedVMCallback;

		static void mapchanged_cb (IntPtr map, IntPtr accel_path, uint accel_key, int accel_mods)
		{
			try {
				AccelMap map_managed = GLib.Object.GetObject (map, false) as AccelMap;
				map_managed.OnMapChanged (GLib.Marshaller.PtrToStringGFree(accel_path), accel_key, (Gdk.ModifierType) accel_mods);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMapChanged (GLib.GType gtype)
		{
			if (MapChangedVMCallback == null)
				MapChangedVMCallback = new MapChangedVMDelegate (mapchanged_cb);
			OverrideVirtualMethod (gtype, "changed", MapChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AccelMap), ConnectionMethod="OverrideMapChanged")]
		protected virtual void OnMapChanged (string accel_path, uint accel_key, Gdk.ModifierType accel_mods)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [4];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (accel_path)) {
						using (inst_and_params [2] = new GLib.Value (accel_key)) {
							using (inst_and_params [3] = new GLib.Value (accel_mods)) {
								g_signal_chain_from_overridden (inst_and_params, ref ret);
							}
						}
					}
				}
			}
		}

		[GLib.Signal("changed")]
		public event Gtk.MapChangedHandler MapChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed", typeof (Gtk.MapChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed", typeof (Gtk.MapChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_add_entry(IntPtr accel_path, uint accel_key, int accel_mods);

		public static void AddEntry(string accel_path, uint accel_key, Gdk.ModifierType accel_mods) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			gtk_accel_map_add_entry(native_accel_path, accel_key, (int) accel_mods);
			GLib.Marshaller.Free (native_accel_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_add_filter(IntPtr filter_pattern);

		public static void AddFilter(string filter_pattern) {
			Gtk.Application.AssertMainThread();
			IntPtr native_filter_pattern = GLib.Marshaller.StringToPtrGStrdup (filter_pattern);
			gtk_accel_map_add_filter(native_filter_pattern);
			GLib.Marshaller.Free (native_filter_pattern);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_map_change_entry(IntPtr accel_path, uint accel_key, int accel_mods, bool replace);

		public static bool ChangeEntry(string accel_path, uint accel_key, Gdk.ModifierType accel_mods, bool replace) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			bool raw_ret = gtk_accel_map_change_entry(native_accel_path, accel_key, (int) accel_mods, replace);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_accel_path);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_foreach(IntPtr data, GtkSharp.AccelMapForeachNative foreach_func);

		public static void Foreach(IntPtr data, Gtk.AccelMapForeach foreach_func) {
			Gtk.Application.AssertMainThread();
			GtkSharp.AccelMapForeachWrapper foreach_func_wrapper = new GtkSharp.AccelMapForeachWrapper (foreach_func);
			gtk_accel_map_foreach(data, foreach_func_wrapper.NativeDelegate);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_foreach_unfiltered(IntPtr data, GtkSharp.AccelMapForeachNative foreach_func);

		public static void ForeachUnfiltered(IntPtr data, Gtk.AccelMapForeach foreach_func) {
			Gtk.Application.AssertMainThread();
			GtkSharp.AccelMapForeachWrapper foreach_func_wrapper = new GtkSharp.AccelMapForeachWrapper (foreach_func);
			gtk_accel_map_foreach_unfiltered(data, foreach_func_wrapper.NativeDelegate);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_map_get();

		public static Gtk.AccelMap Get() {
			IntPtr raw_ret = gtk_accel_map_get();
			Gtk.AccelMap ret = GLib.Object.GetObject(raw_ret) as Gtk.AccelMap;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_map_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_accel_map_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_load(IntPtr file_name);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_load_utf8(IntPtr file_name);

		public static void Load(string file_name) {
			Gtk.Application.AssertMainThread();
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_accel_map_load_utf8(native_file_name);
			else
				gtk_accel_map_load(native_file_name);
			GLib.Marshaller.Free (native_file_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_load_fd(int fd);

		public static void LoadFd(int fd) {
			Gtk.Application.AssertMainThread();
			gtk_accel_map_load_fd(fd);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_lock_path(IntPtr accel_path);

		public static void LockPath(string accel_path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			gtk_accel_map_lock_path(native_accel_path);
			GLib.Marshaller.Free (native_accel_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_map_lookup_entry(IntPtr accel_path, ref Gtk.AccelKey key);

		public static bool LookupEntry(string accel_path, Gtk.AccelKey key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			bool raw_ret = gtk_accel_map_lookup_entry(native_accel_path, ref key);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_accel_path);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_save(IntPtr file_name);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_save_utf8(IntPtr file_name);

		public static void Save(string file_name) {
			Gtk.Application.AssertMainThread();
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_accel_map_save_utf8(native_file_name);
			else
				gtk_accel_map_save(native_file_name);
			GLib.Marshaller.Free (native_file_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_save_fd(int fd);

		public static void SaveFd(int fd) {
			Gtk.Application.AssertMainThread();
			gtk_accel_map_save_fd(fd);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_map_unlock_path(IntPtr accel_path);

		public static void UnlockPath(string accel_path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			gtk_accel_map_unlock_path(native_accel_path);
			GLib.Marshaller.Free (native_accel_path);
		}

#endregion
	}

	internal class AccelMapAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_map_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_accel_map_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
