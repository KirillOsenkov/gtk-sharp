// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ComboBox]
	public class ComboBox : Gtk.Bin, Gtk.CellLayout, Gtk.CellEditable {

		[Obsolete]
		protected ComboBox(GLib.GType gtype) : base(gtype) {}
		public ComboBox(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_new();

		public ComboBox () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ComboBox)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_combo_box_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_new_text();

		public static ComboBox NewText()
		{
			ComboBox result = new ComboBox (gtk_combo_box_new_text());
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_new_with_model(IntPtr model);

		public ComboBox (Gtk.TreeModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ComboBox)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (model != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("model");
						vals[param_count++] = new GLib.Value (model);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_combo_box_new_with_model(model == null ? IntPtr.Zero : model.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_model(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_model(IntPtr raw, IntPtr model);

		[GLib.Property ("model")]
		public Gtk.TreeModel Model {
			get  {
				IntPtr raw_ret = gtk_combo_box_get_model(Handle);
				Gtk.TreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_model(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_combo_box_get_wrap_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_wrap_width(IntPtr raw, int width);

		[GLib.Property ("wrap-width")]
		public int WrapWidth {
			get  {
				int raw_ret = gtk_combo_box_get_wrap_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_wrap_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_combo_box_get_row_span_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_row_span_column(IntPtr raw, int row_span);

		[GLib.Property ("row-span-column")]
		public int RowSpanColumn {
			get  {
				int raw_ret = gtk_combo_box_get_row_span_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_row_span_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_combo_box_get_column_span_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_column_span_column(IntPtr raw, int column_span);

		[GLib.Property ("column-span-column")]
		public int ColumnSpanColumn {
			get  {
				int raw_ret = gtk_combo_box_get_column_span_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_column_span_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_combo_box_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_active(IntPtr raw, int index_);

		[GLib.Property ("active")]
		public int Active {
			get  {
				int raw_ret = gtk_combo_box_get_active(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_active(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_combo_box_get_add_tearoffs(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_add_tearoffs(IntPtr raw, bool add_tearoffs);

		[GLib.Property ("add-tearoffs")]
		public bool AddTearoffs {
			get  {
				bool raw_ret = gtk_combo_box_get_add_tearoffs(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_add_tearoffs(Handle, value);
			}
		}

		[GLib.Property ("has-frame")]
		public bool HasFrame {
			get {
				using (GLib.Value val = GetProperty ("has-frame")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("has-frame", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_combo_box_get_focus_on_click(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_focus_on_click(IntPtr raw, bool focus_on_click);

		[GLib.Property ("focus-on-click")]
		public bool FocusOnClick {
			get  {
				bool raw_ret = gtk_combo_box_get_focus_on_click(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_set_focus_on_click(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_title(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("tearoff-title")]
		public string TearoffTitle {
			get  {
				IntPtr raw_ret = gtk_combo_box_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_combo_box_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("popup-shown")]
		public bool PopupShown {
			get {
				using (GLib.Value val = GetProperty ("popup-shown")) {
					bool ret = (bool) val;
					return ret;
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr combo_box);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_combobox_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr combo_box)
		{
			try {
				ComboBox combo_box_managed = GLib.Object.GetObject (combo_box, false) as ComboBox;
				combo_box_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_combobox_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_combobox_base_changed (IntPtr combo_box);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_combobox_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActiveMovedVMDelegate (IntPtr inst, int p0);

		static ActiveMovedVMDelegate ActiveMovedVMCallback;

		static void activemoved_cb (IntPtr inst, int p0)
		{
			try {
				ComboBox inst_managed = GLib.Object.GetObject (inst, false) as ComboBox;
				inst_managed.OnActiveMoved ((Gtk.ScrollType) p0);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActiveMoved (GLib.GType gtype)
		{
			if (ActiveMovedVMCallback == null)
				ActiveMovedVMCallback = new ActiveMovedVMDelegate (activemoved_cb);
			OverrideVirtualMethod (gtype, "move-active", ActiveMovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverrideActiveMoved")]
		protected virtual void OnActiveMoved (Gtk.ScrollType p0)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (p0)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("move-active")]
		public event Gtk.ActiveMovedHandler ActiveMoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move-active", typeof (Gtk.ActiveMovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move-active", typeof (Gtk.ActiveMovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopupRequestedVMDelegate (IntPtr inst);

		static PopupRequestedVMDelegate PopupRequestedVMCallback;

		static void popuprequested_cb (IntPtr inst)
		{
			try {
				ComboBox inst_managed = GLib.Object.GetObject (inst, false) as ComboBox;
				inst_managed.OnPopupRequested ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePopupRequested (GLib.GType gtype)
		{
			if (PopupRequestedVMCallback == null)
				PopupRequestedVMCallback = new PopupRequestedVMDelegate (popuprequested_cb);
			OverrideVirtualMethod (gtype, "popup", PopupRequestedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverridePopupRequested")]
		protected virtual void OnPopupRequested ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("popup")]
		public event System.EventHandler PopupRequested {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popup");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popup");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PopdownRequestedVMDelegate (IntPtr inst);

		static PopdownRequestedVMDelegate PopdownRequestedVMCallback;

		static bool popdownrequested_cb (IntPtr inst)
		{
			try {
				ComboBox inst_managed = GLib.Object.GetObject (inst, false) as ComboBox;
				return inst_managed.OnPopdownRequested ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverridePopdownRequested (GLib.GType gtype)
		{
			if (PopdownRequestedVMCallback == null)
				PopdownRequestedVMCallback = new PopdownRequestedVMDelegate (popdownrequested_cb);
			OverrideVirtualMethod (gtype, "popdown", PopdownRequestedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverridePopdownRequested")]
		protected virtual bool OnPopdownRequested ()
		{
			GLib.Value ret = new GLib		.Value (GLib.GType.Boolean);
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
			bool result = (bool) ret;
			ret.Dispose ();
			return result;
		}

		[GLib.Signal("popdown")]
		public event Gtk.PopdownRequestedHandler PopdownRequested {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popdown", typeof (Gtk.PopdownRequestedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popdown", typeof (Gtk.PopdownRequestedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_append_text(IntPtr raw, IntPtr text);

		public void AppendText(string text) {
			Gtk.Application.AssertMainThread();
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gtk_combo_box_append_text(Handle, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_combo_box_get_active_iter(IntPtr raw, ref Gtk.TreeIter iter);

		public bool GetActiveIter(out Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			iter = new Gtk.TreeIter();
			bool raw_ret = gtk_combo_box_get_active_iter(Handle, ref iter);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_active_text(IntPtr raw);

		public string ActiveText { 
			get {
				IntPtr raw_ret = gtk_combo_box_get_active_text(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_popup_accessible(IntPtr raw);

		public Atk.Object PopupAccessible { 
			get {
				IntPtr raw_ret = gtk_combo_box_get_popup_accessible(Handle);
				Atk.Object ret = GLib.Object.GetObject(raw_ret) as Atk.Object;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_combo_box_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_insert_text(IntPtr raw, int position, IntPtr text);

		public void InsertText(int position, string text) {
			Gtk.Application.AssertMainThread();
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gtk_combo_box_insert_text(Handle, position, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_popdown(IntPtr raw);

		public void Popdown() {
			gtk_combo_box_popdown(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_popup(IntPtr raw);

		public void Popup() {
			gtk_combo_box_popup(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_prepend_text(IntPtr raw, IntPtr text);

		public void PrependText(string text) {
			Gtk.Application.AssertMainThread();
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gtk_combo_box_prepend_text(Handle, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_remove_text(IntPtr raw, int position);

		public void RemoveText(int position) {
			Gtk.Application.AssertMainThread();
			gtk_combo_box_remove_text(Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_active_iter(IntPtr raw, ref Gtk.TreeIter iter);

		public void SetActiveIter(Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			gtk_combo_box_set_active_iter(Handle, ref iter);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_add_attribute(IntPtr raw, IntPtr cell, IntPtr attribute, int column);

		public void AddAttribute(Gtk.CellRenderer cell, string attribute, int column) {
			Gtk.Application.AssertMainThread();
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_layout_add_attribute(Handle, cell == null ? IntPtr.Zero : cell.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear(IntPtr raw);

		public void Clear() {
			gtk_cell_layout_clear(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear_attributes(IntPtr raw, IntPtr cell);

		public void ClearAttributes(Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_clear_attributes(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_cells(IntPtr raw);

		public Gtk.CellRenderer[] Cells { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_cells(Handle);
				Gtk.CellRenderer[] ret = GLib.Marshaller.ListPtrToArray<Gtk.CellRenderer> (raw_ret, typeof(GLib.List), true, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_end(IntPtr raw, IntPtr cell, bool expand);

		public void PackEnd(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_end(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_start(IntPtr raw, IntPtr cell, bool expand);

		public void PackStart(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_start(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_reorder(IntPtr raw, IntPtr cell, int position);

		public void Reorder(Gtk.CellRenderer cell, int position) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_reorder(Handle, cell == null ? IntPtr.Zero : cell.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_set_cell_data_func(IntPtr raw, IntPtr cell, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell, Gtk.CellLayoutDataFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_cell_layout_set_cell_data_func(Handle, cell == null ? IntPtr.Zero : cell.Handle, (func == null) ? null : GtkSharp.CellLayoutDataFuncWrapper.NativeDelegate, func_data, destroy);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_editing_done(IntPtr raw);

		public void FinishEditing() {
			gtk_cell_editable_editing_done(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_remove_widget(IntPtr raw);

		public void RemoveWidget() {
			gtk_cell_editable_remove_widget(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_start_editing(IntPtr raw, IntPtr evnt);

		public void StartEditing(Gdk.Event evnt) {
			Gtk.Application.AssertMainThread();
			gtk_cell_editable_start_editing(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EditingDoneVMDelegate (IntPtr cell_editable);

		static EditingDoneVMDelegate EditingDoneVMCallback;

		static void editingdone_cb (IntPtr cell_editable)
		{
			try {
				ComboBox cell_editable_managed = GLib.Object.GetObject (cell_editable, false) as ComboBox;
				cell_editable_managed.OnEditingDone ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEditingDone (GLib.GType gtype)
		{
			if (EditingDoneVMCallback == null)
				EditingDoneVMCallback = new EditingDoneVMDelegate (editingdone_cb);
			OverrideVirtualMethod (gtype, "editing_done", EditingDoneVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverrideEditingDone")]
		protected virtual void OnEditingDone ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("editing_done")]
		public event System.EventHandler EditingDone {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_done");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_done");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WidgetRemovedVMDelegate (IntPtr cell_editable);

		static WidgetRemovedVMDelegate WidgetRemovedVMCallback;

		static void widgetremoved_cb (IntPtr cell_editable)
		{
			try {
				ComboBox cell_editable_managed = GLib.Object.GetObject (cell_editable, false) as ComboBox;
				cell_editable_managed.OnWidgetRemoved ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWidgetRemoved (GLib.GType gtype)
		{
			if (WidgetRemovedVMCallback == null)
				WidgetRemovedVMCallback = new WidgetRemovedVMDelegate (widgetremoved_cb);
			OverrideVirtualMethod (gtype, "remove_widget", WidgetRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ComboBox), ConnectionMethod="OverrideWidgetRemoved")]
		protected virtual void OnWidgetRemoved ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("remove_widget")]
		public event System.EventHandler WidgetRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "remove_widget");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "remove_widget");
				sig.RemoveDelegate (value);
			}
		}

#endregion
#region Customized extensions
#line 1 "ComboBox.custom"
//  Gtk.ComboBox.custom - Gtk ComboBox customizations
//
//  Authors:  Todd Berman  <tberman@off.net>
//  	      Mike Kestner  <mkestner@novell.com>
//
//  Copyright (c) 2004 Todd Berman
//  Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public ComboBox (string[] entries) : this (new ListStore (typeof (string)))
		{
			CellRendererText cell = new CellRendererText ();
			PackStart (cell, true);
			SetAttributes (cell, "text", 0);
			foreach (string entry in entries)
				AppendText (entry);
		}

		public void SetAttributes (CellRenderer cell, params object[] attrs)
		{
			if (attrs.Length % 2 != 0)
				throw new ArgumentException ("attrs should contain pairs of attribute/col");

			ClearAttributes (cell);
			for (int i = 0; i < attrs.Length - 1; i += 2) {
				AddAttribute (cell, (string) attrs [i], (int) attrs [i + 1]);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewRowSeparatorFuncNative gtk_combo_box_get_row_separator_func(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_set_row_separator_func(IntPtr raw, GtkSharp.TreeViewRowSeparatorFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		WeakReference<Gtk.TreeViewRowSeparatorFunc> lastRowSeparatorFunc = new WeakReference<Gtk.TreeViewRowSeparatorFunc> (null);
		public Gtk.TreeViewRowSeparatorFunc RowSeparatorFunc { 
			get {
				GtkSharp.TreeViewRowSeparatorFuncNative raw_ret = gtk_combo_box_get_row_separator_func(Handle);
				if (raw_ret == GtkSharp.TreeViewRowSeparatorFuncWrapper.NativeDelegate) {
					Gtk.TreeViewRowSeparatorFunc result;
					lastRowSeparatorFunc.TryGetTarget (out result);
					return result;
				}

				if (raw_ret == null)
					return null;

				Gtk.TreeViewRowSeparatorFunc ret = new GtkSharp.TreeViewRowSeparatorFuncInvoker (raw_ret).Handler;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				lastRowSeparatorFunc.SetTarget (value);
				gtk_combo_box_set_row_separator_func(Handle, GtkSharp.TreeViewRowSeparatorFuncWrapper.NativeDelegate, data, destroy);
			}
		}

#endregion
	}

	internal class ComboBoxAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_combo_box_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
