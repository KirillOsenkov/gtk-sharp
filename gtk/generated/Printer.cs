// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Printer]
	public class Printer : GLib.Object {

		[Obsolete]
		protected Printer(GLib.GType gtype) : base(gtype) {}
		public Printer(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_new(IntPtr name, IntPtr backend, bool virtual_);

		public Printer (string name, Gtk.PrintBackend backend, bool virtual_) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Printer)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			owned = true;
			Raw = gtk_printer_new(native_name, backend == null ? IntPtr.Zero : backend.Handle, virtual_);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = gtk_printer_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_backend(IntPtr raw);

		[GLib.Property ("backend")]
		public Gtk.PrintBackend Backend {
			get  {
				IntPtr raw_ret = gtk_printer_get_backend(Handle);
				Gtk.PrintBackend ret = raw_ret == IntPtr.Zero ? null : (Gtk.PrintBackend) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.PrintBackend), false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_is_virtual(IntPtr raw);

		[GLib.Property ("is-virtual")]
		public bool IsVirtual {
			get  {
				bool raw_ret = gtk_printer_is_virtual(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_accepts_pdf(IntPtr raw);

		[GLib.Property ("accepts-pdf")]
		public bool AcceptsPdf {
			get  {
				bool raw_ret = gtk_printer_accepts_pdf(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_accepts_ps(IntPtr raw);

		[GLib.Property ("accepts-ps")]
		public bool AcceptsPs {
			get  {
				bool raw_ret = gtk_printer_accepts_ps(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_state_message(IntPtr raw);

		[GLib.Property ("state-message")]
		public string StateMessage {
			get  {
				IntPtr raw_ret = gtk_printer_get_state_message(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_location(IntPtr raw);

		[GLib.Property ("location")]
		public string Location {
			get  {
				IntPtr raw_ret = gtk_printer_get_location(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_icon_name(IntPtr raw);

		[GLib.Property ("icon-name")]
		public string IconName {
			get  {
				IntPtr raw_ret = gtk_printer_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_printer_get_job_count(IntPtr raw);

		[GLib.Property ("job-count")]
		public int JobCount {
			get  {
				int raw_ret = gtk_printer_get_job_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DetailsAcquiredVMDelegate (IntPtr printer, bool success);

		static DetailsAcquiredVMDelegate DetailsAcquiredVMCallback;

		static void detailsacquired_cb (IntPtr printer, bool success)
		{
			try {
				Printer printer_managed = GLib.Object.GetObject (printer, false) as Printer;
				printer_managed.OnDetailsAcquired (success);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDetailsAcquired (GLib.GType gtype)
		{
			if (DetailsAcquiredVMCallback == null)
				DetailsAcquiredVMCallback = new DetailsAcquiredVMDelegate (detailsacquired_cb);
			OverrideVirtualMethod (gtype, "details-acquired", DetailsAcquiredVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Printer), ConnectionMethod="OverrideDetailsAcquired")]
		protected virtual void OnDetailsAcquired (bool success)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (success)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("details-acquired")]
		public event Gtk.DetailsAcquiredHandler DetailsAcquired {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "details-acquired", typeof (Gtk.DetailsAcquiredArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "details-acquired", typeof (Gtk.DetailsAcquiredArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_printer_compare(IntPtr raw, IntPtr b);

		public int Compare(Gtk.Printer b) {
			Gtk.Application.AssertMainThread();
			int raw_ret = gtk_printer_compare(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_printer_get_capabilities(IntPtr raw);

		public Gtk.PrintCapabilities Capabilities { 
			get {
				int raw_ret = gtk_printer_get_capabilities(Handle);
				Gtk.PrintCapabilities ret = (Gtk.PrintCapabilities) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_description(IntPtr raw);

		public string Description { 
			get {
				IntPtr raw_ret = gtk_printer_get_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_printer_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_has_details(IntPtr raw);

		public bool HasDetails { 
			get {
				bool raw_ret = gtk_printer_has_details(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_is_active(IntPtr raw);

		public bool IsActive { 
			get {
				bool raw_ret = gtk_printer_is_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_printer_is_default(IntPtr raw);

		public bool IsDefault { 
			get {
				bool raw_ret = gtk_printer_is_default(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_list_papers(IntPtr raw);

		public Gtk.PageSetup[] ListPapers() {
			IntPtr raw_ret = gtk_printer_list_papers(Handle);
			Gtk.PageSetup[] ret = GLib.Marshaller.ListPtrToArray<Gtk.PageSetup> (raw_ret, typeof(GLib.List), true, true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_printer_request_details(IntPtr raw);

		public void RequestDetails() {
			gtk_printer_request_details(Handle);
		}

#endregion
#region Customized extensions
#line 1 "Printer.custom"
// Printer.custom - customizations to Gtk.Printer
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2006 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_enumerate_printers (GtkSharp.PrinterFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy, bool wait);

		public static void EnumeratePrinters (Gtk.PrinterFunc func, bool wait) 
		{
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_enumerate_printers (GtkSharp.PrinterFuncWrapper.NativeDelegate, func_data, destroy, wait);
		}


#endregion
	}

	internal class PrinterAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_printer_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_printer_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
