// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TextTag]
	public class TextTag : GLib.Object {

		[Obsolete]
		protected TextTag(GLib.GType gtype) : base(gtype) {}
		public TextTag(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_new(IntPtr name);

		public TextTag (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TextTag)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("name");
					vals[0] = new GLib.Value (name);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			owned = true;
			Raw = gtk_text_tag_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[GLib.Property ("name")]
		public string Name {
			get {
				using (GLib.Value val = GetProperty ("name")) {
					string ret = (string) val;
					return ret;
				}
			}
		}

		[GLib.Property ("background")]
		public string Background {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background", val);
				}
			}
		}

		[GLib.Property ("background-gdk")]
		public Gdk.Color BackgroundGdk {
			get {
				using (GLib.Value val = GetProperty ("background-gdk")) {
					Gdk.Color ret = (Gdk.Color) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = (GLib.Value) value) {
					SetProperty("background-gdk", val);
				}
			}
		}

		[GLib.Property ("background-full-height")]
		public bool BackgroundFullHeight {
			get {
				using (GLib.Value val = GetProperty ("background-full-height")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background-full-height", val);
				}
			}
		}

		[GLib.Property ("background-stipple")]
		public Gdk.Pixmap BackgroundStipple {
			get {
				using (GLib.Value val = GetProperty ("background-stipple")) {
					Gdk.Pixmap ret = (Gdk.Pixmap) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background-stipple", val);
				}
			}
		}

		[GLib.Property ("foreground")]
		public string Foreground {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("foreground", val);
				}
			}
		}

		[GLib.Property ("foreground-gdk")]
		public Gdk.Color ForegroundGdk {
			get {
				using (GLib.Value val = GetProperty ("foreground-gdk")) {
					Gdk.Color ret = (Gdk.Color) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = (GLib.Value) value) {
					SetProperty("foreground-gdk", val);
				}
			}
		}

		[GLib.Property ("foreground-stipple")]
		public Gdk.Pixmap ForegroundStipple {
			get {
				using (GLib.Value val = GetProperty ("foreground-stipple")) {
					Gdk.Pixmap ret = (Gdk.Pixmap) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("foreground-stipple", val);
				}
			}
		}

		[GLib.Property ("direction")]
		public Gtk.TextDirection Direction {
			get {
				using (GLib.Value val = GetProperty ("direction")) {
					Gtk.TextDirection ret = (Gtk.TextDirection) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("direction", val);
				}
			}
		}

		[GLib.Property ("editable")]
		public bool Editable {
			get {
				using (GLib.Value val = GetProperty ("editable")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("editable", val);
				}
			}
		}

		[GLib.Property ("font")]
		public string Font {
			get {
				using (GLib.Value val = GetProperty ("font")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("font", val);
				}
			}
		}

		[GLib.Property ("font-desc")]
		public Pango.FontDescription FontDesc {
			get {
				using (GLib.Value val = GetProperty ("font-desc")) {
					Pango.FontDescription ret = (Pango.FontDescription) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value, "PangoFontDescription")) {
					SetProperty("font-desc", val);
				}
			}
		}

		[GLib.Property ("family")]
		public string Family {
			get {
				using (GLib.Value val = GetProperty ("family")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("family", val);
				}
			}
		}

		[GLib.Property ("style")]
		public Pango.Style Style {
			get {
				using (GLib.Value val = GetProperty ("style")) {
					Pango.Style ret = (Pango.Style) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("style", val);
				}
			}
		}

		[GLib.Property ("variant")]
		public Pango.Variant Variant {
			get {
				using (GLib.Value val = GetProperty ("variant")) {
					Pango.Variant ret = (Pango.Variant) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("variant", val);
				}
			}
		}

		[GLib.Property ("stretch")]
		public Pango.Stretch Stretch {
			get {
				using (GLib.Value val = GetProperty ("stretch")) {
					Pango.Stretch ret = (Pango.Stretch) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("stretch", val);
				}
			}
		}

		[GLib.Property ("size")]
		public int Size {
			get {
				using (GLib.Value val = GetProperty ("size")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("size", val);
				}
			}
		}

		[GLib.Property ("scale")]
		public double Scale {
			get {
				using (GLib.Value val = GetProperty ("scale")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("scale", val);
				}
			}
		}

		[GLib.Property ("size-points")]
		public double SizePoints {
			get {
				using (GLib.Value val = GetProperty ("size-points")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("size-points", val);
				}
			}
		}

		[GLib.Property ("justification")]
		public Gtk.Justification Justification {
			get {
				using (GLib.Value val = GetProperty ("justification")) {
					Gtk.Justification ret = (Gtk.Justification) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("justification", val);
				}
			}
		}

		[GLib.Property ("language")]
		public string Language {
			get {
				using (GLib.Value val = GetProperty ("language")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("language", val);
				}
			}
		}

		[GLib.Property ("left-margin")]
		public int LeftMargin {
			get {
				using (GLib.Value val = GetProperty ("left-margin")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("left-margin", val);
				}
			}
		}

		[GLib.Property ("right-margin")]
		public int RightMargin {
			get {
				using (GLib.Value val = GetProperty ("right-margin")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("right-margin", val);
				}
			}
		}

		[GLib.Property ("indent")]
		public int Indent {
			get {
				using (GLib.Value val = GetProperty ("indent")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("indent", val);
				}
			}
		}

		[GLib.Property ("rise")]
		public int Rise {
			get {
				using (GLib.Value val = GetProperty ("rise")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("rise", val);
				}
			}
		}

		[GLib.Property ("pixels-above-lines")]
		public int PixelsAboveLines {
			get {
				using (GLib.Value val = GetProperty ("pixels-above-lines")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels-above-lines", val);
				}
			}
		}

		[GLib.Property ("pixels-below-lines")]
		public int PixelsBelowLines {
			get {
				using (GLib.Value val = GetProperty ("pixels-below-lines")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels-below-lines", val);
				}
			}
		}

		[GLib.Property ("pixels-inside-wrap")]
		public int PixelsInsideWrap {
			get {
				using (GLib.Value val = GetProperty ("pixels-inside-wrap")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels-inside-wrap", val);
				}
			}
		}

		[GLib.Property ("strikethrough")]
		public bool Strikethrough {
			get {
				using (GLib.Value val = GetProperty ("strikethrough")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("strikethrough", val);
				}
			}
		}

		[GLib.Property ("underline")]
		public Pango.Underline Underline {
			get {
				using (GLib.Value val = GetProperty ("underline")) {
					Pango.Underline ret = (Pango.Underline) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("underline", val);
				}
			}
		}

		[GLib.Property ("wrap-mode")]
		public Gtk.WrapMode WrapMode {
			get {
				using (GLib.Value val = GetProperty ("wrap-mode")) {
					Gtk.WrapMode ret = (Gtk.WrapMode) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("wrap-mode", val);
				}
			}
		}

		[GLib.Property ("tabs")]
		public Pango.TabArray Tabs {
			get {
				using (GLib.Value val = GetProperty ("tabs")) {
					Pango.TabArray ret = (Pango.TabArray) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value, "PangoTabArray")) {
					SetProperty("tabs", val);
				}
			}
		}

		[GLib.Property ("invisible")]
		public bool Invisible {
			get {
				using (GLib.Value val = GetProperty ("invisible")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("invisible", val);
				}
			}
		}

		[GLib.Property ("paragraph-background")]
		public string ParagraphBackground {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("paragraph-background", val);
				}
			}
		}

		[GLib.Property ("paragraph-background-gdk")]
		public Gdk.Color ParagraphBackgroundGdk {
			get {
				using (GLib.Value val = GetProperty ("paragraph-background-gdk")) {
					Gdk.Color ret = (Gdk.Color) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = (GLib.Value) value) {
					SetProperty("paragraph-background-gdk", val);
				}
			}
		}

		[GLib.Property ("accumulative-margin")]
		public bool AccumulativeMargin {
			get {
				using (GLib.Value val = GetProperty ("accumulative-margin")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accumulative-margin", val);
				}
			}
		}

		[GLib.Property ("background_set")]
		public bool BackgroundSet {
			get {
				using (GLib.Value val = GetProperty ("background_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background_set", val);
				}
			}
		}

		[GLib.Property ("background_full_height_set")]
		public bool BackgroundFullHeightSet {
			get {
				using (GLib.Value val = GetProperty ("background_full_height_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background_full_height_set", val);
				}
			}
		}

		[GLib.Property ("background_stipple_set")]
		public bool BackgroundStippleSet {
			get {
				using (GLib.Value val = GetProperty ("background_stipple_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background_stipple_set", val);
				}
			}
		}

		[GLib.Property ("foreground_set")]
		public bool ForegroundSet {
			get {
				using (GLib.Value val = GetProperty ("foreground_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("foreground_set", val);
				}
			}
		}

		[GLib.Property ("foreground_stipple_set")]
		public bool ForegroundStippleSet {
			get {
				using (GLib.Value val = GetProperty ("foreground_stipple_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("foreground_stipple_set", val);
				}
			}
		}

		[GLib.Property ("editable_set")]
		public bool EditableSet {
			get {
				using (GLib.Value val = GetProperty ("editable_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("editable_set", val);
				}
			}
		}

		[GLib.Property ("family_set")]
		public bool FamilySet {
			get {
				using (GLib.Value val = GetProperty ("family_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("family_set", val);
				}
			}
		}

		[GLib.Property ("style_set")]
		public bool StyleSet {
			get {
				using (GLib.Value val = GetProperty ("style_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("style_set", val);
				}
			}
		}

		[GLib.Property ("variant_set")]
		public bool VariantSet {
			get {
				using (GLib.Value val = GetProperty ("variant_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("variant_set", val);
				}
			}
		}

		[GLib.Property ("weight_set")]
		public bool WeightSet {
			get {
				using (GLib.Value val = GetProperty ("weight_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("weight_set", val);
				}
			}
		}

		[GLib.Property ("stretch_set")]
		public bool StretchSet {
			get {
				using (GLib.Value val = GetProperty ("stretch_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("stretch_set", val);
				}
			}
		}

		[GLib.Property ("size_set")]
		public bool SizeSet {
			get {
				using (GLib.Value val = GetProperty ("size_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("size_set", val);
				}
			}
		}

		[GLib.Property ("scale_set")]
		public bool ScaleSet {
			get {
				using (GLib.Value val = GetProperty ("scale_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("scale_set", val);
				}
			}
		}

		[GLib.Property ("justification_set")]
		public bool JustificationSet {
			get {
				using (GLib.Value val = GetProperty ("justification_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("justification_set", val);
				}
			}
		}

		[GLib.Property ("language_set")]
		public bool LanguageSet {
			get {
				using (GLib.Value val = GetProperty ("language_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("language_set", val);
				}
			}
		}

		[GLib.Property ("left_margin_set")]
		public bool LeftMarginSet {
			get {
				using (GLib.Value val = GetProperty ("left_margin_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("left_margin_set", val);
				}
			}
		}

		[GLib.Property ("indent_set")]
		public bool IndentSet {
			get {
				using (GLib.Value val = GetProperty ("indent_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("indent_set", val);
				}
			}
		}

		[GLib.Property ("rise_set")]
		public bool RiseSet {
			get {
				using (GLib.Value val = GetProperty ("rise_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("rise_set", val);
				}
			}
		}

		[GLib.Property ("pixels_above_lines_set")]
		public bool PixelsAboveLinesSet {
			get {
				using (GLib.Value val = GetProperty ("pixels_above_lines_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels_above_lines_set", val);
				}
			}
		}

		[GLib.Property ("pixels_below_lines_set")]
		public bool PixelsBelowLinesSet {
			get {
				using (GLib.Value val = GetProperty ("pixels_below_lines_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels_below_lines_set", val);
				}
			}
		}

		[GLib.Property ("pixels_inside_wrap_set")]
		public bool PixelsInsideWrapSet {
			get {
				using (GLib.Value val = GetProperty ("pixels_inside_wrap_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("pixels_inside_wrap_set", val);
				}
			}
		}

		[GLib.Property ("strikethrough_set")]
		public bool StrikethroughSet {
			get {
				using (GLib.Value val = GetProperty ("strikethrough_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("strikethrough_set", val);
				}
			}
		}

		[GLib.Property ("right_margin_set")]
		public bool RightMarginSet {
			get {
				using (GLib.Value val = GetProperty ("right_margin_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("right_margin_set", val);
				}
			}
		}

		[GLib.Property ("underline_set")]
		public bool UnderlineSet {
			get {
				using (GLib.Value val = GetProperty ("underline_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("underline_set", val);
				}
			}
		}

		[GLib.Property ("wrap_mode_set")]
		public bool WrapModeSet {
			get {
				using (GLib.Value val = GetProperty ("wrap_mode_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("wrap_mode_set", val);
				}
			}
		}

		[GLib.Property ("tabs_set")]
		public bool TabsSet {
			get {
				using (GLib.Value val = GetProperty ("tabs_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("tabs_set", val);
				}
			}
		}

		[GLib.Property ("invisible_set")]
		public bool InvisibleSet {
			get {
				using (GLib.Value val = GetProperty ("invisible_set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("invisible_set", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_text_tag_get_priority(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_tag_set_priority(IntPtr raw, int priority);

		public int Priority {
			get  {
				int raw_ret = gtk_text_tag_get_priority(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_text_tag_set_priority(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TextEventVMDelegate (IntPtr tag, IntPtr event_object, IntPtr evnt, IntPtr iter);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_texttag_override_event (IntPtr gtype, TextEventVMDelegate cb);

		static TextEventVMDelegate TextEventVMCallback;

		static bool textevent_cb (IntPtr tag, IntPtr event_object, IntPtr evnt, IntPtr iter)
		{
			try {
				TextTag tag_managed = GLib.Object.GetObject (tag, false) as TextTag;
				return tag_managed.OnTextEvent (GLib.Object.GetObject (event_object), Gdk.Event.GetEvent (evnt), Gtk.TextIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideTextEvent (GLib.GType gtype)
		{
			if (TextEventVMCallback == null)
				TextEventVMCallback = new TextEventVMDelegate (textevent_cb);
			gtksharp_texttag_override_event (gtype.Val, TextEventVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_texttag_base_event (IntPtr tag, IntPtr event_object, IntPtr evnt, ref Gtk.TextIter iter);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TextTag), ConnectionMethod="OverrideTextEvent")]
		protected virtual bool OnTextEvent (GLib.Object event_object, Gdk.Event evnt, Gtk.TextIter iter)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_texttag_base_event (Handle, event_object == null ? IntPtr.Zero : event_object.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, ref iter);
			return __ret;
		}

		[GLib.Signal("event")]
		public event Gtk.TextEventHandler TextEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "event", typeof (Gtk.TextEventArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "event", typeof (Gtk.TextEventArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_text_tag_event(IntPtr raw, IntPtr event_object, IntPtr evnt, ref Gtk.TextIter iter);

		public bool ProcessEvent(GLib.Object event_object, Gdk.Event evnt, Gtk.TextIter iter) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_text_tag_event(Handle, event_object == null ? IntPtr.Zero : event_object.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, ref iter);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_text_tag_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "TextTag.custom"
		//
		// Gtk.TextTag.custom - Gtk TextTag class customizations
		//
		// Author: Radek Doulik  (rodo@ximian.com)
		//
		// Copyright (C) 2002 Ximian, Inc. 
		//
		// This code is inserted after the automatically generated code.
		//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		public Pango.Weight Weight {
			get {
				GLib.Value val = GetProperty ("weight");
				Pango.Weight ret = (Pango.Weight) (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value ((int) value);
				SetProperty ("weight", val);
				val.Dispose ();
			}
		}

#endregion
	}

	internal class TextTagAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_tag_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_text_tag_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
