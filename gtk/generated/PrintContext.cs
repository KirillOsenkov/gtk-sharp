// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PrintContext]
	public class PrintContext : GLib.Object {

		[Obsolete]
		protected PrintContext(GLib.GType gtype) : base(gtype) {}
		public PrintContext(IntPtr raw) : base(raw) {}

		protected PrintContext() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_create_pango_context(IntPtr raw);

		public Pango.Context CreatePangoContext() {
			IntPtr raw_ret = gtk_print_context_create_pango_context(Handle);
			Pango.Context ret = GLib.Object.GetObject(raw_ret, true) as Pango.Context;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_create_pango_layout(IntPtr raw);

		public Pango.Layout CreatePangoLayout() {
			IntPtr raw_ret = gtk_print_context_create_pango_layout(Handle);
			Pango.Layout ret = GLib.Object.GetObject(raw_ret, true) as Pango.Layout;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_dpi_x(IntPtr raw);

		public double DpiX { 
			get {
				double raw_ret = gtk_print_context_get_dpi_x(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_dpi_y(IntPtr raw);

		public double DpiY { 
			get {
				double raw_ret = gtk_print_context_get_dpi_y(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_height(IntPtr raw);

		public double Height { 
			get {
				double raw_ret = gtk_print_context_get_height(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_page_setup(IntPtr raw);

		public Gtk.PageSetup PageSetup { 
			get {
				IntPtr raw_ret = gtk_print_context_get_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_pango_fontmap(IntPtr raw);

		public Pango.FontMap PangoFontmap { 
			get {
				IntPtr raw_ret = gtk_print_context_get_pango_fontmap(Handle);
				Pango.FontMap ret = GLib.Object.GetObject(raw_ret) as Pango.FontMap;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_print_context_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_width(IntPtr raw);

		public double Width { 
			get {
				double raw_ret = gtk_print_context_get_width(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_context_set_cairo_context(IntPtr raw, IntPtr cr, double dpi_x, double dpi_y);

		public void SetCairoContext(Cairo.Context cr, double dpi_x, double dpi_y) {
			Gtk.Application.AssertMainThread();
			gtk_print_context_set_cairo_context(Handle, cr == null ? IntPtr.Zero : cr.Handle, dpi_x, dpi_y);
		}

#endregion
#region Customized extensions
#line 1 "PrintContext.custom"
// PrintContext.custom - customizations to Gtk.PrintContext
//
// Authors: Mike Kestner  <mkestner@novell.com>
//
// Copyright (c) 2008 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_cairo_context(IntPtr raw);

		[DllImport("libcairo-2.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void cairo_reference (IntPtr raw);

		public Cairo.Context CairoContext { 
			get {
				IntPtr raw_ret = gtk_print_context_get_cairo_context (Handle);
				cairo_reference (raw_ret);
				return new Cairo.Context (raw_ret);
			}
		}


#endregion
	}

	internal class PrintContextAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_context_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
