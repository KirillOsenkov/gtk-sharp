// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[FontSelectionDialog]
	public class FontSelectionDialog : Gtk.Dialog {

		[Obsolete]
		protected FontSelectionDialog(GLib.GType gtype) : base(gtype) {}
		public FontSelectionDialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_new(IntPtr title);

		public FontSelectionDialog (string title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FontSelectionDialog)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("title");
					vals[0] = new GLib.Value (title);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			owned = true;
			Raw = gtk_font_selection_dialog_new(native_title);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fontselectiondialog_get_ok_button_offset ();

		static uint ok_button_offset = gtksharp_gtk_fontselectiondialog_get_ok_button_offset ();
		public Gtk.Button OkButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + ok_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fontselectiondialog_get_apply_button_offset ();

		static uint apply_button_offset = gtksharp_gtk_fontselectiondialog_get_apply_button_offset ();
		public Gtk.Button ApplyButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + apply_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_fontselectiondialog_get_cancel_button_offset ();

		static uint cancel_button_offset = gtksharp_gtk_fontselectiondialog_get_cancel_button_offset ();
		public Gtk.Button CancelButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + cancel_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_get_font(IntPtr raw);

		[Obsolete]
		public Gdk.Font Font { 
			get {
				IntPtr raw_ret = gtk_font_selection_dialog_get_font(Handle);
				Gdk.Font ret = Gdk.Font.New (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_get_font_name(IntPtr raw);

		public string FontName { 
			get {
				IntPtr raw_ret = gtk_font_selection_dialog_get_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_get_preview_text(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_font_selection_dialog_set_preview_text(IntPtr raw, IntPtr text);

		public string PreviewText { 
			get {
				IntPtr raw_ret = gtk_font_selection_dialog_get_preview_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_font_selection_dialog_set_preview_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_font_selection_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_font_selection_dialog_set_font_name(IntPtr raw, IntPtr fontname);

		public bool SetFontName(string fontname) {
			Gtk.Application.AssertMainThread();
			IntPtr native_fontname = GLib.Marshaller.StringToPtrGStrdup (fontname);
			bool raw_ret = gtk_font_selection_dialog_set_font_name(Handle, native_fontname);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_fontname);
			return ret;
		}

#endregion
	}

	internal class FontSelectionDialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_font_selection_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_font_selection_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
