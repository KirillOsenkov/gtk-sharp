// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Settings]
	public class Settings : GLib.Object {

		[Obsolete]
		protected Settings(GLib.GType gtype) : base(gtype) {}
		public Settings(IntPtr raw) : base(raw) {}

		protected Settings() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_settings_get_default();

		public static Gtk.Settings Default { 
			get {
				IntPtr raw_ret = gtk_settings_get_default();
				Gtk.Settings ret = GLib.Object.GetObject(raw_ret) as Gtk.Settings;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_settings_get_for_screen(IntPtr screen);

		public static Gtk.Settings GetForScreen(Gdk.Screen screen) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_settings_get_for_screen(screen == null ? IntPtr.Zero : screen.Handle);
			Gtk.Settings ret = GLib.Object.GetObject(raw_ret) as Gtk.Settings;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_settings_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_settings_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_install_property(IntPtr pspec);

		public static void InstallProperty(IntPtr pspec) {
			Gtk.Application.AssertMainThread();
			gtk_settings_install_property(pspec);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_install_property_parser(IntPtr pspec, GtkSharp.RcPropertyParserNative parser);

		public static void InstallPropertyParser(IntPtr pspec, Gtk.RcPropertyParser parser) {
			Gtk.Application.AssertMainThread();
			GtkSharp.RcPropertyParserWrapper parser_wrapper = new GtkSharp.RcPropertyParserWrapper (parser);
			gtk_settings_install_property_parser(pspec, parser_wrapper.NativeDelegate);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_set_double_property(IntPtr raw, IntPtr name, double v_double, IntPtr origin);

		public void SetDoubleProperty(string name, double v_double, string origin) {
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_origin = GLib.Marshaller.StringToPtrGStrdup (origin);
			gtk_settings_set_double_property(Handle, native_name, v_double, native_origin);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_origin);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_set_long_property(IntPtr raw, IntPtr name, IntPtr v_long, IntPtr origin);

		public void SetLongProperty(string name, long v_long, string origin) {
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_origin = GLib.Marshaller.StringToPtrGStrdup (origin);
			gtk_settings_set_long_property(Handle, native_name, new IntPtr (v_long), native_origin);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_origin);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_set_property_value(IntPtr raw, IntPtr name, ref Gtk.SettingsValue svalue);

		public void SetPropertyValue(string name, Gtk.SettingsValue svalue) {
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_settings_set_property_value(Handle, native_name, ref svalue);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_settings_set_string_property(IntPtr raw, IntPtr name, IntPtr v_string, IntPtr origin);

		public void SetStringProperty(string name, string v_string, string origin) {
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_v_string = GLib.Marshaller.StringToPtrGStrdup (v_string);
			IntPtr native_origin = GLib.Marshaller.StringToPtrGStrdup (origin);
			gtk_settings_set_string_property(Handle, native_name, native_v_string, native_origin);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_v_string);
			GLib.Marshaller.Free (native_origin);
		}

#endregion
#region Customized extensions
#line 1 "Settings.custom"
// Gtk.Settings.custom - Gtk Settings class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[Obsolete ("Removed from C API, returns IntPtr.Zero")]
		public IntPtr ColorHash {
			get {
				return IntPtr.Zero;
			}
		}

		public bool CursorBlink {
                        get {
                                GLib.Value val = GetProperty ("gtk-cursor-blink");
                                bool ret = (bool) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-cursor-blink", val);
                                val.Dispose ();
                        }
                }

		public int CursorBlinkTime {
                        get {
                                GLib.Value val = GetProperty ("gtk-cursor-blink-time");
                                int ret = (int) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-cursor-blink-time", val);
                                val.Dispose ();
                        }
                }

		public int DndDragThreshold {
                        get {
                                GLib.Value val = GetProperty ("gtk-dnd-drag-threshold");
                                int ret = (int) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-dnd-drag-threshold", val);
                                val.Dispose ();
                        }
                }

		public int DoubleClickTime {
                        get {
                                GLib.Value val = GetProperty ("gtk-double-click-time");
                                int ret = (int) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-double-click-time", val);
                                val.Dispose ();
                        }
                }

		public string FontName {
                        get {
                                GLib.Value val = GetProperty ("gtk-font-name");
                                string ret = (string) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-font-name", val);
                                val.Dispose ();
                        }
                }

		public string IconSizes {
                        get {
                                GLib.Value val = GetProperty ("gtk-icon-sizes");
                                string ret = (string) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-icon-sizes", val);
                                val.Dispose ();
                        }
                }

		public string KeyThemeName {
                        get {
                                GLib.Value val = GetProperty ("gtk-key-theme-name");
                                string ret = (string) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-key-theme-name", val);
                                val.Dispose ();
                        }
                }

		public string MenuBarAccel {
                        get {
                                GLib.Value val = GetProperty ("gtk-menu-bar-accel");
                                string ret = (string) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-menu-bar-accel", val);
                                val.Dispose ();
                        }
                }

		public bool SplitCursor {
                        get {
                                GLib.Value val = GetProperty ("gtk-split-cursor");
                                bool ret = (bool) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-split-cursor", val);
                                val.Dispose ();
                        }
                }

		public string ThemeName {
                        get {
                                GLib.Value val = GetProperty ("gtk-theme-name");
                                string ret = (string) val;
                                val.Dispose ();
                                return ret;
                        }
                        set {
                                GLib.Value val = new GLib.Value(value);
                                SetProperty("gtk-theme-name", val);
                                val.Dispose ();
                        }
                }


#endregion
	}

	internal class SettingsAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_settings_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_settings_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
