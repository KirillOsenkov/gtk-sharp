// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TreeSelection]
	public class TreeSelection : GLib.Object {

		[Obsolete]
		protected TreeSelection(GLib.GType gtype) : base(gtype) {}
		public TreeSelection(IntPtr raw) : base(raw) {}

		protected TreeSelection() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_tree_view(IntPtr raw);

		public Gtk.TreeView TreeView {
			get  {
				IntPtr raw_ret = gtk_tree_selection_get_tree_view(Handle);
				Gtk.TreeView ret = GLib.Object.GetObject(raw_ret) as Gtk.TreeView;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_user_data(IntPtr raw);

		public IntPtr UserData {
			get  {
				IntPtr raw_ret = gtk_tree_selection_get_user_data(Handle);
				IntPtr ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr selection);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_treeselection_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr selection)
		{
			try {
				TreeSelection selection_managed = GLib.Object.GetObject (selection, false) as TreeSelection;
				selection_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_treeselection_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_treeselection_base_changed (IntPtr selection);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeSelection), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_treeselection_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_selection_count_selected_rows(IntPtr raw);

		public int CountSelectedRows() {
			int raw_ret = gtk_tree_selection_count_selected_rows(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_selection_get_mode(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_set_mode(IntPtr raw, int type);

		public Gtk.SelectionMode Mode { 
			get {
				int raw_ret = gtk_tree_selection_get_mode(Handle);
				Gtk.SelectionMode ret = (Gtk.SelectionMode) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_tree_selection_set_mode(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_selection_get_selected(IntPtr raw, out IntPtr model, ref Gtk.TreeIter iter);

		public bool GetSelected(out Gtk.TreeModel model, out Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			IntPtr native_model;
			iter = new Gtk.TreeIter();
			bool raw_ret = gtk_tree_selection_get_selected(Handle, out native_model, ref iter);
			bool ret = raw_ret;
			model = Gtk.TreeModelAdapter.GetObject (native_model, false);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_selected_rows(IntPtr raw, out IntPtr model);

		public Gtk.TreePath[] GetSelectedRows(out Gtk.TreeModel model) {
			Gtk.Application.AssertMainThread();
			IntPtr native_model;
			IntPtr raw_ret = gtk_tree_selection_get_selected_rows(Handle, out native_model);
			Gtk.TreePath[] ret = GLib.Marshaller.ListPtrToArray<Gtk.TreePath> (raw_ret, typeof(GLib.List), true, true);
			model = Gtk.TreeModelAdapter.GetObject (native_model, false);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tree_selection_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_selection_iter_is_selected(IntPtr raw, ref Gtk.TreeIter iter);

		public bool IterIsSelected(Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_selection_iter_is_selected(Handle, ref iter);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_selection_path_is_selected(IntPtr raw, IntPtr path);

		public bool PathIsSelected(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_selection_path_is_selected(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_select_all(IntPtr raw);

		public void SelectAll() {
			gtk_tree_selection_select_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_select_iter(IntPtr raw, ref Gtk.TreeIter iter);

		public void SelectIter(Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_select_iter(Handle, ref iter);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_select_path(IntPtr raw, IntPtr path);

		public void SelectPath(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_select_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_select_range(IntPtr raw, IntPtr start_path, IntPtr end_path);

		public void SelectRange(Gtk.TreePath start_path, Gtk.TreePath end_path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_select_range(Handle, start_path == null ? IntPtr.Zero : start_path.Handle, end_path == null ? IntPtr.Zero : end_path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_selected_foreach(IntPtr raw, GtkSharp.TreeSelectionForeachFuncNative func, IntPtr data);

		public void SelectedForeach(Gtk.TreeSelectionForeachFunc func) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (func);
			gtk_tree_selection_selected_foreach(Handle, (func == null) ? null : GtkSharp.TreeSelectionForeachFuncWrapper.NativeDelegate, (IntPtr)gch);
			gch.Free();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_set_select_function(IntPtr raw, GtkSharp.TreeSelectionFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public Gtk.TreeSelectionFunc SelectFunction { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_selection_set_select_function(Handle, (value == null) ? null : GtkSharp.TreeSelectionFuncWrapper.NativeDelegate, data, destroy);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_unselect_all(IntPtr raw);

		public void UnselectAll() {
			gtk_tree_selection_unselect_all(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_unselect_iter(IntPtr raw, ref Gtk.TreeIter iter);

		public void UnselectIter(Gtk.TreeIter iter) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_unselect_iter(Handle, ref iter);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_unselect_path(IntPtr raw, IntPtr path);

		public void UnselectPath(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_unselect_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_selection_unselect_range(IntPtr raw, IntPtr start_path, IntPtr end_path);

		public void UnselectRange(Gtk.TreePath start_path, Gtk.TreePath end_path) {
			Gtk.Application.AssertMainThread();
			gtk_tree_selection_unselect_range(Handle, start_path == null ? IntPtr.Zero : start_path.Handle, end_path == null ? IntPtr.Zero : end_path.Handle);
		}

#endregion
#region Customized extensions
#line 1 "TreeSelection.custom"
// TreeSelection.custom - customizations to Gtk.TreeSelection
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_selected_rows (IntPtr raw, IntPtr model);

		public TreePath[] GetSelectedRows ()
		{
			IntPtr list_ptr = gtk_tree_selection_get_selected_rows (Handle, IntPtr.Zero);
			if (list_ptr == IntPtr.Zero)
				return new TreePath [0];

			return GLib.Marshaller.ListPtrToArray<Gtk.TreePath> (list_ptr, typeof (GLib.List), true, true);
		}

		[Obsolete ("Replaced by SelectFunction property.")]
		public void SetSelectFunction (Gtk.TreeSelectionFunc func, IntPtr data, Gtk.DestroyNotify destroy) 
		{
			SelectFunction = func;
		}

		[DllImport("libgtk-win32-2.0-0.dll", EntryPoint="gtk_tree_selection_get_selected", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gtk_tree_selection_get_selected_without_model (IntPtr raw, IntPtr model, out Gtk.TreeIter iter);
		
		public bool GetSelected (out Gtk.TreeIter iter)
		{
			return gtk_tree_selection_get_selected_without_model (Handle, IntPtr.Zero, out iter);
		}

#endregion
	}

	internal class TreeSelectionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_selection_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_selection_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
