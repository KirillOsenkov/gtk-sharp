// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RadioToolButton]
	public class RadioToolButton : Gtk.ToggleToolButton {

		[Obsolete]
		protected RadioToolButton(GLib.GType gtype) : base(gtype) {}
		public RadioToolButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_new_from_widget(IntPtr group);

		public RadioToolButton (Gtk.RadioToolButton group) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioToolButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (group != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("group");
						vals[param_count++] = new GLib.Value (group);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_radio_tool_button_new_from_widget(group == null ? IntPtr.Zero : group.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_new_with_stock_from_widget(IntPtr group, IntPtr stock_id);

		public RadioToolButton (Gtk.RadioToolButton group, string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioToolButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (group != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("group");
						vals[param_count++] = new GLib.Value (group);
					}
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[param_count++] = new GLib.Value (stock_id);
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_radio_tool_button_new_with_stock_from_widget(group == null ? IntPtr.Zero : group.Handle, native_stock_id);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_get_group(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_tool_button_set_group(IntPtr raw, IntPtr group);

		[GLib.Property ("group")]
		public GLib.SList Group {
			get  {
				IntPtr raw_ret = gtk_radio_tool_button_get_group(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_radio_tool_button_set_group(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_radio_tool_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "RadioToolButton.custom"
// Gtk.RadioToolButton.custom - Gtk RadioToolButton class customizations
//
// Author: Mike Kestner <mkestner@novell.com> 
//
// Copyright (c) 2006 Novell, Inc. 
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_new (IntPtr group);

		public RadioToolButton (GLib.SList group) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioToolButton)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				Group = group;
				return;
			}
			owned = true;
			Raw = gtk_radio_tool_button_new(group == null ? IntPtr.Zero : group.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_new_from_stock (IntPtr group, IntPtr stock_id);

		public RadioToolButton (GLib.SList group, string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioToolButton)) {
				unsafe {
					var vals = stackalloc GLib.Value [1];
					var names = stackalloc IntPtr [1];
					vals [0] = new GLib.Value (stock_id);
					names [0] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					CreateNativeObject (names, vals, 0);
				}
				Group = group;
				return;
			}
			owned = true;
			IntPtr stock_id_as_native = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			Raw = gtk_radio_tool_button_new_from_stock(group == null ? IntPtr.Zero : group.Handle, stock_id_as_native);
			GLib.Marshaller.Free (stock_id_as_native);
		}


#endregion
	}

	internal class RadioToolButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_tool_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_radio_tool_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
