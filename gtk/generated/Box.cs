// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Box]
	public class Box : Gtk.Container {

		[Obsolete]
		protected Box(GLib.GType gtype) : base(gtype) {}
		public Box(IntPtr raw) : base(raw) {}

		protected Box() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_box_get_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_set_spacing(IntPtr raw, int spacing);

		[GLib.Property ("spacing")]
		public int Spacing {
			get  {
				int raw_ret = gtk_box_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_box_set_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_box_get_homogeneous(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_set_homogeneous(IntPtr raw, bool homogeneous);

		[GLib.Property ("homogeneous")]
		public bool Homogeneous {
			get  {
				bool raw_ret = gtk_box_get_homogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_box_set_homogeneous(Handle, value);
			}
		}

		public class BoxChild : Gtk.Container.ContainerChild {
			protected internal BoxChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("expand")]
			public bool Expand {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "expand")) {
						bool ret = (bool) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "expand", val);
					}
				}
			}

			[Gtk.ChildProperty ("fill")]
			public bool Fill {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "fill")) {
						bool ret = (bool) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "fill", val);
					}
				}
			}

			[Gtk.ChildProperty ("padding")]
			public uint Padding {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "padding")) {
						uint ret = (uint) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "padding", val);
					}
				}
			}

			[Gtk.ChildProperty ("pack-type")]
			public Gtk.PackType PackType {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "pack-type")) {
						Gtk.PackType ret = (Gtk.PackType) (Enum) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value((Enum) value)) {
						parent.ChildSetProperty(child, "pack-type", val);
					}
				}
			}

			[Gtk.ChildProperty ("position")]
			public int Position {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "position")) {
						int ret = (int) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "position", val);
					}
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new BoxChild (this, child);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_box_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_box_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_pack_end(IntPtr raw, IntPtr child, bool expand, bool fill, uint padding);

		public void PackEnd(Gtk.Widget child, bool expand, bool fill, uint padding) {
			Gtk.Application.AssertMainThread();
			gtk_box_pack_end(Handle, child == null ? IntPtr.Zero : child.Handle, expand, fill, padding);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_pack_end_defaults(IntPtr raw, IntPtr widget);

		public void PackEnd(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			gtk_box_pack_end_defaults(Handle, widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_pack_start(IntPtr raw, IntPtr child, bool expand, bool fill, uint padding);

		public void PackStart(Gtk.Widget child, bool expand, bool fill, uint padding) {
			Gtk.Application.AssertMainThread();
			gtk_box_pack_start(Handle, child == null ? IntPtr.Zero : child.Handle, expand, fill, padding);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_pack_start_defaults(IntPtr raw, IntPtr widget);

		public void PackStart(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			gtk_box_pack_start_defaults(Handle, widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_query_child_packing(IntPtr raw, IntPtr child, out bool expand, out bool fill, out uint padding, out int pack_type);

		public void QueryChildPacking(Gtk.Widget child, out bool expand, out bool fill, out uint padding, out Gtk.PackType pack_type) {
			Gtk.Application.AssertMainThread();
			int native_pack_type;
			gtk_box_query_child_packing(Handle, child == null ? IntPtr.Zero : child.Handle, out expand, out fill, out padding, out native_pack_type);
			pack_type = (Gtk.PackType) native_pack_type;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_reorder_child(IntPtr raw, IntPtr child, int position);

		public void ReorderChild(Gtk.Widget child, int position) {
			Gtk.Application.AssertMainThread();
			gtk_box_reorder_child(Handle, child == null ? IntPtr.Zero : child.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_box_set_child_packing(IntPtr raw, IntPtr child, bool expand, bool fill, uint padding, int pack_type);

		public void SetChildPacking(Gtk.Widget child, bool expand, bool fill, uint padding, Gtk.PackType pack_type) {
			Gtk.Application.AssertMainThread();
			gtk_box_set_child_packing(Handle, child == null ? IntPtr.Zero : child.Handle, expand, fill, padding, (int) pack_type);
		}

#endregion
	}

	internal class BoxAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_box_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_box_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
