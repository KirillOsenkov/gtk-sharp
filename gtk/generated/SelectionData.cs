// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SelectionData]
	public class SelectionData : GLib.Opaque {

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_selectiondata_get_selection_offset ();

		static uint selection_offset = gtksharp_gtk_selectiondata_get_selection_offset ();
		public Gdk.Atom Selection {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + selection_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gdk.Atom), false);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_selectiondata_get_target_offset ();

		static uint target_offset = gtksharp_gtk_selectiondata_get_target_offset ();
		public Gdk.Atom Target {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + target_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gdk.Atom), false);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_selectiondata_get_type_offset ();

		static uint type_offset = gtksharp_gtk_selectiondata_get_type_offset ();
		public Gdk.Atom Type {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + type_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gdk.Atom), false);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_selectiondata_get_format_offset ();

		static uint format_offset = gtksharp_gtk_selectiondata_get_format_offset ();
		public int Format {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + format_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_selectiondata_get_length_offset ();

		static uint length_offset = gtksharp_gtk_selectiondata_get_length_offset ();
		public int Length {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_selection_data_copy(IntPtr raw);

		public Gtk.SelectionData Copy() {
			IntPtr raw_ret = gtk_selection_data_copy(Handle);
			Gtk.SelectionData ret = raw_ret == IntPtr.Zero ? null : (Gtk.SelectionData) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SelectionData), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_selection_data_get_pixbuf(IntPtr raw);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gtk_selection_data_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_selection_data_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_selection_data_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_selection_data_get_uris(IntPtr raw);

		public string[] SelectedUris { 
			get {
				IntPtr raw_ret = gtk_selection_data_get_uris(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_data_set(IntPtr raw, IntPtr type, int format, byte[] data, int length);

		public void Set(Gdk.Atom type, int format, byte[] data, int length) {
			Gtk.Application.AssertMainThread();
			gtk_selection_data_set(Handle, type == null ? IntPtr.Zero : type.Handle, format, data, length);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_set_pixbuf(IntPtr raw, IntPtr pixbuf);

		public bool SetPixbuf(Gdk.Pixbuf pixbuf) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_data_set_pixbuf(Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_set_uris(IntPtr raw, IntPtr[] uris);

		public bool SetSelectedUris(string[] uris) {
			Gtk.Application.AssertMainThread();
			int cnt_uris = uris == null ? 0 : uris.Length;
			IntPtr[] native_uris = new IntPtr [cnt_uris + 1];
			for (int i = 0; i < cnt_uris; i++) {
				native_uris [i] = GLib.Marshaller.StringToPtrGStrdup(uris[i]);
			}
			native_uris [cnt_uris] = IntPtr.Zero;
			bool raw_ret = gtk_selection_data_set_uris(Handle, native_uris);
			bool ret = raw_ret;
			for (int i = 0; i < cnt_uris; i++) {
				GLib.Marshaller.Free (native_uris[i]);
			}
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_targets_include_image(IntPtr raw, bool writable);

		public bool TargetsIncludeImage(bool writable) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_data_targets_include_image(Handle, writable);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_targets_include_rich_text(IntPtr raw, IntPtr buffer);

		public bool TargetsIncludeRichText(Gtk.TextBuffer buffer) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_data_targets_include_rich_text(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_targets_include_text(IntPtr raw);

		public bool TargetsIncludeText() {
			bool raw_ret = gtk_selection_data_targets_include_text(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_targets_include_uri(IntPtr raw);

		public bool TargetsIncludeUri() {
			bool raw_ret = gtk_selection_data_targets_include_uri(Handle);
			bool ret = raw_ret;
			return ret;
		}

		public SelectionData(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_data_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_selection_data_free (raw);
		}

		[Obsolete("Gtk.SelectionData is now freed automatically")]
		public void Free () {}

#endregion
#region Customized extensions
#line 1 "SelectionData.custom"
// SelectionData.custom - customizations for Gtk.SelectionData
//
// Authors:  Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004  Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		private static extern IntPtr gtk_selection_data_get_text (IntPtr selection_data);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		private static extern void gtk_selection_data_set_text (IntPtr selection_data, IntPtr str, int len);

		public string Text {
			get {
				IntPtr text = gtk_selection_data_get_text (Handle);
				if (text == IntPtr.Zero)
					return null;
				return GLib.Marshaller.PtrToStringGFree (text);
			}
			set {
				IntPtr native = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_selection_data_set_text (Handle, native, -1);
				GLib.Marshaller.Free (native);
			}
		}

		[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		private static extern IntPtr gtksharp_gtk_selection_data_get_data_pointer (IntPtr selection_data);

		public byte[] Data {
			get {
				IntPtr data_ptr = gtksharp_gtk_selection_data_get_data_pointer (Handle);
				byte[] result = new byte [Length];
				Marshal.Copy (data_ptr, result, 0, Length);
				return result;
			}
		}

		public void Set(Gdk.Atom type, int format, byte[] data) {
			Set(type, format, data, data.Length);
		}

		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_free (IntPtr ptr);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gtk_selection_data_get_targets(IntPtr raw, out IntPtr targets, out int n_atoms);

		public Gdk.Atom [] Targets {
			get {
				IntPtr target_ptr;
				int count;
				if (gtk_selection_data_get_targets (Handle, out target_ptr, out count)) {
					Gdk.Atom[] result = new Gdk.Atom [count];
					for (int i = 0; i < count; i++) {
						IntPtr atom = Marshal.ReadIntPtr (target_ptr, count * IntPtr.Size);
						result [i] = new Gdk.Atom (atom);
					}
					g_free (target_ptr);
					return result;
				} else
					return new Gdk.Atom [0];
			}
		}

		[Obsolete ("Use SetSelectedUris instead")]
		public bool SetUris(string uris)
		{
			return SetSelectedUris (new [] { uris });
		}

		[Obsolete ("Use SelectedUris instead")]
		public string Uris {
			get {
				var res = SelectedUris;
				if (res.Length > 0)
					return res [0];
				return null;
			}
		}

#endregion
	}

	internal class SelectionDataAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_selection_data_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_selection_data_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
