// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Tooltip]
	public class Tooltip : GLib.Object {

		public Tooltip(IntPtr raw) : base(raw) {}

		protected Tooltip() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tooltip_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tooltip_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_custom(IntPtr raw, IntPtr custom_widget);

		public Gtk.Widget Custom { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_tooltip_set_custom(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf Icon { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_tooltip_set_icon(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon_from_stock(IntPtr raw, IntPtr stock_id, int size);

		public void SetIconFromStock(string stock_id, Gtk.IconSize size) {
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_tooltip_set_icon_from_stock(Handle, native_stock_id, (int) size);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_markup(IntPtr raw, IntPtr markup);

		public string Markup { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_tooltip_set_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_text(IntPtr raw, IntPtr text);

		public string Text { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_tooltip_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_tip_area(IntPtr raw, ref Gdk.Rectangle value);

		public Gdk.Rectangle TipArea { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_tooltip_set_tip_area(Handle, ref value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_trigger_tooltip_query(IntPtr display);

		public static void TriggerTooltipQuery(Gdk.Display display) {
			Gtk.Application.AssertMainThread();
			gtk_tooltip_trigger_tooltip_query(display == null ? IntPtr.Zero : display.Handle);
		}

#endregion
	}

	internal class TooltipAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tooltip_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tooltip_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
