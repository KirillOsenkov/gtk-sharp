// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Selection {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_add_target(IntPtr widget, IntPtr selection, IntPtr target, uint info);

		public static void AddTarget(Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint info) {
			Gtk.Application.AssertMainThread();
			gtk_selection_add_target(widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle, target == null ? IntPtr.Zero : target.Handle, info);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_add_targets(IntPtr widget, IntPtr selection, ref Gtk.TargetEntry targets, uint ntargets);

		public static void AddTargets(Gtk.Widget widget, Gdk.Atom selection, Gtk.TargetEntry targets, uint ntargets) {
			Gtk.Application.AssertMainThread();
			gtk_selection_add_targets(widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle, ref targets, ntargets);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_clear(IntPtr widget, IntPtr evnt);

		[Obsolete]
		public static bool Clear(Gtk.Widget widget, Gdk.EventSelection evnt) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_clear(widget == null ? IntPtr.Zero : widget.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_clear_targets(IntPtr widget, IntPtr selection);

		public static void ClearTargets(Gtk.Widget widget, Gdk.Atom selection) {
			Gtk.Application.AssertMainThread();
			gtk_selection_clear_targets(widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_convert(IntPtr widget, IntPtr selection, IntPtr target, uint time_);

		public static bool Convert(Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint time_) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_convert(widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle, target == null ? IntPtr.Zero : target.Handle, time_);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_owner_set(IntPtr widget, IntPtr selection, uint time_);

		public static bool OwnerSet(Gtk.Widget widget, Gdk.Atom selection, uint time_) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_owner_set(widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle, time_);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_selection_owner_set_for_display(IntPtr display, IntPtr widget, IntPtr selection, uint time_);

		public static bool OwnerSetForDisplay(Gdk.Display display, Gtk.Widget widget, Gdk.Atom selection, uint time_) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_selection_owner_set_for_display(display == null ? IntPtr.Zero : display.Handle, widget == null ? IntPtr.Zero : widget.Handle, selection == null ? IntPtr.Zero : selection.Handle, time_);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_selection_remove_all(IntPtr widget);

		public static void RemoveAll(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			gtk_selection_remove_all(widget == null ? IntPtr.Zero : widget.Handle);
		}

#endregion
	}
}
