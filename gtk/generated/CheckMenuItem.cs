// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[CheckMenuItem]
	public class CheckMenuItem : Gtk.MenuItem {

		[Obsolete]
		protected CheckMenuItem(GLib.GType gtype) : base(gtype) {}
		public CheckMenuItem(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_check_menu_item_new();

		public CheckMenuItem () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CheckMenuItem)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_check_menu_item_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_check_menu_item_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_check_menu_item_set_active(IntPtr raw, bool is_active);

		[GLib.Property ("active")]
		public bool Active {
			get  {
				bool raw_ret = gtk_check_menu_item_get_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_check_menu_item_set_active(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_check_menu_item_get_inconsistent(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_check_menu_item_set_inconsistent(IntPtr raw, bool setting);

		[GLib.Property ("inconsistent")]
		public bool Inconsistent {
			get  {
				bool raw_ret = gtk_check_menu_item_get_inconsistent(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_check_menu_item_set_inconsistent(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_check_menu_item_get_draw_as_radio(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_check_menu_item_set_draw_as_radio(IntPtr raw, bool draw_as_radio);

		[GLib.Property ("draw-as-radio")]
		public bool DrawAsRadio {
			get  {
				bool raw_ret = gtk_check_menu_item_get_draw_as_radio(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_check_menu_item_set_draw_as_radio(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr check_menu_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_checkmenuitem_override_toggled (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr check_menu_item)
		{
			try {
				CheckMenuItem check_menu_item_managed = GLib.Object.GetObject (check_menu_item, false) as CheckMenuItem;
				check_menu_item_managed.OnToggled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_checkmenuitem_override_toggled (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_checkmenuitem_base_toggled (IntPtr check_menu_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CheckMenuItem), ConnectionMethod="OverrideToggled")]
		protected new virtual void OnToggled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_checkmenuitem_base_toggled (Handle);
		}

		[GLib.Signal("toggled")]
		public new event System.EventHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_check_menu_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_check_menu_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_check_menu_item_set_show_toggle(IntPtr raw, bool always);

		[Obsolete]
		public bool ShowToggle { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_check_menu_item_set_show_toggle(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_check_menu_item_toggled(IntPtr raw);

		public void EmitToggled() {
			gtk_check_menu_item_toggled(Handle);
		}

#endregion
#region Customized extensions
#line 1 "CheckMenuItem.custom"
// Gtk.CheckMenuItem.custom - Gtk CheckMenuItem class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_check_menu_item_new_with_mnemonic (IntPtr label);

		public CheckMenuItem (string label) : base (IntPtr.Zero)
		{
			if (GetType() != typeof (CheckMenuItem)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				AccelLabel al = new AccelLabel ("");
				al.TextWithMnemonic = label;
				al.SetAlignment (0.0f, 0.5f);
				Add (al);
				al.AccelWidget = this;
				return;
			}

			owned = true;
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (label);
			Raw = gtk_check_menu_item_new_with_mnemonic (native);
			GLib.Marshaller.Free (native);
		}

		public new void Toggle() {
			Active = !Active;
		}


#endregion
	}

	internal class CheckMenuItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_check_menu_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_check_menu_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
