// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Scale]
	public class Scale : Gtk.Range {

		[Obsolete]
		protected Scale(GLib.GType gtype) : base(gtype) {}
		public Scale(IntPtr raw) : base(raw) {}

		protected Scale() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scale_get_digits(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_digits(IntPtr raw, int digits);

		[GLib.Property ("digits")]
		public int Digits {
			get  {
				int raw_ret = gtk_scale_get_digits(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scale_set_digits(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_scale_get_draw_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_draw_value(IntPtr raw, bool draw_value);

		[GLib.Property ("draw-value")]
		public bool DrawValue {
			get  {
				bool raw_ret = gtk_scale_get_draw_value(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scale_set_draw_value(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scale_get_value_pos(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_set_value_pos(IntPtr raw, int pos);

		[GLib.Property ("value-pos")]
		public Gtk.PositionType ValuePos {
			get  {
				int raw_ret = gtk_scale_get_value_pos(Handle);
				Gtk.PositionType ret = (Gtk.PositionType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scale_set_value_pos(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr FormatValueVMDelegate (IntPtr scale, double value);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scale_override_format_value (IntPtr gtype, FormatValueVMDelegate cb);

		static FormatValueVMDelegate FormatValueVMCallback;

		static IntPtr formatvalue_cb (IntPtr scale, double value)
		{
			try {
				Scale scale_managed = GLib.Object.GetObject (scale, false) as Scale;
				string raw_ret = scale_managed.OnFormatValue (value);
				return GLib.Marshaller.StringToPtrGStrdup(raw_ret);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideFormatValue (GLib.GType gtype)
		{
			if (FormatValueVMCallback == null)
				FormatValueVMCallback = new FormatValueVMDelegate (formatvalue_cb);
			gtksharp_scale_override_format_value (gtype.Val, FormatValueVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_scale_base_format_value (IntPtr scale, double value);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Scale), ConnectionMethod="OverrideFormatValue")]
		protected virtual string OnFormatValue (double value)
		{
			Gtk.Application.AssertMainThread();
			IntPtr __ret = gtksharp_scale_base_format_value (Handle, value);
			return GLib.Marshaller.PtrToStringGFree(__ret);
		}

		[GLib.Signal("format_value")]
		public event Gtk.FormatValueHandler FormatValue {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "format_value", typeof (Gtk.FormatValueArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "format_value", typeof (Gtk.FormatValueArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_get_layout(IntPtr raw);

		public Pango.Layout Layout { 
			get {
				IntPtr raw_ret = gtk_scale_get_layout(Handle);
				Pango.Layout ret = GLib.Object.GetObject(raw_ret) as Pango.Layout;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_get_layout_offsets(IntPtr raw, out int x, out int y);

		public void GetLayoutOffsets(out int x, out int y) {
			Gtk.Application.AssertMainThread();
			gtk_scale_get_layout_offsets(Handle, out x, out y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_scale_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ScaleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_scale_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
