// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ButtonBox]
	public class ButtonBox : Gtk.Box {

		[Obsolete]
		protected ButtonBox(GLib.GType gtype) : base(gtype) {}
		public ButtonBox(IntPtr raw) : base(raw) {}

		protected ButtonBox() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[GLib.Property ("layout-style")]
		public Gtk.ButtonBoxStyle LayoutStyle {
			get {
				using (GLib.Value val = GetProperty ("layout-style")) {
					Gtk.ButtonBoxStyle ret = (Gtk.ButtonBoxStyle) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("layout-style", val);
				}
			}
		}

		public class ButtonBoxChild : Gtk.Box.BoxChild {
			protected internal ButtonBoxChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("secondary")]
			public bool Secondary {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "secondary")) {
						bool ret = (bool) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "secondary", val);
					}
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new ButtonBoxChild (this, child);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_get_child_ipadding(IntPtr raw, out int ipad_x, out int ipad_y);

		[Obsolete]
		public void GetChildIpadding(out int ipad_x, out int ipad_y) {
			Gtk.Application.AssertMainThread();
			gtk_button_box_get_child_ipadding(Handle, out ipad_x, out ipad_y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_button_box_get_child_secondary(IntPtr raw, IntPtr child);

		public bool GetChildSecondary(Gtk.Widget child) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_button_box_get_child_secondary(Handle, child == null ? IntPtr.Zero : child.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_get_child_size(IntPtr raw, out int min_width, out int min_height);

		[Obsolete]
		public void GetChildSize(out int min_width, out int min_height) {
			Gtk.Application.AssertMainThread();
			gtk_button_box_get_child_size(Handle, out min_width, out min_height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_button_box_get_layout(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_layout(IntPtr raw, int layout_style);

		public Gtk.ButtonBoxStyle Layout { 
			get {
				int raw_ret = gtk_button_box_get_layout(Handle);
				Gtk.ButtonBoxStyle ret = (Gtk.ButtonBoxStyle) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_button_box_set_layout(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_button_box_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_button_box_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_child_ipadding(IntPtr raw, int ipad_x, int ipad_y);

		[Obsolete]
		public void SetChildIpadding(int ipad_x, int ipad_y) {
			Gtk.Application.AssertMainThread();
			gtk_button_box_set_child_ipadding(Handle, ipad_x, ipad_y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_child_secondary(IntPtr raw, IntPtr child, bool is_secondary);

		public void SetChildSecondary(Gtk.Widget child, bool is_secondary) {
			Gtk.Application.AssertMainThread();
			gtk_button_box_set_child_secondary(Handle, child == null ? IntPtr.Zero : child.Handle, is_secondary);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_child_size(IntPtr raw, int min_width, int min_height);

		[Obsolete]
		public void SetChildSize(int min_width, int min_height) {
			Gtk.Application.AssertMainThread();
			gtk_button_box_set_child_size(Handle, min_width, min_height);
		}

#endregion
	}

	internal class ButtonBoxAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_button_box_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_button_box_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
