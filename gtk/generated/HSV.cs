// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[HSV]
	public class HSV : Gtk.Widget {

		[Obsolete]
		protected HSV(GLib.GType gtype) : base(gtype) {}
		public HSV(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_hsv_new();

		public HSV () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (HSV)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_hsv_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr hsv);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr hsv)
		{
			try {
				HSV hsv_managed = GLib.Object.GetObject (hsv, false) as HSV;
				hsv_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			OverrideVirtualMethod (gtype, "changed", ChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.HSV), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveVMDelegate (IntPtr hsv, int type);

		static MoveVMDelegate MoveVMCallback;

		static void move_cb (IntPtr hsv, int type)
		{
			try {
				HSV hsv_managed = GLib.Object.GetObject (hsv, false) as HSV;
				hsv_managed.OnMove ((Gtk.DirectionType) type);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMove (GLib.GType gtype)
		{
			if (MoveVMCallback == null)
				MoveVMCallback = new MoveVMDelegate (move_cb);
			OverrideVirtualMethod (gtype, "move", MoveVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.HSV), ConnectionMethod="OverrideMove")]
		protected virtual void OnMove (Gtk.DirectionType type)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (type)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("move")]
		public event Gtk.MoveHandler Move {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move", typeof (Gtk.MoveArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move", typeof (Gtk.MoveArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_hsv_get_color(IntPtr raw, out double h, out double s, out double v);

		public void GetColor(out double h, out double s, out double v) {
			Gtk.Application.AssertMainThread();
			gtk_hsv_get_color(Handle, out h, out s, out v);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_hsv_get_metrics(IntPtr raw, out int size, out int ring_width);

		public void GetMetrics(out int size, out int ring_width) {
			Gtk.Application.AssertMainThread();
			gtk_hsv_get_metrics(Handle, out size, out ring_width);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_hsv_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_hsv_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_hsv_is_adjusting(IntPtr raw);

		public bool IsAdjusting { 
			get {
				bool raw_ret = gtk_hsv_is_adjusting(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_hsv_set_color(IntPtr raw, double h, double s, double v);

		public void SetColor(double h, double s, double v) {
			Gtk.Application.AssertMainThread();
			gtk_hsv_set_color(Handle, h, s, v);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_hsv_set_metrics(IntPtr raw, int size, int ring_width);

		public void SetMetrics(int size, int ring_width) {
			Gtk.Application.AssertMainThread();
			gtk_hsv_set_metrics(Handle, size, ring_width);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_hsv_to_rgb(double h, double s, double v, out double r, out double g, out double b);

		public static void ToRgb(double h, double s, double v, out double r, out double g, out double b) {
			Gtk.Application.AssertMainThread();
			gtk_hsv_to_rgb(h, s, v, out r, out g, out b);
		}

#endregion
	}

	internal class HSVAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_hsv_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_hsv_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
