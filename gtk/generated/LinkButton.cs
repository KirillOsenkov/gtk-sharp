// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[LinkButton]
	public class LinkButton : Gtk.Button {

		[Obsolete]
		protected LinkButton(GLib.GType gtype) : base(gtype) {}
		public LinkButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_link_button_new(IntPtr uri);

		public LinkButton (string uri) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (LinkButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("uri");
					vals[0] = new GLib.Value (uri);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			owned = true;
			Raw = gtk_link_button_new(native_uri);
			GLib.Marshaller.Free (native_uri);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_link_button_new_with_label(IntPtr uri, IntPtr label);

		public LinkButton (string uri, string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (LinkButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("uri");
					vals[0] = new GLib.Value (uri);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[1] = new GLib.Value (label);
					CreateNativeObject (names, vals, 2);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_link_button_new_with_label(native_uri, native_label);
			GLib.Marshaller.Free (native_uri);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_link_button_get_uri(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_link_button_set_uri(IntPtr raw, IntPtr uri);

		[GLib.Property ("uri")]
		public string Uri {
			get  {
				IntPtr raw_ret = gtk_link_button_get_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_link_button_set_uri(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_link_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_link_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "LinkButton.custom"
//  Gtk.LinkButton.custom - Gtk LinkButton customizations
//
//  Authors:  Marius Ungureanu <maungu@microsoft.com>
//
//  Copyright (c) 2017 Microsoft, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.LinkButtonUriFuncNative gtk_link_button_set_uri_hook(GtkSharp.LinkButtonUriFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		static WeakReference<Gtk.LinkButtonUriFunc> lastUriHook = new WeakReference<Gtk.LinkButtonUriFunc> (null);
		public static Gtk.LinkButtonUriFunc SetUriHook(Gtk.LinkButtonUriFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr data;
			GLib.DestroyNotify destroy;

			Gtk.LinkButtonUriFunc toRet;
			lastUriHook.TryGetTarget (out toRet);
			if (func == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			lastUriHook.SetTarget (func);
			GtkSharp.LinkButtonUriFuncNative raw_ret = gtk_link_button_set_uri_hook(GtkSharp.LinkButtonUriFuncWrapper.NativeDelegate, data, destroy);
			if (raw_ret == GtkSharp.LinkButtonUriFuncWrapper.NativeDelegate)
				return toRet;

			if (raw_ret == null)
				return null;

			Gtk.LinkButtonUriFunc ret = new GtkSharp.LinkButtonUriFuncInvoker (raw_ret).Handler;
			return ret;
		}
#endregion
	}

	internal class LinkButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_link_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_link_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
