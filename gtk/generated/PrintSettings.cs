// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PrintSettings]
	public class PrintSettings : GLib.Object {

		[Obsolete]
		protected PrintSettings(GLib.GType gtype) : base(gtype) {}
		public PrintSettings(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_new();

		public PrintSettings () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintSettings)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_print_settings_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gtk_print_settings_new_from_file(IntPtr file_name, out IntPtr error);

		public unsafe PrintSettings (string file_name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintSettings)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_file_name = GLib.Marshaller.StringToFilenamePtr (file_name);
			IntPtr error = IntPtr.Zero;
			owned = true;
			Raw = gtk_print_settings_new_from_file(native_file_name, out error);
			GLib.Marshaller.Free (native_file_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_copy(IntPtr raw);

		public Gtk.PrintSettings Copy() {
			IntPtr raw_ret = gtk_print_settings_copy(Handle);
			Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret, true) as Gtk.PrintSettings;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_foreach(IntPtr raw, GtkSharp.PrintSettingsFuncNative func, IntPtr user_data);

		public void Foreach(Gtk.PrintSettingsFunc func) {
			Gtk.Application.AssertMainThread();
			GCHandle gch = GCHandle.Alloc (func);
			gtk_print_settings_foreach(Handle, (func == null) ? null : GtkSharp.PrintSettingsFuncWrapper.NativeDelegate, (IntPtr)gch);
			gch.Free();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get(IntPtr raw, IntPtr key);

		public string Get(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr raw_ret = gtk_print_settings_get(Handle, native_key);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_settings_get_bool(IntPtr raw, IntPtr key);

		public bool GetBool(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			bool raw_ret = gtk_print_settings_get_bool(Handle, native_key);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_settings_get_collate(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_collate(IntPtr raw, bool collate);

		public bool Collate { 
			get {
				bool raw_ret = gtk_print_settings_get_collate(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_collate(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_default_source(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_default_source(IntPtr raw, IntPtr default_source);

		public string DefaultSource { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_default_source(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_default_source(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_dither(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_dither(IntPtr raw, IntPtr dither);

		public string Dither { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_dither(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_dither(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_double(IntPtr raw, IntPtr key);

		public double GetDouble(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			double raw_ret = gtk_print_settings_get_double(Handle, native_key);
			double ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_double_with_default(IntPtr raw, IntPtr key, double def);

		public double GetDoubleWithDefault(string key, double def) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			double raw_ret = gtk_print_settings_get_double_with_default(Handle, native_key, def);
			double ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_duplex(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_duplex(IntPtr raw, int duplex);

		public Gtk.PrintDuplex Duplex { 
			get {
				int raw_ret = gtk_print_settings_get_duplex(Handle);
				Gtk.PrintDuplex ret = (Gtk.PrintDuplex) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_duplex(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_finishings(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_finishings(IntPtr raw, IntPtr finishings);

		public string Finishings { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_finishings(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_finishings(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_int(IntPtr raw, IntPtr key);

		public int GetInt(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			int raw_ret = gtk_print_settings_get_int(Handle, native_key);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_int_with_default(IntPtr raw, IntPtr key, int def);

		public int GetIntWithDefault(string key, int def) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			int raw_ret = gtk_print_settings_get_int_with_default(Handle, native_key, def);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_length(IntPtr raw, IntPtr key, int unit);

		public double GetLength(string key, Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			double raw_ret = gtk_print_settings_get_length(Handle, native_key, (int) unit);
			double ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_media_type(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_media_type(IntPtr raw, IntPtr media_type);

		public string MediaType { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_media_type(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_media_type(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_n_copies(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_n_copies(IntPtr raw, int num_copies);

		public int NCopies { 
			get {
				int raw_ret = gtk_print_settings_get_n_copies(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_n_copies(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_number_up(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_number_up(IntPtr raw, int number_up);

		public int NumberUp { 
			get {
				int raw_ret = gtk_print_settings_get_number_up(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_number_up(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_orientation(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_orientation(IntPtr raw, int orientation);

		public Gtk.PageOrientation Orientation { 
			get {
				int raw_ret = gtk_print_settings_get_orientation(Handle);
				Gtk.PageOrientation ret = (Gtk.PageOrientation) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_orientation(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_output_bin(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_output_bin(IntPtr raw, IntPtr output_bin);

		public string OutputBin { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_output_bin(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_output_bin(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_page_set(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_page_set(IntPtr raw, int page_set);

		public Gtk.PageSet PageSet { 
			get {
				int raw_ret = gtk_print_settings_get_page_set(Handle);
				Gtk.PageSet ret = (Gtk.PageSet) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_page_set(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_paper_height(IntPtr raw, int unit);

		public double GetPaperHeight(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_print_settings_get_paper_height(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_paper_size(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_paper_size(IntPtr raw, IntPtr paper_size);

		public Gtk.PaperSize PaperSize { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_paper_size(Handle);
				Gtk.PaperSize ret = raw_ret == IntPtr.Zero ? null : (Gtk.PaperSize) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.PaperSize), false);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_paper_size(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_paper_width(IntPtr raw, int unit);

		public double GetPaperWidth(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_print_settings_get_paper_width(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_print_pages(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_print_pages(IntPtr raw, int pages);

		public Gtk.PrintPages PrintPages { 
			get {
				int raw_ret = gtk_print_settings_get_print_pages(Handle);
				Gtk.PrintPages ret = (Gtk.PrintPages) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_print_pages(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_printer(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_printer(IntPtr raw, IntPtr printer);

		public string Printer { 
			get {
				IntPtr raw_ret = gtk_print_settings_get_printer(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_settings_set_printer(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_quality(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_quality(IntPtr raw, int quality);

		public Gtk.PrintQuality Quality { 
			get {
				int raw_ret = gtk_print_settings_get_quality(Handle);
				Gtk.PrintQuality ret = (Gtk.PrintQuality) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_quality(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_settings_get_resolution(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_resolution(IntPtr raw, int resolution);

		public int Resolution { 
			get {
				int raw_ret = gtk_print_settings_get_resolution(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_resolution(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_settings_get_reverse(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_reverse(IntPtr raw, bool reverse);

		public bool Reverse { 
			get {
				bool raw_ret = gtk_print_settings_get_reverse(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_reverse(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_settings_get_scale(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_scale(IntPtr raw, double scale);

		public double Scale { 
			get {
				double raw_ret = gtk_print_settings_get_scale(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_scale(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_print_settings_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_settings_get_use_color(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_use_color(IntPtr raw, bool use_color);

		public bool UseColor { 
			get {
				bool raw_ret = gtk_print_settings_get_use_color(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_print_settings_set_use_color(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_settings_has_key(IntPtr raw, IntPtr key);

		public bool HasKey(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			bool raw_ret = gtk_print_settings_has_key(Handle, native_key);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set(IntPtr raw, IntPtr key, IntPtr value);

		public void Set(string key, string value) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
			gtk_print_settings_set(Handle, native_key, native_value);
			GLib.Marshaller.Free (native_key);
			GLib.Marshaller.Free (native_value);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_bool(IntPtr raw, IntPtr key, bool value);

		public void SetBool(string key, bool value) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_print_settings_set_bool(Handle, native_key, value);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_double(IntPtr raw, IntPtr key, double value);

		public void SetDouble(string key, double value) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_print_settings_set_double(Handle, native_key, value);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_int(IntPtr raw, IntPtr key, int value);

		public void SetInt(string key, int value) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_print_settings_set_int(Handle, native_key, value);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_length(IntPtr raw, IntPtr key, double value, int unit);

		public void SetLength(string key, double value, Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_print_settings_set_length(Handle, native_key, value, (int) unit);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_page_ranges(IntPtr raw, ref Gtk.PageRange page_ranges, int num_ranges);

		public void SetPageRanges(Gtk.PageRange page_ranges, int num_ranges) {
			Gtk.Application.AssertMainThread();
			gtk_print_settings_set_page_ranges(Handle, ref page_ranges, num_ranges);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_paper_height(IntPtr raw, double height, int unit);

		public void SetPaperHeight(double height, Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			gtk_print_settings_set_paper_height(Handle, height, (int) unit);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_set_paper_width(IntPtr raw, double width, int unit);

		public void SetPaperWidth(double width, Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			gtk_print_settings_set_paper_width(Handle, width, (int) unit);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_print_settings_to_file(IntPtr raw, IntPtr file_name, out IntPtr error);

		public unsafe bool ToFile(string file_name) {
			Gtk.Application.AssertMainThread();
			IntPtr native_file_name = GLib.Marshaller.StringToFilenamePtr (file_name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_print_settings_to_file(Handle, native_file_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_file_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_settings_unset(IntPtr raw, IntPtr key);

		public void Unset(string key) {
			Gtk.Application.AssertMainThread();
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_print_settings_unset(Handle, native_key);
			GLib.Marshaller.Free (native_key);
		}

#endregion
#region Customized extensions
#line 1 "PrintSettings.custom"


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_page_ranges(IntPtr raw, out int num_ranges);

		public Gtk.PageRange[] GetPageRanges(out int num_ranges) {
			IntPtr raw_ret = gtk_print_settings_get_page_ranges(Handle, out num_ranges);
			var ret = new Gtk.PageRange [num_ranges];
			for (int i = 0; i < num_ranges; i++)
				ret[i] = Gtk.PageRange.New (raw_ret + i * IntPtr.Size);

			GLib.Marshaller.Free (raw_ret);
			return ret;
		}


#endregion
	}

	internal class PrintSettingsAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_settings_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_settings_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
