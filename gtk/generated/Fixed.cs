// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Fixed]
	public class Fixed : Gtk.Container {

		[Obsolete]
		protected Fixed(GLib.GType gtype) : base(gtype) {}
		public Fixed(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_fixed_new();

		public Fixed () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Fixed)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_fixed_new();
		}

		public class FixedChild : Gtk.Container.ContainerChild {
			protected internal FixedChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("x")]
			public int X {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "x")) {
						int ret = (int) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "x", val);
					}
				}
			}

			[Gtk.ChildProperty ("y")]
			public int Y {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "y")) {
						int ret = (int) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "y", val);
					}
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new FixedChild (this, child);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_fixed_get_has_window(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_fixed_set_has_window(IntPtr raw, bool has_window);

		public bool HasWindow { 
			get {
				bool raw_ret = gtk_fixed_get_has_window(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_fixed_set_has_window(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_fixed_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_fixed_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_fixed_move(IntPtr raw, IntPtr widget, int x, int y);

		public void Move(Gtk.Widget widget, int x, int y) {
			Gtk.Application.AssertMainThread();
			gtk_fixed_move(Handle, widget == null ? IntPtr.Zero : widget.Handle, x, y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_fixed_put(IntPtr raw, IntPtr widget, int x, int y);

		public void Put(Gtk.Widget widget, int x, int y) {
			Gtk.Application.AssertMainThread();
			gtk_fixed_put(Handle, widget == null ? IntPtr.Zero : widget.Handle, x, y);
		}

#endregion
	}

	internal class FixedAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_fixed_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_fixed_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
