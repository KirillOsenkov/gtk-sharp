// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class TreeDragDestAdapter : GLib.GInterfaceAdapter, Gtk.TreeDragDest {

		static TreeDragDestIface iface;

		struct TreeDragDestIface {
			public IntPtr gtype;
			public IntPtr itype;

			public DragDataReceivedDelegate drag_data_received;
			public RowDropPossibleDelegate row_drop_possible;
		}

		static TreeDragDestAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(TreeDragDestAdapter));
			iface.drag_data_received = new DragDataReceivedDelegate (DragDataReceivedCallback);
			iface.row_drop_possible = new RowDropPossibleDelegate (RowDropPossibleCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DragDataReceivedDelegate (IntPtr drag_dest, IntPtr dest, IntPtr selection_data);

		static bool DragDataReceivedCallback (IntPtr drag_dest, IntPtr dest, IntPtr selection_data)
		{
			try {
				Gtk.TreeDragDestImplementor __obj = GLib.Object.GetObject (drag_dest, false) as Gtk.TreeDragDestImplementor;
				bool __result = __obj.DragDataReceived (dest == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (dest, typeof (Gtk.TreePath), false), selection_data == IntPtr.Zero ? null : (Gtk.SelectionData) GLib.Opaque.GetOpaque (selection_data, typeof (Gtk.SelectionData), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RowDropPossibleDelegate (IntPtr drag_dest, IntPtr dest_path, IntPtr selection_data);

		static bool RowDropPossibleCallback (IntPtr drag_dest, IntPtr dest_path, IntPtr selection_data)
		{
			try {
				Gtk.TreeDragDestImplementor __obj = GLib.Object.GetObject (drag_dest, false) as Gtk.TreeDragDestImplementor;
				bool __result = __obj.RowDropPossible (dest_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (dest_path, typeof (Gtk.TreePath), false), selection_data == IntPtr.Zero ? null : (Gtk.SelectionData) GLib.Opaque.GetOpaque (selection_data, typeof (Gtk.SelectionData), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			TreeDragDestIface native_iface = Marshal.PtrToStructure<TreeDragDestIface> (ifaceptr);
			native_iface.drag_data_received = iface.drag_data_received;
			native_iface.row_drop_possible = iface.row_drop_possible;
			Marshal.StructureToPtr<TreeDragDestIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public TreeDragDestAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		TreeDragDestImplementor implementor;

		public TreeDragDestAdapter (TreeDragDestImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public TreeDragDestAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_drag_dest_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_drag_dest_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static TreeDragDest GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static TreeDragDest GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is TreeDragDestImplementor)
				return new TreeDragDestAdapter (obj as TreeDragDestImplementor);
			else if (obj as TreeDragDest == null)
				return new TreeDragDestAdapter (obj.Handle);
			else
				return obj as TreeDragDest;
		}

		public TreeDragDestImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_drag_dest_drag_data_received(IntPtr raw, IntPtr dest, IntPtr selection_data);

		public bool DragDataReceived(Gtk.TreePath dest, Gtk.SelectionData selection_data) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_drag_dest_drag_data_received(Handle, dest == null ? IntPtr.Zero : dest.Handle, selection_data == null ? IntPtr.Zero : selection_data.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_drag_dest_row_drop_possible(IntPtr raw, IntPtr dest_path, IntPtr selection_data);

		public bool RowDropPossible(Gtk.TreePath dest_path, Gtk.SelectionData selection_data) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_drag_dest_row_drop_possible(Handle, dest_path == null ? IntPtr.Zero : dest_path.Handle, selection_data == null ? IntPtr.Zero : selection_data.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
