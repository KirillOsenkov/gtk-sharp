// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[EntryCompletion]
	public class EntryCompletion : GLib.Object, Gtk.CellLayout {

		[Obsolete]
		protected EntryCompletion(GLib.GType gtype) : base(gtype) {}
		public EntryCompletion(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_new();

		public EntryCompletion () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (EntryCompletion)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_entry_completion_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_get_model(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_model(IntPtr raw, IntPtr model);

		[GLib.Property ("model")]
		public Gtk.TreeModel Model {
			get  {
				IntPtr raw_ret = gtk_entry_completion_get_model(Handle);
				Gtk.TreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_model(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_completion_get_minimum_key_length(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_minimum_key_length(IntPtr raw, int length);

		[GLib.Property ("minimum-key-length")]
		public int MinimumKeyLength {
			get  {
				int raw_ret = gtk_entry_completion_get_minimum_key_length(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_minimum_key_length(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_entry_completion_get_text_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_text_column(IntPtr raw, int column);

		[GLib.Property ("text-column")]
		public int TextColumn {
			get  {
				int raw_ret = gtk_entry_completion_get_text_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_text_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_completion_get_inline_completion(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_inline_completion(IntPtr raw, bool inline_completion);

		[GLib.Property ("inline-completion")]
		public bool InlineCompletion {
			get  {
				bool raw_ret = gtk_entry_completion_get_inline_completion(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_inline_completion(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_completion_get_popup_completion(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_popup_completion(IntPtr raw, bool popup_completion);

		[GLib.Property ("popup-completion")]
		public bool PopupCompletion {
			get  {
				bool raw_ret = gtk_entry_completion_get_popup_completion(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_popup_completion(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_completion_get_popup_set_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_popup_set_width(IntPtr raw, bool popup_set_width);

		[GLib.Property ("popup-set-width")]
		public bool PopupSetWidth {
			get  {
				bool raw_ret = gtk_entry_completion_get_popup_set_width(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_popup_set_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_completion_get_popup_single_match(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_popup_single_match(IntPtr raw, bool popup_single_match);

		[GLib.Property ("popup-single-match")]
		public bool PopupSingleMatch {
			get  {
				bool raw_ret = gtk_entry_completion_get_popup_single_match(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_popup_single_match(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_entry_completion_get_inline_selection(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_inline_selection(IntPtr raw, bool inline_selection);

		[GLib.Property ("inline-selection")]
		public bool InlineSelection {
			get  {
				bool raw_ret = gtk_entry_completion_get_inline_selection(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_entry_completion_set_inline_selection(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PrefixInsertedVMDelegate (IntPtr completion, IntPtr prefix);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_entrycompletion_override_insert_prefix (IntPtr gtype, PrefixInsertedVMDelegate cb);

		static PrefixInsertedVMDelegate PrefixInsertedVMCallback;

		static bool prefixinserted_cb (IntPtr completion, IntPtr prefix)
		{
			try {
				EntryCompletion completion_managed = GLib.Object.GetObject (completion, false) as EntryCompletion;
				return completion_managed.OnPrefixInserted (GLib.Marshaller.Utf8PtrToString (prefix));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverridePrefixInserted (GLib.GType gtype)
		{
			if (PrefixInsertedVMCallback == null)
				PrefixInsertedVMCallback = new PrefixInsertedVMDelegate (prefixinserted_cb);
			gtksharp_entrycompletion_override_insert_prefix (gtype.Val, PrefixInsertedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_entrycompletion_base_insert_prefix (IntPtr completion, IntPtr prefix);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EntryCompletion), ConnectionMethod="OverridePrefixInserted")]
		protected virtual bool OnPrefixInserted (string prefix)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_prefix = GLib.Marshaller.StringToPtrGStrdup (prefix);
			bool __ret = gtksharp_entrycompletion_base_insert_prefix (Handle, native_prefix);
			GLib.Marshaller.Free (native_prefix);
			return __ret;
		}

		[GLib.Signal("insert_prefix")]
		public event Gtk.PrefixInsertedHandler PrefixInserted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "insert_prefix", typeof (Gtk.PrefixInsertedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "insert_prefix", typeof (Gtk.PrefixInsertedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MatchSelectedVMDelegate (IntPtr completion, IntPtr model, IntPtr iter);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_entrycompletion_override_match_selected (IntPtr gtype, MatchSelectedVMDelegate cb);

		static MatchSelectedVMDelegate MatchSelectedVMCallback;

		static bool matchselected_cb (IntPtr completion, IntPtr model, IntPtr iter)
		{
			try {
				EntryCompletion completion_managed = GLib.Object.GetObject (completion, false) as EntryCompletion;
				return completion_managed.OnMatchSelected (Gtk.TreeModelAdapter.GetObject (model, false), Gtk.TreeIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideMatchSelected (GLib.GType gtype)
		{
			if (MatchSelectedVMCallback == null)
				MatchSelectedVMCallback = new MatchSelectedVMDelegate (matchselected_cb);
			gtksharp_entrycompletion_override_match_selected (gtype.Val, MatchSelectedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_entrycompletion_base_match_selected (IntPtr completion, IntPtr model, ref Gtk.TreeIter iter);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EntryCompletion), ConnectionMethod="OverrideMatchSelected")]
		protected virtual bool OnMatchSelected (Gtk.TreeModel model, Gtk.TreeIter iter)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_entrycompletion_base_match_selected (Handle, model == null ? IntPtr.Zero : model.Handle, ref iter);
			return __ret;
		}

		[GLib.Signal("match_selected")]
		public event Gtk.MatchSelectedHandler MatchSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "match_selected", typeof (Gtk.MatchSelectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "match_selected", typeof (Gtk.MatchSelectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CursorOnMatchVMDelegate (IntPtr completion, IntPtr model, IntPtr iter);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_entrycompletion_override_cursor_on_match (IntPtr gtype, CursorOnMatchVMDelegate cb);

		static CursorOnMatchVMDelegate CursorOnMatchVMCallback;

		static bool cursoronmatch_cb (IntPtr completion, IntPtr model, IntPtr iter)
		{
			try {
				EntryCompletion completion_managed = GLib.Object.GetObject (completion, false) as EntryCompletion;
				return completion_managed.OnCursorOnMatch (Gtk.TreeModelAdapter.GetObject (model, false), Gtk.TreeIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideCursorOnMatch (GLib.GType gtype)
		{
			if (CursorOnMatchVMCallback == null)
				CursorOnMatchVMCallback = new CursorOnMatchVMDelegate (cursoronmatch_cb);
			gtksharp_entrycompletion_override_cursor_on_match (gtype.Val, CursorOnMatchVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_entrycompletion_base_cursor_on_match (IntPtr completion, IntPtr model, ref Gtk.TreeIter iter);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EntryCompletion), ConnectionMethod="OverrideCursorOnMatch")]
		protected virtual bool OnCursorOnMatch (Gtk.TreeModel model, Gtk.TreeIter iter)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_entrycompletion_base_cursor_on_match (Handle, model == null ? IntPtr.Zero : model.Handle, ref iter);
			return __ret;
		}

		[GLib.Signal("cursor_on_match")]
		public event Gtk.CursorOnMatchHandler CursorOnMatch {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cursor_on_match", typeof (Gtk.CursorOnMatchArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cursor_on_match", typeof (Gtk.CursorOnMatchArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActionActivatedVMDelegate (IntPtr completion, int index_);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_entrycompletion_override_action_activated (IntPtr gtype, ActionActivatedVMDelegate cb);

		static ActionActivatedVMDelegate ActionActivatedVMCallback;

		static void actionactivated_cb (IntPtr completion, int index_)
		{
			try {
				EntryCompletion completion_managed = GLib.Object.GetObject (completion, false) as EntryCompletion;
				completion_managed.OnActionActivated (index_);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActionActivated (GLib.GType gtype)
		{
			if (ActionActivatedVMCallback == null)
				ActionActivatedVMCallback = new ActionActivatedVMDelegate (actionactivated_cb);
			gtksharp_entrycompletion_override_action_activated (gtype.Val, ActionActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_entrycompletion_base_action_activated (IntPtr completion, int index_);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.EntryCompletion), ConnectionMethod="OverrideActionActivated")]
		protected virtual void OnActionActivated (int index_)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_entrycompletion_base_action_activated (Handle, index_);
		}

		[GLib.Signal("action_activated")]
		public event Gtk.ActionActivatedHandler ActionActivated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action_activated", typeof (Gtk.ActionActivatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action_activated", typeof (Gtk.ActionActivatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_complete(IntPtr raw);

		public void Complete() {
			gtk_entry_completion_complete(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_delete_action(IntPtr raw, int index_);

		public void DeleteAction(int index_) {
			Gtk.Application.AssertMainThread();
			gtk_entry_completion_delete_action(Handle, index_);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_get_completion_prefix(IntPtr raw);

		public string CompletionPrefix { 
			get {
				IntPtr raw_ret = gtk_entry_completion_get_completion_prefix(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_get_entry(IntPtr raw);

		public Gtk.Widget Entry { 
			get {
				IntPtr raw_ret = gtk_entry_completion_get_entry(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_entry_completion_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_insert_action_markup(IntPtr raw, int index_, IntPtr markup);

		public void InsertActionMarkup(int index_, string markup) {
			Gtk.Application.AssertMainThread();
			IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
			gtk_entry_completion_insert_action_markup(Handle, index_, native_markup);
			GLib.Marshaller.Free (native_markup);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_insert_action_text(IntPtr raw, int index_, IntPtr text);

		public void InsertActionText(int index_, string text) {
			Gtk.Application.AssertMainThread();
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gtk_entry_completion_insert_action_text(Handle, index_, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_insert_prefix(IntPtr raw);

		public void InsertPrefix() {
			gtk_entry_completion_insert_prefix(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_entry_completion_set_match_func(IntPtr raw, GtkSharp.EntryCompletionMatchFuncNative func, IntPtr func_data, GLib.DestroyNotify func_notify);

		public Gtk.EntryCompletionMatchFunc MatchFunc { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr func_data;
				GLib.DestroyNotify func_notify;
				if (value == null) {
					func_data = IntPtr.Zero;
					func_notify = null;
				} else {
					func_data = (IntPtr) GCHandle.Alloc (value);
					func_notify = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_entry_completion_set_match_func(Handle, (value == null) ? null : GtkSharp.EntryCompletionMatchFuncWrapper.NativeDelegate, func_data, func_notify);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_add_attribute(IntPtr raw, IntPtr cell, IntPtr attribute, int column);

		public void AddAttribute(Gtk.CellRenderer cell, string attribute, int column) {
			Gtk.Application.AssertMainThread();
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_layout_add_attribute(Handle, cell == null ? IntPtr.Zero : cell.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear(IntPtr raw);

		public void Clear() {
			gtk_cell_layout_clear(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear_attributes(IntPtr raw, IntPtr cell);

		public void ClearAttributes(Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_clear_attributes(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_cells(IntPtr raw);

		public Gtk.CellRenderer[] Cells { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_cells(Handle);
				Gtk.CellRenderer[] ret = GLib.Marshaller.ListPtrToArray<Gtk.CellRenderer> (raw_ret, typeof(GLib.List), true, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_end(IntPtr raw, IntPtr cell, bool expand);

		public void PackEnd(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_end(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_start(IntPtr raw, IntPtr cell, bool expand);

		public void PackStart(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_start(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_reorder(IntPtr raw, IntPtr cell, int position);

		public void Reorder(Gtk.CellRenderer cell, int position) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_reorder(Handle, cell == null ? IntPtr.Zero : cell.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_set_cell_data_func(IntPtr raw, IntPtr cell, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell, Gtk.CellLayoutDataFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_cell_layout_set_cell_data_func(Handle, cell == null ? IntPtr.Zero : cell.Handle, (func == null) ? null : GtkSharp.CellLayoutDataFuncWrapper.NativeDelegate, func_data, destroy);
		}

#endregion
#region Customized extensions
#line 1 "EntryCompletion.custom"
//  Gtk.EntryCompletion.custom - Gtk EntryCompletion customizations
//
//  Authors:  Todd Berman  <tberman@off.net>
//  	      Mike Kestner  <mkestner@novell.com>
//
//  Copyright (c) 2004 Todd Berman
//  Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		public void SetAttributes (CellRenderer cell, params object[] attrs)
		{
			if (attrs.Length % 2 != 0)
				throw new ArgumentException ("attrs should contain pairs of attribute/col");

			ClearAttributes (cell);
			for (int i = 0; i < attrs.Length - 1; i += 2) {
				AddAttribute (cell, (string) attrs [i], (int) attrs [i + 1]);
			}
		}

#endregion
	}

	internal class EntryCompletionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_entry_completion_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_entry_completion_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
