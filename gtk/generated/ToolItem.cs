// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ToolItem]
	public class ToolItem : Gtk.Bin {

		[Obsolete]
		protected ToolItem(GLib.GType gtype) : base(gtype) {}
		public ToolItem(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tool_item_new();

		public ToolItem () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToolItem)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_tool_item_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_visible_horizontal(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_visible_horizontal(IntPtr raw, bool visible_horizontal);

		[GLib.Property ("visible-horizontal")]
		public bool VisibleHorizontal {
			get  {
				bool raw_ret = gtk_tool_item_get_visible_horizontal(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_visible_horizontal(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_visible_vertical(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_visible_vertical(IntPtr raw, bool visible_vertical);

		[GLib.Property ("visible-vertical")]
		public bool VisibleVertical {
			get  {
				bool raw_ret = gtk_tool_item_get_visible_vertical(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_visible_vertical(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_is_important(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_is_important(IntPtr raw, bool is_important);

		[GLib.Property ("is-important")]
		public bool IsImportant {
			get  {
				bool raw_ret = gtk_tool_item_get_is_important(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_is_important(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CreateMenuProxyVMDelegate (IntPtr tool_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toolitem_override_create_menu_proxy (IntPtr gtype, CreateMenuProxyVMDelegate cb);

		static CreateMenuProxyVMDelegate CreateMenuProxyVMCallback;

		static bool createmenuproxy_cb (IntPtr tool_item)
		{
			try {
				ToolItem tool_item_managed = GLib.Object.GetObject (tool_item, false) as ToolItem;
				return tool_item_managed.OnCreateMenuProxy ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideCreateMenuProxy (GLib.GType gtype)
		{
			if (CreateMenuProxyVMCallback == null)
				CreateMenuProxyVMCallback = new CreateMenuProxyVMDelegate (createmenuproxy_cb);
			gtksharp_toolitem_override_create_menu_proxy (gtype.Val, CreateMenuProxyVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_toolitem_base_create_menu_proxy (IntPtr tool_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToolItem), ConnectionMethod="OverrideCreateMenuProxy")]
		protected virtual bool OnCreateMenuProxy ()
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_toolitem_base_create_menu_proxy (Handle);
			return __ret;
		}

		[GLib.Signal("create_menu_proxy")]
		public event Gtk.CreateMenuProxyHandler CreateMenuProxy {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "create_menu_proxy", typeof (Gtk.CreateMenuProxyArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "create_menu_proxy", typeof (Gtk.CreateMenuProxyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToolbarReconfiguredVMDelegate (IntPtr tool_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toolitem_override_toolbar_reconfigured (IntPtr gtype, ToolbarReconfiguredVMDelegate cb);

		static ToolbarReconfiguredVMDelegate ToolbarReconfiguredVMCallback;

		static void toolbarreconfigured_cb (IntPtr tool_item)
		{
			try {
				ToolItem tool_item_managed = GLib.Object.GetObject (tool_item, false) as ToolItem;
				tool_item_managed.OnToolbarReconfigured ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToolbarReconfigured (GLib.GType gtype)
		{
			if (ToolbarReconfiguredVMCallback == null)
				ToolbarReconfiguredVMCallback = new ToolbarReconfiguredVMDelegate (toolbarreconfigured_cb);
			gtksharp_toolitem_override_toolbar_reconfigured (gtype.Val, ToolbarReconfiguredVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toolitem_base_toolbar_reconfigured (IntPtr tool_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToolItem), ConnectionMethod="OverrideToolbarReconfigured")]
		protected virtual void OnToolbarReconfigured ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_toolitem_base_toolbar_reconfigured (Handle);
		}

		[GLib.Signal("toolbar_reconfigured")]
		public event System.EventHandler ToolbarReconfigured {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toolbar_reconfigured");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toolbar_reconfigured");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TooltipSetVMDelegate (IntPtr tool_item, IntPtr tooltips, IntPtr tip_text, IntPtr tip_private);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toolitem_override_set_tooltip (IntPtr gtype, TooltipSetVMDelegate cb);

		static TooltipSetVMDelegate TooltipSetVMCallback;

		static bool tooltipset_cb (IntPtr tool_item, IntPtr tooltips, IntPtr tip_text, IntPtr tip_private)
		{
			try {
				ToolItem tool_item_managed = GLib.Object.GetObject (tool_item, false) as ToolItem;
				return tool_item_managed.OnTooltipSet (GLib.Object.GetObject(tooltips) as Gtk.Tooltips, GLib.Marshaller.Utf8PtrToString (tip_text), GLib.Marshaller.Utf8PtrToString (tip_private));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideTooltipSet (GLib.GType gtype)
		{
			if (TooltipSetVMCallback == null)
				TooltipSetVMCallback = new TooltipSetVMDelegate (tooltipset_cb);
			gtksharp_toolitem_override_set_tooltip (gtype.Val, TooltipSetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_toolitem_base_set_tooltip (IntPtr tool_item, IntPtr tooltips, IntPtr tip_text, IntPtr tip_private);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToolItem), ConnectionMethod="OverrideTooltipSet")]
		protected virtual bool OnTooltipSet (Gtk.Tooltips tooltips, string tip_text, string tip_private)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_tip_text = GLib.Marshaller.StringToPtrGStrdup (tip_text);
			IntPtr native_tip_private = GLib.Marshaller.StringToPtrGStrdup (tip_private);
			bool __ret = gtksharp_toolitem_base_set_tooltip (Handle, tooltips == null ? IntPtr.Zero : tooltips.Handle, native_tip_text, native_tip_private);
			GLib.Marshaller.Free (native_tip_text);
			GLib.Marshaller.Free (native_tip_private);
			return __ret;
		}

		[GLib.Signal("set_tooltip")]
		public event Gtk.TooltipSetHandler TooltipSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_tooltip", typeof (Gtk.TooltipSetArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_tooltip", typeof (Gtk.TooltipSetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_expand(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_expand(IntPtr raw, bool expand);

		public bool Expand { 
			get {
				bool raw_ret = gtk_tool_item_get_expand(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_expand(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_homogeneous(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_homogeneous(IntPtr raw, bool homogeneous);

		public bool Homogeneous { 
			get {
				bool raw_ret = gtk_tool_item_get_homogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_homogeneous(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tool_item_get_icon_size(IntPtr raw);

		public Gtk.IconSize IconSize { 
			get {
				int raw_ret = gtk_tool_item_get_icon_size(Handle);
				Gtk.IconSize ret = (Gtk.IconSize) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tool_item_get_orientation(IntPtr raw);

		public Gtk.Orientation Orientation { 
			get {
				int raw_ret = gtk_tool_item_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tool_item_get_proxy_menu_item(IntPtr raw, IntPtr menu_item_id);

		public Gtk.Widget GetProxyMenuItem(string menu_item_id) {
			Gtk.Application.AssertMainThread();
			IntPtr native_menu_item_id = GLib.Marshaller.StringToPtrGStrdup (menu_item_id);
			IntPtr raw_ret = gtk_tool_item_get_proxy_menu_item(Handle, native_menu_item_id);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_menu_item_id);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tool_item_get_relief_style(IntPtr raw);

		public Gtk.ReliefStyle ReliefStyle { 
			get {
				int raw_ret = gtk_tool_item_get_relief_style(Handle);
				Gtk.ReliefStyle ret = (Gtk.ReliefStyle) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tool_item_get_toolbar_style(IntPtr raw);

		public Gtk.ToolbarStyle ToolbarStyle { 
			get {
				int raw_ret = gtk_tool_item_get_toolbar_style(Handle);
				Gtk.ToolbarStyle ret = (Gtk.ToolbarStyle) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tool_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tool_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tool_item_get_use_drag_window(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_use_drag_window(IntPtr raw, bool use_drag_window);

		public bool UseDragWindow { 
			get {
				bool raw_ret = gtk_tool_item_get_use_drag_window(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_tool_item_set_use_drag_window(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_rebuild_menu(IntPtr raw);

		public void RebuildMenu() {
			gtk_tool_item_rebuild_menu(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tool_item_retrieve_proxy_menu_item(IntPtr raw);

		public Gtk.Widget RetrieveProxyMenuItem() {
			IntPtr raw_ret = gtk_tool_item_retrieve_proxy_menu_item(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_proxy_menu_item(IntPtr raw, IntPtr menu_item_id, IntPtr menu_item);

		public void SetProxyMenuItem(string menu_item_id, Gtk.Widget menu_item) {
			Gtk.Application.AssertMainThread();
			IntPtr native_menu_item_id = GLib.Marshaller.StringToPtrGStrdup (menu_item_id);
			gtk_tool_item_set_proxy_menu_item(Handle, native_menu_item_id, menu_item == null ? IntPtr.Zero : menu_item.Handle);
			GLib.Marshaller.Free (native_menu_item_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tool_item_set_tooltip(IntPtr raw, IntPtr tooltips, IntPtr tip_text, IntPtr tip_private);

		[Obsolete]
		public void SetTooltip(Gtk.Tooltips tooltips, string tip_text, string tip_private) {
			Gtk.Application.AssertMainThread();
			IntPtr native_tip_text = GLib.Marshaller.StringToPtrGStrdup (tip_text);
			IntPtr native_tip_private = GLib.Marshaller.StringToPtrGStrdup (tip_private);
			gtk_tool_item_set_tooltip(Handle, tooltips == null ? IntPtr.Zero : tooltips.Handle, native_tip_text, native_tip_private);
			GLib.Marshaller.Free (native_tip_text);
			GLib.Marshaller.Free (native_tip_private);
		}

#endregion
	}

	internal class ToolItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tool_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tool_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
