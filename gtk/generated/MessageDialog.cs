// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[MessageDialog]
	public class MessageDialog : Gtk.Dialog {

		[Obsolete]
		protected MessageDialog(GLib.GType gtype) : base(gtype) {}
		public MessageDialog(IntPtr raw) : base(raw) {}

		protected MessageDialog() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[GLib.Property ("message-type")]
		public Gtk.MessageType MessageType {
			get {
				using (GLib.Value val = GetProperty ("message-type")) {
					Gtk.MessageType ret = (Gtk.MessageType) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("message-type", val);
				}
			}
		}

		[GLib.Property ("text")]
		public string Text {
			get {
				using (GLib.Value val = GetProperty ("text")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("text", val);
				}
			}
		}

		[GLib.Property ("use-markup")]
		public bool UseMarkup {
			get {
				using (GLib.Value val = GetProperty ("use-markup")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("use-markup", val);
				}
			}
		}

		[GLib.Property ("secondary-text")]
		public string SecondaryText {
			get {
				using (GLib.Value val = GetProperty ("secondary-text")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("secondary-text", val);
				}
			}
		}

		[GLib.Property ("secondary-use-markup")]
		public bool SecondaryUseMarkup {
			get {
				using (GLib.Value val = GetProperty ("secondary-use-markup")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("secondary-use-markup", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_message_dialog_set_image(IntPtr raw, IntPtr image);

		[GLib.Property ("image")]
		public Gtk.Widget Image {
			get {
				using (GLib.Value val = GetProperty ("image")) {
					Gtk.Widget ret = (Gtk.Widget) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_message_dialog_set_image(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_message_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_message_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_message_dialog_set_markup(IntPtr raw, IntPtr str);

		public string Markup { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_message_dialog_set_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
#region Customized extensions
#line 1 "MessageDialog.custom"
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_message_dialog_new (IntPtr parent_window, DialogFlags flags, MessageType type, ButtonsType bt, IntPtr msg, IntPtr args);

[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_message_dialog_new_with_markup (IntPtr parent_window, DialogFlags flags, MessageType type, ButtonsType bt, IntPtr msg, IntPtr args);

public MessageDialog (Gtk.Window parent_window, DialogFlags flags, MessageType type, ButtonsType bt, bool use_markup, string format, params object[] args)
{
	IntPtr p = (parent_window != null) ? parent_window.Handle : IntPtr.Zero;

	if (format == null) {
		Raw = gtk_message_dialog_new (p, flags, type, bt, IntPtr.Zero, IntPtr.Zero);
		return;
	}

	IntPtr nmsg = GLib.Marshaller.StringToPtrGStrdup (GLib.Marshaller.StringFormat (format, args));
	if (use_markup)
		Raw = gtk_message_dialog_new_with_markup (p, flags, type, bt, nmsg, IntPtr.Zero);
	else
		Raw = gtk_message_dialog_new (p, flags, type, bt, nmsg, IntPtr.Zero);
	GLib.Marshaller.Free (nmsg);
}

public MessageDialog (Gtk.Window parent_window, DialogFlags flags, MessageType type, ButtonsType bt, string format, params object[] args) : this (parent_window, flags, type, bt, true, format, args) {}

#endregion
	}

	internal class MessageDialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_message_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_message_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
