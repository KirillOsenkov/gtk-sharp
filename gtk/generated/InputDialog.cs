// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[InputDialog]
	public class InputDialog : Gtk.Dialog {

		[Obsolete]
		protected InputDialog(GLib.GType gtype) : base(gtype) {}
		public InputDialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_input_dialog_new();

		public InputDialog () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InputDialog)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_input_dialog_new();
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_inputdialog_get_close_button_offset ();

		static uint close_button_offset = gtksharp_gtk_inputdialog_get_close_button_offset ();
		public Gtk.Button CloseButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + close_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_inputdialog_get_save_button_offset ();

		static uint save_button_offset = gtksharp_gtk_inputdialog_get_save_button_offset ();
		public Gtk.Button SaveButton {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + save_button_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Button;
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EnableDeviceVMDelegate (IntPtr inputd, IntPtr device);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_inputdialog_override_enable_device (IntPtr gtype, EnableDeviceVMDelegate cb);

		static EnableDeviceVMDelegate EnableDeviceVMCallback;

		static void enabledevice_cb (IntPtr inputd, IntPtr device)
		{
			try {
				InputDialog inputd_managed = GLib.Object.GetObject (inputd, false) as InputDialog;
				inputd_managed.OnEnableDevice (GLib.Object.GetObject(device) as Gdk.Device);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEnableDevice (GLib.GType gtype)
		{
			if (EnableDeviceVMCallback == null)
				EnableDeviceVMCallback = new EnableDeviceVMDelegate (enabledevice_cb);
			gtksharp_inputdialog_override_enable_device (gtype.Val, EnableDeviceVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_inputdialog_base_enable_device (IntPtr inputd, IntPtr device);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.InputDialog), ConnectionMethod="OverrideEnableDevice")]
		protected virtual void OnEnableDevice (Gdk.Device device)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_inputdialog_base_enable_device (Handle, device == null ? IntPtr.Zero : device.Handle);
		}

		[GLib.Signal("enable_device")]
		public event Gtk.EnableDeviceHandler EnableDevice {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "enable_device", typeof (Gtk.EnableDeviceArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "enable_device", typeof (Gtk.EnableDeviceArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DisableDeviceVMDelegate (IntPtr inputd, IntPtr device);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_inputdialog_override_disable_device (IntPtr gtype, DisableDeviceVMDelegate cb);

		static DisableDeviceVMDelegate DisableDeviceVMCallback;

		static void disabledevice_cb (IntPtr inputd, IntPtr device)
		{
			try {
				InputDialog inputd_managed = GLib.Object.GetObject (inputd, false) as InputDialog;
				inputd_managed.OnDisableDevice (GLib.Object.GetObject(device) as Gdk.Device);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDisableDevice (GLib.GType gtype)
		{
			if (DisableDeviceVMCallback == null)
				DisableDeviceVMCallback = new DisableDeviceVMDelegate (disabledevice_cb);
			gtksharp_inputdialog_override_disable_device (gtype.Val, DisableDeviceVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_inputdialog_base_disable_device (IntPtr inputd, IntPtr device);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.InputDialog), ConnectionMethod="OverrideDisableDevice")]
		protected virtual void OnDisableDevice (Gdk.Device device)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_inputdialog_base_disable_device (Handle, device == null ? IntPtr.Zero : device.Handle);
		}

		[GLib.Signal("disable_device")]
		public event Gtk.DisableDeviceHandler DisableDevice {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "disable_device", typeof (Gtk.DisableDeviceArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "disable_device", typeof (Gtk.DisableDeviceArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_input_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_input_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class InputDialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_input_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_input_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
