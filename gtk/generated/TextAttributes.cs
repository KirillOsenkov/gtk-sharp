// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TextAttributes]
	public class TextAttributes : GLib.Opaque {

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_appearance_offset ();

		static uint appearance_offset = gtksharp_gtk_textattributes_get_appearance_offset ();
		public Gtk.TextAppearance Appearance {
			get {
				unsafe {
					Gtk.TextAppearance* raw_ptr = (Gtk.TextAppearance*)(((byte*)Handle) + appearance_offset);
					return *raw_ptr;
				}
			}
			set {
				unsafe {
					Gtk.TextAppearance* raw_ptr = (Gtk.TextAppearance*)(((byte*)Handle) + appearance_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_justification_offset ();

		static uint justification_offset = gtksharp_gtk_textattributes_get_justification_offset ();
		public Gtk.Justification Justification {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + justification_offset);
					return (Gtk.Justification) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + justification_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_direction_offset ();

		static uint direction_offset = gtksharp_gtk_textattributes_get_direction_offset ();
		public Gtk.TextDirection Direction {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + direction_offset);
					return (Gtk.TextDirection) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + direction_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_font_offset ();

		static uint font_offset = gtksharp_gtk_textattributes_get_font_offset ();
		public Pango.FontDescription Font {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.FontDescription), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_font_scale_offset ();

		static uint font_scale_offset = gtksharp_gtk_textattributes_get_font_scale_offset ();
		public double FontScale {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + font_scale_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + font_scale_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_left_margin_offset ();

		static uint left_margin_offset = gtksharp_gtk_textattributes_get_left_margin_offset ();
		public int LeftMargin {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + left_margin_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + left_margin_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_indent_offset ();

		static uint indent_offset = gtksharp_gtk_textattributes_get_indent_offset ();
		public int Indent {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + indent_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + indent_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_right_margin_offset ();

		static uint right_margin_offset = gtksharp_gtk_textattributes_get_right_margin_offset ();
		public int RightMargin {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + right_margin_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + right_margin_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_pixels_above_lines_offset ();

		static uint pixels_above_lines_offset = gtksharp_gtk_textattributes_get_pixels_above_lines_offset ();
		public int PixelsAboveLines {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_above_lines_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_above_lines_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_pixels_below_lines_offset ();

		static uint pixels_below_lines_offset = gtksharp_gtk_textattributes_get_pixels_below_lines_offset ();
		public int PixelsBelowLines {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_below_lines_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_below_lines_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_pixels_inside_wrap_offset ();

		static uint pixels_inside_wrap_offset = gtksharp_gtk_textattributes_get_pixels_inside_wrap_offset ();
		public int PixelsInsideWrap {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_inside_wrap_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + pixels_inside_wrap_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_tabs_offset ();

		static uint tabs_offset = gtksharp_gtk_textattributes_get_tabs_offset ();
		public Pango.TabArray Tabs {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tabs_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.TabArray), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tabs_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_wrap_mode_offset ();

		static uint wrap_mode_offset = gtksharp_gtk_textattributes_get_wrap_mode_offset ();
		public Gtk.WrapMode WrapMode {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + wrap_mode_offset);
					return (Gtk.WrapMode) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + wrap_mode_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_textattributes_get_language_offset ();

		static uint language_offset = gtksharp_gtk_textattributes_get_language_offset ();
		public Pango.Language Language {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + language_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.Language) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.Language), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + language_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool gtksharp_gtk_textattributes_get_invisible (IntPtr raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textattributes_set_invisible (IntPtr raw, bool value);
		public bool Invisible {
			get {
				bool result = gtksharp_gtk_textattributes_get_invisible (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_invisible (Handle, value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool gtksharp_gtk_textattributes_get_bg_full_height (IntPtr raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textattributes_set_bg_full_height (IntPtr raw, bool value);
		public bool BgFullHeight {
			get {
				bool result = gtksharp_gtk_textattributes_get_bg_full_height (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_bg_full_height (Handle, value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool gtksharp_gtk_textattributes_get_editable (IntPtr raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textattributes_set_editable (IntPtr raw, bool value);
		public bool Editable {
			get {
				bool result = gtksharp_gtk_textattributes_get_editable (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_editable (Handle, value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static bool gtksharp_gtk_textattributes_get_realized (IntPtr raw);
		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static void gtksharp_gtk_textattributes_set_realized (IntPtr raw, bool value);
		public bool Realized {
			get {
				bool result = gtksharp_gtk_textattributes_get_realized (Handle);
				return result;
			}
			set {
				gtksharp_gtk_textattributes_set_realized (Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_copy(IntPtr raw);

		public Gtk.TextAttributes Copy() {
			IntPtr raw_ret = gtk_text_attributes_copy(Handle);
			Gtk.TextAttributes ret = raw_ret == IntPtr.Zero ? null : (Gtk.TextAttributes) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TextAttributes), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_attributes_copy_values(IntPtr raw, IntPtr dest);

		public void CopyValues(Gtk.TextAttributes dest) {
			Gtk.Application.AssertMainThread();
			gtk_text_attributes_copy_values(Handle, dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_text_attributes_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		public TextAttributes(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_new();

		public TextAttributes () 
		{
			Raw = gtk_text_attributes_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gtk_text_attributes_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_text_attributes_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gtk_text_attributes_unref (raw);
				Owned = false;
			}
		}

#endregion
#region Customized extensions
#line 1 "TextAttributes.custom"
// Gtk.TextAttributes.custom - Gtk TextAttributes class customizations
//
// Authors:    Mike Kestner  <mkestner@novell.com>
//
// Copyright (c) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[Obsolete("Gtk.TextAttributes is a reference type now, use null")]
		public static TextAttributes Zero = null;

		[Obsolete("Replaced by TextAttributes(IntPtr) constructor")]
		public static TextAttributes New (IntPtr raw)
		{
			return new TextAttributes (raw);
		}

		[Obsolete("Replaced by TextAttributes() constructor")]
		public static TextAttributes New ()
		{
			return new TextAttributes ();
		}

		[Obsolete ("Replaced by Font property.")]
		public Pango.FontDescription font {
			get { return Font; }
			set { Font = value; }
		}

		[Obsolete ("Replaced by Tabs property.")]
		public Pango.TabArray tabs {
			get { return Tabs; }
			set { Tabs = value; }
		}

		[Obsolete ("Replaced by Language property.")]
		public Pango.Language language {
			get { return Language; }
			set { Language = value; }
		}


#endregion
	}

	internal class TextAttributesAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_text_attributes_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_text_attributes_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
