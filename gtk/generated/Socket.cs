// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Socket]
	public class Socket : Gtk.Container {

		[Obsolete]
		protected Socket(GLib.GType gtype) : base(gtype) {}
		public Socket(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_new();

		public Socket () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Socket)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_socket_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PlugAddedVMDelegate (IntPtr socket_);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_socket_override_plug_added (IntPtr gtype, PlugAddedVMDelegate cb);

		static PlugAddedVMDelegate PlugAddedVMCallback;

		static void plugadded_cb (IntPtr socket_)
		{
			try {
				Socket socket__managed = GLib.Object.GetObject (socket_, false) as Socket;
				socket__managed.OnPlugAdded ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePlugAdded (GLib.GType gtype)
		{
			if (PlugAddedVMCallback == null)
				PlugAddedVMCallback = new PlugAddedVMDelegate (plugadded_cb);
			gtksharp_socket_override_plug_added (gtype.Val, PlugAddedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_socket_base_plug_added (IntPtr socket_);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Socket), ConnectionMethod="OverridePlugAdded")]
		protected virtual void OnPlugAdded ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_socket_base_plug_added (Handle);
		}

		[GLib.Signal("plug_added")]
		public event System.EventHandler PlugAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "plug_added");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "plug_added");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PlugRemovedVMDelegate (IntPtr socket_);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_socket_override_plug_removed (IntPtr gtype, PlugRemovedVMDelegate cb);

		static PlugRemovedVMDelegate PlugRemovedVMCallback;

		static bool plugremoved_cb (IntPtr socket_)
		{
			try {
				Socket socket__managed = GLib.Object.GetObject (socket_, false) as Socket;
				return socket__managed.OnPlugRemoved ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverridePlugRemoved (GLib.GType gtype)
		{
			if (PlugRemovedVMCallback == null)
				PlugRemovedVMCallback = new PlugRemovedVMDelegate (plugremoved_cb);
			gtksharp_socket_override_plug_removed (gtype.Val, PlugRemovedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_socket_base_plug_removed (IntPtr socket_);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Socket), ConnectionMethod="OverridePlugRemoved")]
		protected virtual bool OnPlugRemoved ()
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_socket_base_plug_removed (Handle);
			return __ret;
		}

		[GLib.Signal("plug_removed")]
		public event Gtk.PlugRemovedHandler PlugRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "plug_removed", typeof (Gtk.PlugRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "plug_removed", typeof (Gtk.PlugRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_socket_add_id(IntPtr raw, uint window_id);

		public void AddId(uint window_id) {
			Gtk.Application.AssertMainThread();
			gtk_socket_add_id(Handle, window_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_socket_get_id(IntPtr raw);

		public uint Id { 
			get {
				uint raw_ret = gtk_socket_get_id(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_socket_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_socket_steal(IntPtr raw, uint wid);

		[Obsolete]
		public void Steal(uint wid) {
			Gtk.Application.AssertMainThread();
			gtk_socket_steal(Handle, wid);
		}

#endregion
	}

	internal class SocketAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_socket_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
