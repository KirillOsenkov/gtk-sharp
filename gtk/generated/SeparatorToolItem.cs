// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SeparatorToolItem]
	public class SeparatorToolItem : Gtk.ToolItem {

		[Obsolete]
		protected SeparatorToolItem(GLib.GType gtype) : base(gtype) {}
		public SeparatorToolItem(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_separator_tool_item_new();

		public SeparatorToolItem () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SeparatorToolItem)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_separator_tool_item_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_separator_tool_item_get_draw(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_separator_tool_item_set_draw(IntPtr raw, bool draw);

		[GLib.Property ("draw")]
		public new bool Draw {
			get  {
				bool raw_ret = gtk_separator_tool_item_get_draw(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_separator_tool_item_set_draw(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_separator_tool_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_separator_tool_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class SeparatorToolItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_separator_tool_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_separator_tool_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
