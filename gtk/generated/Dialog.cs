// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Dialog]
	public class Dialog : Gtk.Window {

		[Obsolete]
		protected Dialog(GLib.GType gtype) : base(gtype) {}
		public Dialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_dialog_new();

		public Dialog () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Dialog)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_dialog_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_dialog_get_has_separator(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_set_has_separator(IntPtr raw, bool setting);

		[GLib.Property ("has-separator")]
		public bool HasSeparator {
			get  {
				bool raw_ret = gtk_dialog_get_has_separator(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_dialog_set_has_separator(Handle, value);
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_dialog_get_vbox_offset ();

		static uint vbox_offset = gtksharp_gtk_dialog_get_vbox_offset ();
		public Gtk.VBox VBox {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + vbox_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.VBox;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_dialog_get_action_area_offset ();

		static uint action_area_offset = gtksharp_gtk_dialog_get_action_area_offset ();
		public Gtk.HButtonBox ActionArea {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + action_area_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.HButtonBox;
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ResponseVMDelegate (IntPtr dialog, int response_id);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_dialog_override_response (IntPtr gtype, ResponseVMDelegate cb);

		static ResponseVMDelegate ResponseVMCallback;

		static void response_cb (IntPtr dialog, int response_id)
		{
			try {
				Dialog dialog_managed = GLib.Object.GetObject (dialog, false) as Dialog;
				dialog_managed.OnResponse ((Gtk.ResponseType) response_id);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideResponse (GLib.GType gtype)
		{
			if (ResponseVMCallback == null)
				ResponseVMCallback = new ResponseVMDelegate (response_cb);
			gtksharp_dialog_override_response (gtype.Val, ResponseVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_dialog_base_response (IntPtr dialog, int response_id);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Dialog), ConnectionMethod="OverrideResponse")]
		protected virtual void OnResponse (Gtk.ResponseType response_id)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_dialog_base_response (Handle, (int) response_id);
		}

		[GLib.Signal("response")]
		public event Gtk.ResponseHandler Response {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "response", typeof (Gtk.ResponseArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "response", typeof (Gtk.ResponseArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CloseVMDelegate (IntPtr dialog);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_dialog_override_close (IntPtr gtype, CloseVMDelegate cb);

		static CloseVMDelegate CloseVMCallback;

		static void close_cb (IntPtr dialog)
		{
			try {
				Dialog dialog_managed = GLib.Object.GetObject (dialog, false) as Dialog;
				dialog_managed.OnClose ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClose (GLib.GType gtype)
		{
			if (CloseVMCallback == null)
				CloseVMCallback = new CloseVMDelegate (close_cb);
			gtksharp_dialog_override_close (gtype.Val, CloseVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_dialog_base_close (IntPtr dialog);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Dialog), ConnectionMethod="OverrideClose")]
		protected virtual void OnClose ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_dialog_base_close (Handle);
		}

		[GLib.Signal("close")]
		public event System.EventHandler Close {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "close");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "close");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_add_action_widget(IntPtr raw, IntPtr child, int response_id);

		public void AddActionWidget(Gtk.Widget child, int response_id) {
			Gtk.Application.AssertMainThread();
			gtk_dialog_add_action_widget(Handle, child == null ? IntPtr.Zero : child.Handle, response_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_dialog_add_button(IntPtr raw, IntPtr button_text, int response_id);

		public Gtk.Widget AddButton(string button_text, int response_id) {
			Gtk.Application.AssertMainThread();
			IntPtr native_button_text = GLib.Marshaller.StringToPtrGStrdup (button_text);
			IntPtr raw_ret = gtk_dialog_add_button(Handle, native_button_text, response_id);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_button_text);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_dialog_get_response_for_widget(IntPtr raw, IntPtr widget);

		public int GetResponseForWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			int raw_ret = gtk_dialog_get_response_for_widget(Handle, widget == null ? IntPtr.Zero : widget.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_response(IntPtr raw, int response_id);

		public void Respond(int response_id) {
			Gtk.Application.AssertMainThread();
			gtk_dialog_response(Handle, response_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_dialog_run(IntPtr raw);

		public int Run() {
			int raw_ret = gtk_dialog_run(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_set_alternative_button_order_from_array(IntPtr raw, int n_params, int[] new_order);

		public int[] AlternativeButtonOrder { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_dialog_set_alternative_button_order_from_array(Handle, (value == null ? 0 : value.Length), value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_set_default_response(IntPtr raw, int response_id);

		public Gtk.ResponseType DefaultResponse { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_dialog_set_default_response(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_dialog_set_response_sensitive(IntPtr raw, int response_id, bool setting);

		public void SetResponseSensitive(Gtk.ResponseType response_id, bool setting) {
			Gtk.Application.AssertMainThread();
			gtk_dialog_set_response_sensitive(Handle, (int) response_id, setting);
		}

#endregion
#region Customized extensions
#line 1 "Dialog.custom"
//
// Gtk.Dialog.custom - Gtk Dialog class customizations
//
// Author: Duncan Mak  (duncan@ximian.com)
//	   Mike Kestner (mkestner@speakeasy.net)
//
// Copyright (C) 2002 Ximian, Inc. and Mike Kestner 
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtk_dialog_new_with_buttons (IntPtr title, IntPtr i, int flags, IntPtr dummy);
public Dialog (string title, Gtk.Window parent, Gtk.DialogFlags flags, params object[] button_data) : base(IntPtr.Zero)
{
	if (GetType() != typeof (Dialog)) {
		unsafe {
			var vals = stackalloc GLib.Value [1];
			var names = stackalloc IntPtr [1];
			names [0] = GLib.Marshaller.StringToPtrGStrdup ("title");
			vals [0] = new GLib.Value (title);
			CreateNativeObject (names, vals, 1);
		}
		TransientFor = parent;
		if ((flags & DialogFlags.Modal) > 0)
			Modal = true;
		if ((flags & DialogFlags.DestroyWithParent) > 0)
			DestroyWithParent = true;
		if ((flags & DialogFlags.NoSeparator) > 0)
			HasSeparator = false;
	} else {
		owned = true;
		IntPtr native = GLib.Marshaller.StringToPtrGStrdup (title);
		Raw = gtk_dialog_new_with_buttons (native, parent == null ? IntPtr.Zero : parent.Handle, (int) flags, IntPtr.Zero);
		GLib.Marshaller.Free (native);
	}

	for (int i = 0; i < button_data.Length - 1; i += 2)
		AddButton ((string) button_data [i], (int) button_data [i + 1]);
}

public void AddActionWidget (Widget child, ResponseType response)
{
	this.AddActionWidget (child, (int) response);
}

public Gtk.Widget AddButton (string button_text, ResponseType response)
{
	return this.AddButton (button_text, (int) response);
}

public void Respond (ResponseType response)
{
	this.Respond ((int) response);
}

[Obsolete ("Replaced by AlternativeButtonOrder property")]
public int SetAlternativeButtonOrderFromArray (int n_params)
{
	return -1;
}

#endregion
	}

	internal class DialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
