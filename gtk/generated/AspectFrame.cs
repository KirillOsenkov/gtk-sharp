// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[AspectFrame]
	public class AspectFrame : Gtk.Frame {

		[Obsolete]
		protected AspectFrame(GLib.GType gtype) : base(gtype) {}
		public AspectFrame(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_aspect_frame_new(IntPtr label, float xalign, float yalign, float ratio, bool obey_child);

		public AspectFrame (string label, float xalign, float yalign, float ratio, bool obey_child) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AspectFrame)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[5];
					var names = stackalloc IntPtr[5];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[0] = new GLib.Value (label);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("xalign");
					vals[1] = new GLib.Value (xalign);
					names[2] = GLib.Marshaller.StringToPtrGStrdup ("yalign");
					vals[2] = new GLib.Value (yalign);
					names[3] = GLib.Marshaller.StringToPtrGStrdup ("ratio");
					vals[3] = new GLib.Value (ratio);
					names[4] = GLib.Marshaller.StringToPtrGStrdup ("obey_child");
					vals[4] = new GLib.Value (obey_child);
					CreateNativeObject (names, vals, 5);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_aspect_frame_new(native_label, xalign, yalign, ratio, obey_child);
			GLib.Marshaller.Free (native_label);
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				using (GLib.Value val = GetProperty ("xalign")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("xalign", val);
				}
			}
		}

		[GLib.Property ("yalign")]
		public float Yalign {
			get {
				using (GLib.Value val = GetProperty ("yalign")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("yalign", val);
				}
			}
		}

		[GLib.Property ("ratio")]
		public float Ratio {
			get {
				using (GLib.Value val = GetProperty ("ratio")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("ratio", val);
				}
			}
		}

		[GLib.Property ("obey-child")]
		public bool ObeyChild {
			get {
				using (GLib.Value val = GetProperty ("obey-child")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("obey-child", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_aspect_frame_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_aspect_frame_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_aspect_frame_set(IntPtr raw, float xalign, float yalign, float ratio, bool obey_child);

		public void Set(float xalign, float yalign, float ratio, bool obey_child) {
			Gtk.Application.AssertMainThread();
			gtk_aspect_frame_set(Handle, xalign, yalign, ratio, obey_child);
		}

#endregion
	}

	internal class AspectFrameAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_aspect_frame_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_aspect_frame_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
