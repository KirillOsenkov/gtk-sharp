// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ToggleToolButton]
	public class ToggleToolButton : Gtk.ToolButton {

		[Obsolete]
		protected ToggleToolButton(GLib.GType gtype) : base(gtype) {}
		public ToggleToolButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_tool_button_new();

		public ToggleToolButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToggleToolButton)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_toggle_tool_button_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_tool_button_new_from_stock(IntPtr stock_id);

		public ToggleToolButton (string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToggleToolButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[0] = new GLib.Value (stock_id);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_toggle_tool_button_new_from_stock(native_stock_id);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_tool_button_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_tool_button_set_active(IntPtr raw, bool is_active);

		[GLib.Property ("active")]
		public bool Active {
			get  {
				bool raw_ret = gtk_toggle_tool_button_get_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_toggle_tool_button_set_active(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toggletoolbutton_override_toggled (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr button)
		{
			try {
				ToggleToolButton button_managed = GLib.Object.GetObject (button, false) as ToggleToolButton;
				button_managed.OnToggled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_toggletoolbutton_override_toggled (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toggletoolbutton_base_toggled (IntPtr button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToggleToolButton), ConnectionMethod="OverrideToggled")]
		protected virtual void OnToggled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_toggletoolbutton_base_toggled (Handle);
		}

		[GLib.Signal("toggled")]
		public event System.EventHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_tool_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_toggle_tool_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ToggleToolButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_tool_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_toggle_tool_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
