// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TreeViewColumn]
	public class TreeViewColumn : Gtk.Object, Gtk.CellLayout {

		[Obsolete]
		protected TreeViewColumn(GLib.GType gtype) : base(gtype) {}
		public TreeViewColumn(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_new();

		public TreeViewColumn () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TreeViewColumn)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_tree_view_column_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_visible(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_visible(IntPtr raw, bool visible);

		[GLib.Property ("visible")]
		public bool Visible {
			get  {
				bool raw_ret = gtk_tree_view_column_get_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_visible(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_resizable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_resizable(IntPtr raw, bool resizable);

		[GLib.Property ("resizable")]
		public bool Resizable {
			get  {
				bool raw_ret = gtk_tree_view_column_get_resizable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_resizable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_width(IntPtr raw);

		[GLib.Property ("width")]
		public int Width {
			get  {
				int raw_ret = gtk_tree_view_column_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_spacing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_spacing(IntPtr raw, int spacing);

		[GLib.Property ("spacing")]
		public int Spacing {
			get  {
				int raw_ret = gtk_tree_view_column_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_sizing(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_sizing(IntPtr raw, int type);

		[GLib.Property ("sizing")]
		public Gtk.TreeViewColumnSizing Sizing {
			get  {
				int raw_ret = gtk_tree_view_column_get_sizing(Handle);
				Gtk.TreeViewColumnSizing ret = (Gtk.TreeViewColumnSizing) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_sizing(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_fixed_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_fixed_width(IntPtr raw, int fixed_width);

		[GLib.Property ("fixed-width")]
		public int FixedWidth {
			get  {
				int raw_ret = gtk_tree_view_column_get_fixed_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_fixed_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_min_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_min_width(IntPtr raw, int min_width);

		[GLib.Property ("min-width")]
		public int MinWidth {
			get  {
				int raw_ret = gtk_tree_view_column_get_min_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_min_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_max_width(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_max_width(IntPtr raw, int max_width);

		[GLib.Property ("max-width")]
		public int MaxWidth {
			get  {
				int raw_ret = gtk_tree_view_column_get_max_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_max_width(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_title(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_tree_view_column_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_tree_view_column_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_expand(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_expand(IntPtr raw, bool expand);

		[GLib.Property ("expand")]
		public bool Expand {
			get  {
				bool raw_ret = gtk_tree_view_column_get_expand(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_expand(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_clickable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_clickable(IntPtr raw, bool clickable);

		[GLib.Property ("clickable")]
		public bool Clickable {
			get  {
				bool raw_ret = gtk_tree_view_column_get_clickable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_clickable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_widget(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_widget(IntPtr raw, IntPtr widget);

		[GLib.Property ("widget")]
		public Gtk.Widget Widget {
			get  {
				IntPtr raw_ret = gtk_tree_view_column_get_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern float gtk_tree_view_column_get_alignment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_alignment(IntPtr raw, float xalign);

		[GLib.Property ("alignment")]
		public float Alignment {
			get  {
				float raw_ret = gtk_tree_view_column_get_alignment(Handle);
				float ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_alignment(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_reorderable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_reorderable(IntPtr raw, bool reorderable);

		[GLib.Property ("reorderable")]
		public bool Reorderable {
			get  {
				bool raw_ret = gtk_tree_view_column_get_reorderable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_reorderable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_get_sort_indicator(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_sort_indicator(IntPtr raw, bool setting);

		[GLib.Property ("sort-indicator")]
		public bool SortIndicator {
			get  {
				bool raw_ret = gtk_tree_view_column_get_sort_indicator(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_sort_indicator(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_sort_order(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_sort_order(IntPtr raw, int order);

		[GLib.Property ("sort-order")]
		public Gtk.SortType SortOrder {
			get  {
				int raw_ret = gtk_tree_view_column_get_sort_order(Handle);
				Gtk.SortType ret = (Gtk.SortType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_sort_order(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_tree_view(IntPtr raw);

		public Gtk.Widget TreeView {
			get  {
				IntPtr raw_ret = gtk_tree_view_column_get_tree_view(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_column_get_sort_column_id(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_sort_column_id(IntPtr raw, int sort_column_id);

		public int SortColumnId {
			get  {
				int raw_ret = gtk_tree_view_column_get_sort_column_id(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_tree_view_column_set_sort_column_id(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClickedVMDelegate (IntPtr tree_column);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_treeviewcolumn_override_clicked (IntPtr gtype, ClickedVMDelegate cb);

		static ClickedVMDelegate ClickedVMCallback;

		static void clicked_cb (IntPtr tree_column)
		{
			try {
				TreeViewColumn tree_column_managed = GLib.Object.GetObject (tree_column, false) as TreeViewColumn;
				tree_column_managed.OnClicked ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClicked (GLib.GType gtype)
		{
			if (ClickedVMCallback == null)
				ClickedVMCallback = new ClickedVMDelegate (clicked_cb);
			gtksharp_treeviewcolumn_override_clicked (gtype.Val, ClickedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_treeviewcolumn_base_clicked (IntPtr tree_column);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeViewColumn), ConnectionMethod="OverrideClicked")]
		protected virtual void OnClicked ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_treeviewcolumn_base_clicked (Handle);
		}

		[GLib.Signal("clicked")]
		public event System.EventHandler Clicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "clicked");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "clicked");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_cell_get_position(IntPtr raw, IntPtr cell_renderer, out int start_pos, out int width);

		public bool CellGetPosition(Gtk.CellRenderer cell_renderer, out int start_pos, out int width) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_view_column_cell_get_position(Handle, cell_renderer == null ? IntPtr.Zero : cell_renderer.Handle, out start_pos, out width);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_cell_get_size(IntPtr raw, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height);

		public void CellGetSize(Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) {
			Gtk.Application.AssertMainThread();
			gtk_tree_view_column_cell_get_size(Handle, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_column_cell_is_visible(IntPtr raw);

		public bool CellIsVisible() {
			bool raw_ret = gtk_tree_view_column_cell_is_visible(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_cell_set_cell_data(IntPtr raw, IntPtr tree_model, ref Gtk.TreeIter iter, bool is_expander, bool is_expanded);

		public void CellSetCellData(Gtk.TreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded) {
			Gtk.Application.AssertMainThread();
			gtk_tree_view_column_cell_set_cell_data(Handle, tree_model == null ? IntPtr.Zero : tree_model.Handle, ref iter, is_expander, is_expanded);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_clicked(IntPtr raw);

		public void Click() {
			gtk_tree_view_column_clicked(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_focus_cell(IntPtr raw, IntPtr cell);

		public void FocusCell(Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_tree_view_column_focus_cell(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_tree_view_column_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_queue_resize(IntPtr raw);

		public void QueueResize() {
			gtk_tree_view_column_queue_resize(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_column_set_cell_data_func(IntPtr raw, IntPtr cell_renderer, GtkSharp.TreeCellDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell_renderer, Gtk.TreeCellDataFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_tree_view_column_set_cell_data_func(Handle, cell_renderer == null ? IntPtr.Zero : cell_renderer.Handle, (func == null) ? null : GtkSharp.TreeCellDataFuncWrapper.NativeDelegate, func_data, destroy);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_add_attribute(IntPtr raw, IntPtr cell, IntPtr attribute, int column);

		public void AddAttribute(Gtk.CellRenderer cell, string attribute, int column) {
			Gtk.Application.AssertMainThread();
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_layout_add_attribute(Handle, cell == null ? IntPtr.Zero : cell.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear(IntPtr raw);

		public void Clear() {
			gtk_cell_layout_clear(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear_attributes(IntPtr raw, IntPtr cell);

		public void ClearAttributes(Gtk.CellRenderer cell) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_clear_attributes(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_cells(IntPtr raw);

		public Gtk.CellRenderer[] Cells { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_cells(Handle);
				Gtk.CellRenderer[] ret = GLib.Marshaller.ListPtrToArray<Gtk.CellRenderer> (raw_ret, typeof(GLib.List), true, false);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_end(IntPtr raw, IntPtr cell, bool expand);

		public void PackEnd(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_end(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_start(IntPtr raw, IntPtr cell, bool expand);

		public void PackStart(Gtk.CellRenderer cell, bool expand) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_pack_start(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_reorder(IntPtr raw, IntPtr cell, int position);

		public void Reorder(Gtk.CellRenderer cell, int position) {
			Gtk.Application.AssertMainThread();
			gtk_cell_layout_reorder(Handle, cell == null ? IntPtr.Zero : cell.Handle, position);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_set_cell_data_func(IntPtr raw, IntPtr cell, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell, Gtk.CellLayoutDataFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_cell_layout_set_cell_data_func(Handle, cell == null ? IntPtr.Zero : cell.Handle, (func == null) ? null : GtkSharp.CellLayoutDataFuncWrapper.NativeDelegate, func_data, destroy);
		}

#endregion
#region Customized extensions
#line 1 "TreeViewColumn.custom"
// Gtk.TreeViewColumn.Custom - Gtk TreeViewColumn class customizations
//
// Author: Rachel Hestilow <hestilow@ximian.com> 
//
// Copyright (c) 2003 Rachel Hestilow 
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		public void SetAttributes (CellRenderer cell, params object[] attrs)
		{
			if (attrs.Length % 2 != 0)
				throw new ArgumentException ("attrs should contain pairs of attribute/col");

			ClearAttributes (cell);
			for (int i = 0; i < attrs.Length - 1; i += 2) {
				AddAttribute (cell, (string) attrs [i], (int) attrs [i + 1]);
			}
		}

		private void _NewWithAttributes (string title, Gtk.CellRenderer cell, Array attrs) {
			Title = title;
			PackStart (cell, true);
			for (int i = 0; (i + 1) < attrs.Length; i += 2) {
				AddAttribute (cell, (string) ((object[])attrs)[i], (int)((object[])attrs)[i + 1]);
			}
		}

		public TreeViewColumn (string title, Gtk.CellRenderer cell, Array attrs) : this ()
		{
			_NewWithAttributes (title, cell, attrs);
		}
		
		public TreeViewColumn (string title, Gtk.CellRenderer cell, params object[] attrs) : this ()
		{
			_NewWithAttributes (title, cell, attrs);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_cell_renderers (IntPtr raw);

		public CellRenderer[] CellRenderers {
			get {
				IntPtr raw_ret = gtk_tree_view_column_get_cell_renderers (Handle);
				if (raw_ret == IntPtr.Zero)
					return new CellRenderer [0];

				return GLib.Marshaller.ListPtrToArray<CellRenderer> (raw_ret, typeof (GLib.List), true, false);
			}
		}

		public void SetCellDataFunc (CellRenderer cell_renderer, NodeCellDataFunc func)
		{
			if (func == null) {
				gtk_tree_view_column_set_cell_data_func (Handle, cell_renderer == null ? IntPtr.Zero : cell_renderer.Handle, (GtkSharp.TreeCellDataFuncNative) null, IntPtr.Zero, null);
				return;
			}

			NodeCellDataFuncWrapper func_wrapper = new NodeCellDataFuncWrapper (func);
			GCHandle gch = GCHandle.Alloc (func_wrapper);
			gtk_cell_layout_set_cell_data_func (Handle, cell_renderer == null ? IntPtr.Zero : cell_renderer.Handle, func_wrapper.NativeDelegate, (IntPtr) gch, GLib.DestroyHelper.NotifyHandler);
		}

		[Obsolete ("Replaced by SetCellDataFunc (CellRenderer, TreeCellDataFunc) overload")]
		public void SetCellDataFunc (Gtk.CellRenderer cell_renderer, Gtk.TreeCellDataFunc func, IntPtr func_data, Gtk.DestroyNotify destroy) 
		{
			SetCellDataFunc (cell_renderer, func);
		}


#endregion
	}

	internal class TreeViewColumnAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_column_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_view_column_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
