// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	[ItemFactory]
	public class ItemFactory : Gtk.Object {

		[Obsolete]
		protected ItemFactory(GLib.GType gtype) : base(gtype) {}
		public ItemFactory(IntPtr raw) : base(raw) {}

		protected ItemFactory() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_set_translate_func(IntPtr raw, GtkSharp.TranslateFuncNative func, IntPtr data, GLib.DestroyNotify notify);

		public Gtk.TranslateFunc TranslateFunc {
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr data;
				GLib.DestroyNotify notify;
				if (value == null) {
					data = IntPtr.Zero;
					notify = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value);
					notify = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_item_factory_set_translate_func(Handle, (value == null) ? null : GtkSharp.TranslateFuncWrapper.NativeDelegate, data, notify);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_add_foreign(IntPtr accel_widget, IntPtr full_path, IntPtr accel_group, uint keyval, int modifiers);

		public static void AddForeign(Gtk.Widget accel_widget, string full_path, Gtk.AccelGroup accel_group, uint keyval, Gdk.ModifierType modifiers) {
			Gtk.Application.AssertMainThread();
			IntPtr native_full_path = GLib.Marshaller.StringToPtrGStrdup (full_path);
			gtk_item_factory_add_foreign(accel_widget == null ? IntPtr.Zero : accel_widget.Handle, native_full_path, accel_group == null ? IntPtr.Zero : accel_group.Handle, keyval, (int) modifiers);
			GLib.Marshaller.Free (native_full_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_construct(IntPtr raw, IntPtr container_type, IntPtr path, IntPtr accel_group);

		public void Construct(GLib.GType container_type, string path, Gtk.AccelGroup accel_group) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gtk_item_factory_construct(Handle, container_type.Val, native_path, accel_group == null ? IntPtr.Zero : accel_group.Handle);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_create_item(IntPtr raw, ref Gtk.ItemFactoryEntry entry, IntPtr callback_data, uint callback_type);

		public void CreateItem(Gtk.ItemFactoryEntry entry, IntPtr callback_data, uint callback_type) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_create_item(Handle, ref entry, callback_data, callback_type);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_create_items(IntPtr raw, uint n_entries, ref Gtk.ItemFactoryEntry entries, IntPtr callback_data);

		public void CreateItems(uint n_entries, Gtk.ItemFactoryEntry entries, IntPtr callback_data) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_create_items(Handle, n_entries, ref entries, callback_data);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_create_items_ac(IntPtr raw, uint n_entries, ref Gtk.ItemFactoryEntry entries, IntPtr callback_data, uint callback_type);

		public void CreateItemsAc(uint n_entries, Gtk.ItemFactoryEntry entries, IntPtr callback_data, uint callback_type) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_create_items_ac(Handle, n_entries, ref entries, callback_data, callback_type);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_create_menu_entries(uint n_entries, ref Gtk.MenuEntry entries);

		public static void CreateMenuEntries(uint n_entries, Gtk.MenuEntry entries) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_create_menu_entries(n_entries, ref entries);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_delete_entries(IntPtr raw, uint n_entries, ref Gtk.ItemFactoryEntry entries);

		public void DeleteEntries(uint n_entries, Gtk.ItemFactoryEntry entries) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_delete_entries(Handle, n_entries, ref entries);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_delete_entry(IntPtr raw, ref Gtk.ItemFactoryEntry entry);

		public void DeleteEntry(Gtk.ItemFactoryEntry entry) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_delete_entry(Handle, ref entry);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_delete_item(IntPtr raw, IntPtr path);

		public void DeleteItem(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gtk_item_factory_delete_item(Handle, native_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_from_path(IntPtr path);

		public static Gtk.ItemFactory FromPath(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gtk_item_factory_from_path(native_path);
			Gtk.ItemFactory ret = GLib.Object.GetObject(raw_ret) as Gtk.ItemFactory;
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_from_widget(IntPtr widget);

		public static Gtk.ItemFactory FromWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_item_factory_from_widget(widget == null ? IntPtr.Zero : widget.Handle);
			Gtk.ItemFactory ret = GLib.Object.GetObject(raw_ret) as Gtk.ItemFactory;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_item(IntPtr raw, IntPtr path);

		public Gtk.Widget GetItem(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gtk_item_factory_get_item(Handle, native_path);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_item_by_action(IntPtr raw, uint action);

		public Gtk.Widget GetItem(uint action) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_item_factory_get_item_by_action(Handle, action);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_item_factory_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_widget(IntPtr raw, IntPtr path);

		public Gtk.Widget GetWidget(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gtk_item_factory_get_widget(Handle, native_path);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_widget_by_action(IntPtr raw, uint action);

		public Gtk.Widget GetWidget(uint action) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_item_factory_get_widget_by_action(Handle, action);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_path_from_widget(IntPtr widget);

		public static string PathFromWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_item_factory_path_from_widget(widget == null ? IntPtr.Zero : widget.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_popup(IntPtr raw, uint x, uint y, uint mouse_button, uint time_);

		public void Popup(uint x, uint y, uint mouse_button, uint time_) {
			Gtk.Application.AssertMainThread();
			gtk_item_factory_popup(Handle, x, y, mouse_button, time_);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_popup_data(IntPtr raw);

		public IntPtr PopupData() {
			IntPtr raw_ret = gtk_item_factory_popup_data(Handle);
			IntPtr ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_popup_data_from_widget(IntPtr widget);

		public static IntPtr PopupDataFromWidget(Gtk.Widget widget) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_item_factory_popup_data_from_widget(widget == null ? IntPtr.Zero : widget.Handle);
			IntPtr ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_item_factory_popup_with_data(IntPtr raw, IntPtr popup_data, GtkSharp.DestroyNotifyNative destroy, uint x, uint y, uint mouse_button, uint time_);

		public void PopupWithData(IntPtr popup_data, Gtk.DestroyNotify destroy, uint x, uint y, uint mouse_button, uint time_) {
			Gtk.Application.AssertMainThread();
			GtkSharp.DestroyNotifyWrapper destroy_wrapper = new GtkSharp.DestroyNotifyWrapper (destroy);
			GCHandle gch = destroy_wrapper.PersistUntilCalled ();
			gtk_item_factory_popup_with_data(Handle, popup_data, (destroy_wrapper == null) ? null : GtkSharp.DestroyNotifyWrapper.NativeDelegate, x, y, mouse_button, time_);
		}

#endregion
#region Customized extensions
#line 1 "ItemFactory.custom"
// Gtk.ItemFactory.custom - Gtk ItemFactory class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_new(IntPtr container_type, IntPtr path, IntPtr accel_group);

		public ItemFactory (GLib.GType container_type, string path, Gtk.AccelGroup accel_group) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ItemFactory)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				Construct (container_type, path, accel_group);
				return;
			}
			owned = true;
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (path);
			Raw = gtk_item_factory_new(container_type.Val, native, (accel_group != null) ? accel_group.Handle : IntPtr.Zero);
			GLib.Marshaller.Free (native);
		}

		[Obsolete ("Replaced by TranslateFunc property.")]
		public void SetTranslateFunc (TranslateFunc func, IntPtr data, DestroyNotify notify) 
		{
			TranslateFunc = func;
		}

#endregion
	}

	internal class ItemFactoryAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_item_factory_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_item_factory_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
