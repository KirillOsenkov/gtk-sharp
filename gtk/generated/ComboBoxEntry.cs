// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ComboBoxEntry]
	public class ComboBoxEntry : Gtk.ComboBox {

		[Obsolete]
		protected ComboBoxEntry(GLib.GType gtype) : base(gtype) {}
		public ComboBoxEntry(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_entry_new();

		public ComboBoxEntry () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ComboBoxEntry)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_combo_box_entry_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_entry_new_text();

		public static new ComboBoxEntry NewText()
		{
			ComboBoxEntry result = new ComboBoxEntry (gtk_combo_box_entry_new_text());
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_entry_new_with_model(IntPtr model, int text_column);

		public ComboBoxEntry (Gtk.TreeModel model, int text_column) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ComboBoxEntry)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (model != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("model");
						vals[param_count++] = new GLib.Value (model);
					}
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("text_column");
					vals[param_count++] = new GLib.Value (text_column);
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_combo_box_entry_new_with_model(model == null ? IntPtr.Zero : model.Handle, text_column);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_combo_box_entry_get_text_column(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_combo_box_entry_set_text_column(IntPtr raw, int text_column);

		[GLib.Property ("text-column")]
		public int TextColumn {
			get  {
				int raw_ret = gtk_combo_box_entry_get_text_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_combo_box_entry_set_text_column(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_entry_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_combo_box_entry_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "ComboBoxEntry.custom"
//  Gtk.ComboBoxEntry.custom - Gtk ComboBoxEntry customizations
//
//  Authors:   Mike Kestner  <mkestner@novell.com>
//
//  Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public ComboBoxEntry (string[] entries) : this (new ListStore (typeof (string)), 0)
		{
			foreach (string entry in entries)
				AppendText (entry);
		}

		public Gtk.Entry Entry {
			get {
				return (Gtk.Entry)Child;
			}
		}

#endregion
	}

	internal class ComboBoxEntryAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_combo_box_entry_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_combo_box_entry_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
