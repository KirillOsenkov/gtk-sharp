// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Curve]
	public class Curve : Gtk.DrawingArea {

		[Obsolete]
		protected Curve(GLib.GType gtype) : base(gtype) {}
		public Curve(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_curve_new();

		public Curve () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Curve)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_curve_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_set_curve_type(IntPtr raw, int type);

		[GLib.Property ("curve-type")]
		public Gtk.CurveType CurveType {
			get {
				using (GLib.Value val = GetProperty ("curve-type")) {
					Gtk.CurveType ret = (Gtk.CurveType) (Enum) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_curve_set_curve_type(Handle, (int) value);
			}
		}

		[GLib.Property ("min-x")]
		public float MinX {
			get {
				using (GLib.Value val = GetProperty ("min-x")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("min-x", val);
				}
			}
		}

		[GLib.Property ("max-x")]
		public float MaxX {
			get {
				using (GLib.Value val = GetProperty ("max-x")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("max-x", val);
				}
			}
		}

		[GLib.Property ("min-y")]
		public float MinY {
			get {
				using (GLib.Value val = GetProperty ("min-y")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("min-y", val);
				}
			}
		}

		[GLib.Property ("max-y")]
		public float MaxY {
			get {
				using (GLib.Value val = GetProperty ("max-y")) {
					float ret = (float) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("max-y", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CurveTypeChangedVMDelegate (IntPtr curve);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_curve_override_curve_type_changed (IntPtr gtype, CurveTypeChangedVMDelegate cb);

		static CurveTypeChangedVMDelegate CurveTypeChangedVMCallback;

		static void curvetypechanged_cb (IntPtr curve)
		{
			try {
				Curve curve_managed = GLib.Object.GetObject (curve, false) as Curve;
				curve_managed.OnCurveTypeChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCurveTypeChanged (GLib.GType gtype)
		{
			if (CurveTypeChangedVMCallback == null)
				CurveTypeChangedVMCallback = new CurveTypeChangedVMDelegate (curvetypechanged_cb);
			gtksharp_curve_override_curve_type_changed (gtype.Val, CurveTypeChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_curve_base_curve_type_changed (IntPtr curve);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Curve), ConnectionMethod="OverrideCurveTypeChanged")]
		protected virtual void OnCurveTypeChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_curve_base_curve_type_changed (Handle);
		}

		[GLib.Signal("curve_type_changed")]
		public event System.EventHandler CurveTypeChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "curve_type_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "curve_type_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_curve_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_curve_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_get_vector(IntPtr raw, int veclen, float[] vector);

		public void GetVector(int veclen, float[] vector) {
			Gtk.Application.AssertMainThread();
			gtk_curve_get_vector(Handle, veclen, vector);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_reset(IntPtr raw);

		public void Reset() {
			gtk_curve_reset(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_set_gamma(IntPtr raw, float gamma_);

		public float Gamma { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_curve_set_gamma(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_set_range(IntPtr raw, float min_x, float max_x, float min_y, float max_y);

		public void SetRange(float min_x, float max_x, float min_y, float max_y) {
			Gtk.Application.AssertMainThread();
			gtk_curve_set_range(Handle, min_x, max_x, min_y, max_y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_curve_set_vector(IntPtr raw, int veclen, float[] vector);

		public void SetVector(int veclen, float[] vector) {
			Gtk.Application.AssertMainThread();
			gtk_curve_set_vector(Handle, veclen, vector);
		}

#endregion
	}

	internal class CurveAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_curve_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_curve_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
