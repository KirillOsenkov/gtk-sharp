// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ToggleButton]
	public class ToggleButton : Gtk.Button {

		[Obsolete]
		protected ToggleButton(GLib.GType gtype) : base(gtype) {}
		public ToggleButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_button_new();

		public ToggleButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToggleButton)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_toggle_button_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_button_new_with_label(IntPtr label);

		public static new ToggleButton NewWithLabel(string label)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			ToggleButton result = new ToggleButton (gtk_toggle_button_new_with_label(native_label));
			GLib.Marshaller.Free (native_label);
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_button_new_with_mnemonic(IntPtr label);

		public ToggleButton (string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToggleButton)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[0] = new GLib.Value (label);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_toggle_button_new_with_mnemonic(native_label);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_button_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_button_set_active(IntPtr raw, bool is_active);

		[GLib.Property ("active")]
		public bool Active {
			get  {
				bool raw_ret = gtk_toggle_button_get_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_toggle_button_set_active(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_button_get_inconsistent(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_button_set_inconsistent(IntPtr raw, bool setting);

		[GLib.Property ("inconsistent")]
		public bool Inconsistent {
			get  {
				bool raw_ret = gtk_toggle_button_get_inconsistent(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_toggle_button_set_inconsistent(Handle, value);
			}
		}

		[GLib.Property ("draw-indicator")]
		public bool DrawIndicator {
			get {
				using (GLib.Value val = GetProperty ("draw-indicator")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("draw-indicator", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr toggle_button);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_togglebutton_override_toggled (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr toggle_button)
		{
			try {
				ToggleButton toggle_button_managed = GLib.Object.GetObject (toggle_button, false) as ToggleButton;
				toggle_button_managed.OnToggled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_togglebutton_override_toggled (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_togglebutton_base_toggled (IntPtr toggle_button);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToggleButton), ConnectionMethod="OverrideToggled")]
		protected virtual void OnToggled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_togglebutton_base_toggled (Handle);
		}

		[GLib.Signal("toggled")]
		public event System.EventHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_button_get_mode(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_button_set_mode(IntPtr raw, bool draw_indicator);

		public bool Mode { 
			get {
				bool raw_ret = gtk_toggle_button_get_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_toggle_button_set_mode(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_toggle_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_button_toggled(IntPtr raw);

		public void Toggle() {
			gtk_toggle_button_toggled(Handle);
		}

#endregion
	}

	internal class ToggleButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_toggle_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
