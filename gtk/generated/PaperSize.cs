// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PaperSize]
	public class PaperSize : GLib.Opaque {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_copy(IntPtr raw);

		public Gtk.PaperSize Copy() {
			IntPtr raw_ret = gtk_paper_size_copy(Handle);
			Gtk.PaperSize ret = raw_ret == IntPtr.Zero ? null : (Gtk.PaperSize) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.PaperSize), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_default();

		public static string Default { 
			get {
				IntPtr raw_ret = gtk_paper_size_get_default();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_default_bottom_margin(IntPtr raw, int unit);

		public double GetDefaultBottomMargin(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_default_bottom_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_default_left_margin(IntPtr raw, int unit);

		public double GetDefaultLeftMargin(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_default_left_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_default_right_margin(IntPtr raw, int unit);

		public double GetDefaultRightMargin(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_default_right_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_default_top_margin(IntPtr raw, int unit);

		public double GetDefaultTopMargin(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_default_top_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_display_name(IntPtr raw);

		public string DisplayName { 
			get {
				IntPtr raw_ret = gtk_paper_size_get_display_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_height(IntPtr raw, int unit);

		public double GetHeight(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_height(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_paper_size_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_paper_sizes(bool include_custom);

		public static Gtk.PaperSize[] GetPaperSizes(bool include_custom) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_paper_size_get_paper_sizes(include_custom);
			Gtk.PaperSize[] ret = GLib.Marshaller.ListPtrToArray<Gtk.PaperSize> (raw_ret, typeof(GLib.List), true, true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_ppd_name(IntPtr raw);

		public string PpdName { 
			get {
				IntPtr raw_ret = gtk_paper_size_get_ppd_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_paper_size_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_paper_size_get_width(IntPtr raw, int unit);

		public double GetWidth(Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			double raw_ret = gtk_paper_size_get_width(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_paper_size_is_custom(IntPtr raw);

		public bool IsCustom { 
			get {
				bool raw_ret = gtk_paper_size_is_custom(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_paper_size_is_equal(IntPtr raw, IntPtr size2);

		public bool IsEqual(Gtk.PaperSize size2) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_paper_size_is_equal(Handle, size2 == null ? IntPtr.Zero : size2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paper_size_set_size(IntPtr raw, double width, double height, int unit);

		public void SetSize(double width, double height, Gtk.Unit unit) {
			Gtk.Application.AssertMainThread();
			gtk_paper_size_set_size(Handle, width, height, (int) unit);
		}

		public PaperSize(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_new(IntPtr name);

		public PaperSize (string name) 
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gtk_paper_size_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_new_custom(IntPtr name, IntPtr display_name, double width, double height, int unit);

		public PaperSize (string name, string display_name, double width, double height, Gtk.Unit unit) 
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_display_name = GLib.Marshaller.StringToPtrGStrdup (display_name);
			Raw = gtk_paper_size_new_custom(native_name, native_display_name, width, height, (int) unit);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_display_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_new_from_ppd(IntPtr ppd_name, IntPtr ppd_display_name, double width, double height);

		public PaperSize (string ppd_name, string ppd_display_name, double width, double height) 
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_ppd_name = GLib.Marshaller.StringToPtrGStrdup (ppd_name);
			IntPtr native_ppd_display_name = GLib.Marshaller.StringToPtrGStrdup (ppd_display_name);
			Raw = gtk_paper_size_new_from_ppd(native_ppd_name, native_ppd_display_name, width, height);
			GLib.Marshaller.Free (native_ppd_name);
			GLib.Marshaller.Free (native_ppd_display_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_paper_size_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_paper_size_free (raw);
		}

#endregion
	}

	internal class PaperSizeAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_paper_size_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_paper_size_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
