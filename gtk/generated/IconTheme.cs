// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[IconTheme]
	public class IconTheme : GLib.Object {

		[Obsolete]
		protected IconTheme(GLib.GType gtype) : base(gtype) {}
		public IconTheme(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_new();

		public IconTheme () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconTheme)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_icon_theme_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr icon_theme);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_icontheme_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr icon_theme)
		{
			try {
				IconTheme icon_theme_managed = GLib.Object.GetObject (icon_theme, false) as IconTheme;
				icon_theme_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_icontheme_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_icontheme_base_changed (IntPtr icon_theme);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconTheme), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_icontheme_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_add_builtin_icon(IntPtr icon_name, int size, IntPtr pixbuf);

		public static void AddBuiltinIcon(string icon_name, int size, Gdk.Pixbuf pixbuf) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_icon_theme_add_builtin_icon(native_icon_name, size, pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_append_search_path(IntPtr raw, IntPtr path);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_append_search_path_utf8(IntPtr raw, IntPtr path);

		public void AppendSearchPath(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_icon_theme_append_search_path_utf8(Handle, native_path);
			else
				gtk_icon_theme_append_search_path(Handle, native_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_choose_icon(IntPtr raw, IntPtr[] icon_names, int size, int flags);

		public Gtk.IconInfo ChooseIcon(string[] icon_names, int size, Gtk.IconLookupFlags flags) {
			Gtk.Application.AssertMainThread();
			int cnt_icon_names = icon_names == null ? 0 : icon_names.Length;
			IntPtr[] native_icon_names = new IntPtr [cnt_icon_names + 1];
			for (int i = 0; i < cnt_icon_names; i++) {
				native_icon_names [i] = GLib.Marshaller.StringToPtrGStrdup (icon_names[i]);
			}
			native_icon_names [cnt_icon_names] = IntPtr.Zero;
			IntPtr raw_ret = gtk_icon_theme_choose_icon(Handle, native_icon_names, size, (int) flags);
			Gtk.IconInfo ret = raw_ret == IntPtr.Zero ? null : (Gtk.IconInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.IconInfo), false);
			for (int i = 0; i < cnt_icon_names; i++) {
				GLib.Marshaller.Free (native_icon_names[i]);
			}
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_theme_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gtk_icon_theme_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_default();

		public static Gtk.IconTheme Default { 
			get {
				IntPtr raw_ret = gtk_icon_theme_get_default();
				Gtk.IconTheme ret = GLib.Object.GetObject(raw_ret) as Gtk.IconTheme;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_example_icon_name(IntPtr raw);

		public string ExampleIconName { 
			get {
				IntPtr raw_ret = gtk_icon_theme_get_example_icon_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_for_screen(IntPtr screen);

		public static Gtk.IconTheme GetForScreen(Gdk.Screen screen) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_icon_theme_get_for_screen(screen == null ? IntPtr.Zero : screen.Handle);
			Gtk.IconTheme ret = GLib.Object.GetObject(raw_ret) as Gtk.IconTheme;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_icon_theme_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_theme_has_icon(IntPtr raw, IntPtr icon_name);

		public bool HasIcon(string icon_name) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			bool raw_ret = gtk_icon_theme_has_icon(Handle, native_icon_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_icon_name);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_list_contexts(IntPtr raw);

		public string[] ListContexts() {
			IntPtr raw_ret = gtk_icon_theme_list_contexts(Handle);
			string[] ret = GLib.Marshaller.ListPtrToArray<string> (raw_ret, typeof(GLib.List), true, true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gtk_icon_theme_load_icon(IntPtr raw, IntPtr icon_name, int size, int flags, out IntPtr error);

		public unsafe Gdk.Pixbuf LoadIcon(string icon_name, int size, Gtk.IconLookupFlags flags) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gtk_icon_theme_load_icon(Handle, native_icon_name, size, (int) flags, out error);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			GLib.Marshaller.Free (native_icon_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_lookup_icon(IntPtr raw, IntPtr icon_name, int size, int flags);

		public Gtk.IconInfo LookupIcon(string icon_name, int size, Gtk.IconLookupFlags flags) {
			Gtk.Application.AssertMainThread();
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr raw_ret = gtk_icon_theme_lookup_icon(Handle, native_icon_name, size, (int) flags);
			Gtk.IconInfo ret = raw_ret == IntPtr.Zero ? null : (Gtk.IconInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.IconInfo), true);
			GLib.Marshaller.Free (native_icon_name);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_prepend_search_path(IntPtr raw, IntPtr path);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_prepend_search_path_utf8(IntPtr raw, IntPtr path);

		public void PrependSearchPath(string path) {
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			if (Environment.OSVersion.Platform == PlatformID.Win32NT ||
			    Environment.OSVersion.Platform == PlatformID.Win32S ||
			    Environment.OSVersion.Platform == PlatformID.Win32Windows ||
			    Environment.OSVersion.Platform == PlatformID.WinCE)
				gtk_icon_theme_prepend_search_path_utf8(Handle, native_path);
			else
				gtk_icon_theme_prepend_search_path(Handle, native_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_theme_rescan_if_needed(IntPtr raw);

		public bool RescanIfNeeded() {
			bool raw_ret = gtk_icon_theme_rescan_if_needed(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_set_custom_theme(IntPtr raw, IntPtr theme_name);

		public string CustomTheme { 
			set {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_icon_theme_set_custom_theme(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_set_screen(IntPtr raw, IntPtr screen);

		public Gdk.Screen Screen { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_icon_theme_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

#endregion
#region Customized extensions
#line 1 "IconTheme.custom"
// IconTheme.custom - customizations to Gtk.IconTheme
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//	    Jeroen Zwartepoorte  <jeroen@xs4all.nl>
//
// Copyright (c) 2004-2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.



		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_list_icons (IntPtr raw, IntPtr context);

		public string[] ListIcons (string context)
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (context);
			IntPtr list_ptr = gtk_icon_theme_list_icons (Handle, native);
			GLib.Marshaller.Free (native);
			if (list_ptr == IntPtr.Zero)
				return new string [0];

			GLib.List list = new GLib.List (list_ptr, typeof (string), true, true);
			string[] result = new string [list.Count];
			int i = 0;
			foreach (string val in list)
				result [i++] = val;
			return result;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_get_search_path(IntPtr raw, out IntPtr path, out int n_elements);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_set_search_path(IntPtr raw, IntPtr[] path, int n_elements);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_get_search_path_utf8(IntPtr raw, out IntPtr path, out int n_elements);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_icon_theme_set_search_path_utf8(IntPtr raw, IntPtr[] path, int n_elements);

		[DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_strfreev (IntPtr mem);

		bool IsWindowsPlatform {
			get {
				switch (Environment.OSVersion.Platform) {
				case PlatformID.Win32NT:
				case PlatformID.Win32S:
				case PlatformID.Win32Windows:
				case PlatformID.WinCE:
					return true;
				default:
					return false;
				}
			}
		}

                public string[] SearchPath {
                        get {
					int length;
					IntPtr raw_ret;
					if (IsWindowsPlatform)
						gtk_icon_theme_get_search_path_utf8 (Handle, out raw_ret, out length);
					else
						gtk_icon_theme_get_search_path (Handle, out raw_ret, out length);

					return GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);

			}
			set {
				IntPtr[] native_path;
				if (value == null)
					native_path = Array.Empty<IntPtr> ();
				else
					native_path = GLib.Marshaller.StringArrayToNullTermPointer (value);

				if (IsWindowsPlatform)
					gtk_icon_theme_set_search_path_utf8 (Handle, native_path, value.Length);
				else
					gtk_icon_theme_set_search_path (Handle, native_path, value.Length);

				GLib.Marshaller.Free (native_path);
			}
		}

		[Obsolete ("Replaced by SearchPath property.")]
		public void SetSearchPath (string[] path)
		{
			SearchPath = path;
		}

#if GTK_SHARP_2_6
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_icon_sizes (IntPtr raw, IntPtr icon_name);

		public int[] GetIconSizes (string icon_name) 
		{
			IntPtr icon_name_as_native = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr raw_ret = gtk_icon_theme_get_icon_sizes(Handle, icon_name_as_native);
			var result = new System.Collections.Generic.List<int> ();
			int offset = 0;
			int size = Marshal.ReadInt32 (raw_ret, offset);
			while (size != 0) {
				result.Add (size);
				offset += 4;
				size = Marshal.ReadInt32 (raw_ret, offset);
			}
			GLib.Marshaller.Free (icon_name_as_native);
			GLib.Marshaller.Free (raw_ret);
			return result.ToArray ();
		}
#endif


#endregion
	}

	internal class IconThemeAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_theme_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_icon_theme_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
