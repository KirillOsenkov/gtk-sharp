// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[CellRendererAccel]
	public class CellRendererAccel : Gtk.CellRendererText {

		[Obsolete]
		protected CellRendererAccel(GLib.GType gtype) : base(gtype) {}
		public CellRendererAccel(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_accel_new();

		public CellRendererAccel () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CellRendererAccel)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_cell_renderer_accel_new();
		}

		[GLib.Property ("accel-key")]
		public uint AccelKey {
			get {
				using (GLib.Value val = GetProperty ("accel-key")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("accel-key", val);
				}
			}
		}

		[GLib.Property ("accel-mods")]
		public Gdk.ModifierType AccelMods {
			get {
				using (GLib.Value val = GetProperty ("accel-mods")) {
					Gdk.ModifierType ret = (Gdk.ModifierType) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("accel-mods", val);
				}
			}
		}

		[GLib.Property ("keycode")]
		public uint Keycode {
			get {
				using (GLib.Value val = GetProperty ("keycode")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("keycode", val);
				}
			}
		}

		[GLib.Property ("accel-mode")]
		public Gtk.CellRendererAccelMode AccelMode {
			get {
				using (GLib.Value val = GetProperty ("accel-mode")) {
					Gtk.CellRendererAccelMode ret = (Gtk.CellRendererAccelMode) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("accel-mode", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AccelEditedVMDelegate (IntPtr accel, IntPtr path_string, uint accel_key, int accel_mods, uint hardware_keycode);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrendereraccel_override_accel_edited (IntPtr gtype, AccelEditedVMDelegate cb);

		static AccelEditedVMDelegate AccelEditedVMCallback;

		static void acceledited_cb (IntPtr accel, IntPtr path_string, uint accel_key, int accel_mods, uint hardware_keycode)
		{
			try {
				CellRendererAccel accel_managed = GLib.Object.GetObject (accel, false) as CellRendererAccel;
				accel_managed.OnAccelEdited (GLib.Marshaller.Utf8PtrToString (path_string), accel_key, (Gdk.ModifierType) accel_mods, hardware_keycode);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAccelEdited (GLib.GType gtype)
		{
			if (AccelEditedVMCallback == null)
				AccelEditedVMCallback = new AccelEditedVMDelegate (acceledited_cb);
			gtksharp_cellrendereraccel_override_accel_edited (gtype.Val, AccelEditedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrendereraccel_base_accel_edited (IntPtr accel, IntPtr path_string, uint accel_key, int accel_mods, uint hardware_keycode);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRendererAccel), ConnectionMethod="OverrideAccelEdited")]
		protected virtual void OnAccelEdited (string path_string, uint accel_key, Gdk.ModifierType accel_mods, uint hardware_keycode)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_path_string = GLib.Marshaller.StringToPtrGStrdup (path_string);
			gtksharp_cellrendereraccel_base_accel_edited (Handle, native_path_string, accel_key, (int) accel_mods, hardware_keycode);
			GLib.Marshaller.Free (native_path_string);
		}

		[GLib.Signal("accel-edited")]
		public event Gtk.AccelEditedHandler AccelEdited {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel-edited", typeof (Gtk.AccelEditedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel-edited", typeof (Gtk.AccelEditedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AccelClearedVMDelegate (IntPtr accel, IntPtr path_string);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrendereraccel_override_accel_cleared (IntPtr gtype, AccelClearedVMDelegate cb);

		static AccelClearedVMDelegate AccelClearedVMCallback;

		static void accelcleared_cb (IntPtr accel, IntPtr path_string)
		{
			try {
				CellRendererAccel accel_managed = GLib.Object.GetObject (accel, false) as CellRendererAccel;
				accel_managed.OnAccelCleared (GLib.Marshaller.Utf8PtrToString (path_string));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAccelCleared (GLib.GType gtype)
		{
			if (AccelClearedVMCallback == null)
				AccelClearedVMCallback = new AccelClearedVMDelegate (accelcleared_cb);
			gtksharp_cellrendereraccel_override_accel_cleared (gtype.Val, AccelClearedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrendereraccel_base_accel_cleared (IntPtr accel, IntPtr path_string);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRendererAccel), ConnectionMethod="OverrideAccelCleared")]
		protected virtual void OnAccelCleared (string path_string)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_path_string = GLib.Marshaller.StringToPtrGStrdup (path_string);
			gtksharp_cellrendereraccel_base_accel_cleared (Handle, native_path_string);
			GLib.Marshaller.Free (native_path_string);
		}

		[GLib.Signal("accel-cleared")]
		public event Gtk.AccelClearedHandler AccelCleared {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel-cleared", typeof (Gtk.AccelClearedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "accel-cleared", typeof (Gtk.AccelClearedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_accel_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_accel_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "CellRendererAccel.custom"
//
// CellRendererAccel.custom - Gtk CellRendererAccel class customizations
//
// Author: Peter Johanson <peter@peterjohanson.com>
//
// Copyright (C) 2007 Peter Johanson
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public override void GetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			CellRenderer.InternalGetSize (Gtk.CellRendererAccel.GType, this, widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		protected override void Render (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			CellRenderer.InternalRender (Gtk.CellRendererAccel.GType, this, window, widget, background_area, cell_area, expose_area, flags);
		}

		public override Gtk.CellEditable StartEditing(Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) 
		{
			return Gtk.CellRenderer.InternalStartEditing (Gtk.CellRendererAccel.GType, this, evnt, widget, path, ref background_area, ref cell_area, flags);
		}

#endregion
	}

	internal class CellRendererAccelAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_accel_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_accel_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
