// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[CellRendererText]
	public class CellRendererText : Gtk.CellRenderer {

		[Obsolete]
		protected CellRendererText(GLib.GType gtype) : base(gtype) {}
		public CellRendererText(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_text_new();

		public CellRendererText () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CellRendererText)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_cell_renderer_text_new();
		}

		[GLib.Property ("text")]
		public string Text {
			get {
				using (GLib.Value val = GetProperty ("text")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("text", val);
				}
			}
		}

		[GLib.Property ("markup")]
		public string Markup {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("markup", val);
				}
			}
		}

		[GLib.Property ("attributes")]
		public Pango.AttrList Attributes {
			get {
				using (GLib.Value val = GetProperty ("attributes")) {
					Pango.AttrList ret = (Pango.AttrList) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value, "PangoAttrList")) {
					SetProperty("attributes", val);
				}
			}
		}

		[GLib.Property ("single-paragraph-mode")]
		public bool SingleParagraphMode {
			get {
				using (GLib.Value val = GetProperty ("single-paragraph-mode")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("single-paragraph-mode", val);
				}
			}
		}

		[GLib.Property ("background")]
		public string Background {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("background", val);
				}
			}
		}

		[GLib.Property ("background-gdk")]
		public Gdk.Color BackgroundGdk {
			get {
				using (GLib.Value val = GetProperty ("background-gdk")) {
					Gdk.Color ret = (Gdk.Color) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = (GLib.Value) value) {
					SetProperty("background-gdk", val);
				}
			}
		}

		[GLib.Property ("foreground")]
		public string Foreground {
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("foreground", val);
				}
			}
		}

		[GLib.Property ("foreground-gdk")]
		public Gdk.Color ForegroundGdk {
			get {
				using (GLib.Value val = GetProperty ("foreground-gdk")) {
					Gdk.Color ret = (Gdk.Color) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = (GLib.Value) value) {
					SetProperty("foreground-gdk", val);
				}
			}
		}

		[GLib.Property ("editable")]
		public bool Editable {
			get {
				using (GLib.Value val = GetProperty ("editable")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("editable", val);
				}
			}
		}

		[GLib.Property ("font")]
		public string Font {
			get {
				using (GLib.Value val = GetProperty ("font")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("font", val);
				}
			}
		}

		[GLib.Property ("font-desc")]
		public Pango.FontDescription FontDesc {
			get {
				using (GLib.Value val = GetProperty ("font-desc")) {
					Pango.FontDescription ret = (Pango.FontDescription) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value, "PangoFontDescription")) {
					SetProperty("font-desc", val);
				}
			}
		}

		[GLib.Property ("family")]
		public string Family {
			get {
				using (GLib.Value val = GetProperty ("family")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("family", val);
				}
			}
		}

		[GLib.Property ("style")]
		public Pango.Style Style {
			get {
				using (GLib.Value val = GetProperty ("style")) {
					Pango.Style ret = (Pango.Style) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("style", val);
				}
			}
		}

		[GLib.Property ("variant")]
		public Pango.Variant Variant {
			get {
				using (GLib.Value val = GetProperty ("variant")) {
					Pango.Variant ret = (Pango.Variant) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("variant", val);
				}
			}
		}

		[GLib.Property ("weight")]
		public int Weight {
			get {
				using (GLib.Value val = GetProperty ("weight")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("weight", val);
				}
			}
		}

		[GLib.Property ("stretch")]
		public Pango.Stretch Stretch {
			get {
				using (GLib.Value val = GetProperty ("stretch")) {
					Pango.Stretch ret = (Pango.Stretch) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("stretch", val);
				}
			}
		}

		[GLib.Property ("size")]
		public int Size {
			get {
				using (GLib.Value val = GetProperty ("size")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("size", val);
				}
			}
		}

		[GLib.Property ("size-points")]
		public double SizePoints {
			get {
				using (GLib.Value val = GetProperty ("size-points")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("size-points", val);
				}
			}
		}

		[GLib.Property ("scale")]
		public double Scale {
			get {
				using (GLib.Value val = GetProperty ("scale")) {
					double ret = (double) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("scale", val);
				}
			}
		}

		[GLib.Property ("rise")]
		public int Rise {
			get {
				using (GLib.Value val = GetProperty ("rise")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("rise", val);
				}
			}
		}

		[GLib.Property ("strikethrough")]
		public bool Strikethrough {
			get {
				using (GLib.Value val = GetProperty ("strikethrough")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("strikethrough", val);
				}
			}
		}

		[GLib.Property ("underline")]
		public Pango.Underline Underline {
			get {
				using (GLib.Value val = GetProperty ("underline")) {
					Pango.Underline ret = (Pango.Underline) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("underline", val);
				}
			}
		}

		[GLib.Property ("language")]
		public string Language {
			get {
				using (GLib.Value val = GetProperty ("language")) {
					string ret = (string) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("language", val);
				}
			}
		}

		[GLib.Property ("ellipsize")]
		public Pango.EllipsizeMode Ellipsize {
			get {
				using (GLib.Value val = GetProperty ("ellipsize")) {
					Pango.EllipsizeMode ret = (Pango.EllipsizeMode) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("ellipsize", val);
				}
			}
		}

		[GLib.Property ("width-chars")]
		public int WidthChars {
			get {
				using (GLib.Value val = GetProperty ("width-chars")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("width-chars", val);
				}
			}
		}

		[GLib.Property ("wrap-mode")]
		public Pango.WrapMode WrapMode {
			get {
				using (GLib.Value val = GetProperty ("wrap-mode")) {
					Pango.WrapMode ret = (Pango.WrapMode) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("wrap-mode", val);
				}
			}
		}

		[GLib.Property ("wrap-width")]
		public int WrapWidth {
			get {
				using (GLib.Value val = GetProperty ("wrap-width")) {
					int ret = (int) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("wrap-width", val);
				}
			}
		}

		[GLib.Property ("alignment")]
		public Pango.Alignment Alignment {
			get {
				using (GLib.Value val = GetProperty ("alignment")) {
					Pango.Alignment ret = (Pango.Alignment) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("alignment", val);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EditedVMDelegate (IntPtr cell_renderer_text, IntPtr path, IntPtr new_text);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrenderertext_override_edited (IntPtr gtype, EditedVMDelegate cb);

		static EditedVMDelegate EditedVMCallback;

		static void edited_cb (IntPtr cell_renderer_text, IntPtr path, IntPtr new_text)
		{
			try {
				CellRendererText cell_renderer_text_managed = GLib.Object.GetObject (cell_renderer_text, false) as CellRendererText;
				cell_renderer_text_managed.OnEdited (GLib.Marshaller.Utf8PtrToString (path), GLib.Marshaller.Utf8PtrToString (new_text));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEdited (GLib.GType gtype)
		{
			if (EditedVMCallback == null)
				EditedVMCallback = new EditedVMDelegate (edited_cb);
			gtksharp_cellrenderertext_override_edited (gtype.Val, EditedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_cellrenderertext_base_edited (IntPtr cell_renderer_text, IntPtr path, IntPtr new_text);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRendererText), ConnectionMethod="OverrideEdited")]
		protected virtual void OnEdited (string path, string new_text)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_new_text = GLib.Marshaller.StringToPtrGStrdup (new_text);
			gtksharp_cellrenderertext_base_edited (Handle, native_path, native_new_text);
			GLib.Marshaller.Free (native_path);
			GLib.Marshaller.Free (native_new_text);
		}

		[GLib.Signal("edited")]
		public event Gtk.EditedHandler Edited {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "edited", typeof (Gtk.EditedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "edited", typeof (Gtk.EditedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_text_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_text_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_renderer_text_set_fixed_height_from_font(IntPtr raw, int number_of_rows);

		public int FixedHeightFromFont { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_cell_renderer_text_set_fixed_height_from_font(Handle, value);
			}
		}

#endregion
#region Customized extensions
#line 1 "CellRendererText.custom"
//
// CellRendererText.custom - Gtk CellRendererText class customizations
//
// Author: Peter Johanson <peter@peterjohanson.com>
//
// Copyright (C) 2007 Peter Johanson
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public override void GetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			CellRenderer.InternalGetSize (Gtk.CellRendererText.GType, this, widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		protected override void Render (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			CellRenderer.InternalRender (Gtk.CellRendererText.GType, this, window, widget, background_area, cell_area, expose_area, flags);
		}

		public override Gtk.CellEditable StartEditing(Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) 
		{
			return Gtk.CellRenderer.InternalStartEditing (Gtk.CellRendererText.GType, this, evnt, widget, path, ref background_area, ref cell_area, flags);
		}

#endregion
	}

	internal class CellRendererTextAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_renderer_text_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_cell_renderer_text_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
