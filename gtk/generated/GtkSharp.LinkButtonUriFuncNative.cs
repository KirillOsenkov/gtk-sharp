// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void LinkButtonUriFuncNative(IntPtr button, IntPtr link_, IntPtr user_data);

	internal class LinkButtonUriFuncInvoker {

		LinkButtonUriFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~LinkButtonUriFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal LinkButtonUriFuncInvoker (LinkButtonUriFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal LinkButtonUriFuncInvoker (LinkButtonUriFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal LinkButtonUriFuncInvoker (LinkButtonUriFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.LinkButtonUriFunc Handler {
			get {
				return new Gtk.LinkButtonUriFunc(InvokeNative);
			}
		}

		void InvokeNative (Gtk.LinkButton button, string link_)
		{
			Gtk.Application.AssertMainThread();
			IntPtr native_link_ = GLib.Marshaller.StringToPtrGStrdup (link_);
			native_cb (button == null ? IntPtr.Zero : button.Handle, native_link_, __data);
			GLib.Marshaller.Free (native_link_);
		}
	}

	internal static class LinkButtonUriFuncWrapper {

		public static void NativeCallback (IntPtr button, IntPtr link_, IntPtr user_data)
		{
			try {
				var gch = (GCHandle)user_data;
				var managed = (Gtk.LinkButtonUriFunc)gch.Target;
				managed (GLib.Object.GetObject(button) as Gtk.LinkButton, GLib.Marshaller.Utf8PtrToString (link_));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}


		internal static readonly LinkButtonUriFuncNative NativeDelegate = new LinkButtonUriFuncNative (NativeCallback);
	}
#endregion
}
