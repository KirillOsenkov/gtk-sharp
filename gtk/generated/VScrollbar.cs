// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[VScrollbar]
	public class VScrollbar : Gtk.Scrollbar {

		[Obsolete]
		protected VScrollbar(GLib.GType gtype) : base(gtype) {}
		public VScrollbar(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_vscrollbar_new(IntPtr adjustment);

		public VScrollbar (Gtk.Adjustment adjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (VScrollbar)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (adjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("adjustment");
						vals[param_count++] = new GLib.Value (adjustment);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_vscrollbar_new(adjustment == null ? IntPtr.Zero : adjustment.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_vscrollbar_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_vscrollbar_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class VScrollbarAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_vscrollbar_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_vscrollbar_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
