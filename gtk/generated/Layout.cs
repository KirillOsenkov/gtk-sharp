// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Layout]
	public class Layout : Gtk.Container {

		[Obsolete]
		protected Layout(GLib.GType gtype) : base(gtype) {}
		public Layout(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_layout_new(IntPtr hadjustment, IntPtr vadjustment);

		public Layout (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Layout)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (hadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("hadjustment");
						vals[param_count++] = new GLib.Value (hadjustment);
					}
					if (vadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("vadjustment");
						vals[param_count++] = new GLib.Value (vadjustment);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_layout_new(hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_layout_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_set_hadjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_layout_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_layout_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_layout_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_set_vadjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_layout_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_layout_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("width")]
		public uint Width {
			get {
				using (GLib.Value val = GetProperty ("width")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("width", val);
				}
			}
		}

		[GLib.Property ("height")]
		public uint Height {
			get {
				using (GLib.Value val = GetProperty ("height")) {
					uint ret = (uint) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("height", val);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_layout_get_bin_window_offset ();

		static uint bin_window_offset = gtksharp_gtk_layout_get_bin_window_offset ();
		public Gdk.Window BinWindow {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + bin_window_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Window;
				}
			}
		}

		public class LayoutChild : Gtk.Container.ContainerChild {
			protected internal LayoutChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("x")]
			public int X {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "x")) {
						int ret = (int) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "x", val);
					}
				}
			}

			[Gtk.ChildProperty ("y")]
			public int Y {
				get {
					using (GLib.Value val = parent.ChildGetProperty (child, "y")) {
						int ret = (int) val;
						return ret;
					}
				}
				set {
					using (GLib.Value val = new GLib.Value(value)) {
						parent.ChildSetProperty(child, "y", val);
					}
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new LayoutChild (this, child);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ScrollAdjustmentsSetVMDelegate (IntPtr layout, IntPtr hadjustment, IntPtr vadjustment);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_layout_override_set_scroll_adjustments (IntPtr gtype, ScrollAdjustmentsSetVMDelegate cb);

		static ScrollAdjustmentsSetVMDelegate ScrollAdjustmentsSetVMCallback;

		static void scrolladjustmentsset_cb (IntPtr layout, IntPtr hadjustment, IntPtr vadjustment)
		{
			try {
				Layout layout_managed = GLib.Object.GetObject (layout, false) as Layout;
				layout_managed.OnScrollAdjustmentsSet (GLib.Object.GetObject(hadjustment) as Gtk.Adjustment, GLib.Object.GetObject(vadjustment) as Gtk.Adjustment);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideScrollAdjustmentsSet (GLib.GType gtype)
		{
			if (ScrollAdjustmentsSetVMCallback == null)
				ScrollAdjustmentsSetVMCallback = new ScrollAdjustmentsSetVMDelegate (scrolladjustmentsset_cb);
			gtksharp_layout_override_set_scroll_adjustments (gtype.Val, ScrollAdjustmentsSetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_layout_base_set_scroll_adjustments (IntPtr layout, IntPtr hadjustment, IntPtr vadjustment);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Layout), ConnectionMethod="OverrideScrollAdjustmentsSet")]
		protected virtual void OnScrollAdjustmentsSet (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_layout_base_set_scroll_adjustments (Handle, hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[GLib.Signal("set_scroll_adjustments")]
		public event Gtk.ScrollAdjustmentsSetHandler ScrollAdjustmentsSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_scroll_adjustments", typeof (Gtk.ScrollAdjustmentsSetArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_scroll_adjustments", typeof (Gtk.ScrollAdjustmentsSetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_freeze(IntPtr raw);

		[Obsolete]
		public void Freeze() {
			gtk_layout_freeze(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_get_size(IntPtr raw, out uint width, out uint height);

		public void GetSize(out uint width, out uint height) {
			Gtk.Application.AssertMainThread();
			gtk_layout_get_size(Handle, out width, out height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_layout_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_layout_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_move(IntPtr raw, IntPtr child_widget, int x, int y);

		public void Move(Gtk.Widget child_widget, int x, int y) {
			Gtk.Application.AssertMainThread();
			gtk_layout_move(Handle, child_widget == null ? IntPtr.Zero : child_widget.Handle, x, y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_put(IntPtr raw, IntPtr child_widget, int x, int y);

		public void Put(Gtk.Widget child_widget, int x, int y) {
			Gtk.Application.AssertMainThread();
			gtk_layout_put(Handle, child_widget == null ? IntPtr.Zero : child_widget.Handle, x, y);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_set_size(IntPtr raw, uint width, uint height);

		public void SetSize(uint width, uint height) {
			Gtk.Application.AssertMainThread();
			gtk_layout_set_size(Handle, width, height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_layout_thaw(IntPtr raw);

		[Obsolete]
		public void Thaw() {
			gtk_layout_thaw(Handle);
		}

#endregion
	}

	internal class LayoutAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_layout_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_layout_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
