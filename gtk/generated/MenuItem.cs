// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[MenuItem]
	public class MenuItem : Gtk.Item {

		[Obsolete]
		protected MenuItem(GLib.GType gtype) : base(gtype) {}
		public MenuItem(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_item_new();

		public MenuItem () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MenuItem)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_menu_item_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_item_get_submenu(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_set_submenu(IntPtr raw, IntPtr submenu);

		[GLib.Property ("submenu")]
		public Gtk.Widget Submenu {
			get  {
				IntPtr raw_ret = gtk_menu_item_get_submenu(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_menu_item_set_submenu(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_set_accel_path(IntPtr raw, IntPtr accel_path);

		public string AccelPath {
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_menu_item_set_accel_path(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedVMDelegate (IntPtr menu_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_override_activate (IntPtr gtype, ActivatedVMDelegate cb);

		static ActivatedVMDelegate ActivatedVMCallback;

		static void activated_cb (IntPtr menu_item)
		{
			try {
				MenuItem menu_item_managed = GLib.Object.GetObject (menu_item, false) as MenuItem;
				menu_item_managed.OnActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivated (GLib.GType gtype)
		{
			if (ActivatedVMCallback == null)
				ActivatedVMCallback = new ActivatedVMDelegate (activated_cb);
			gtksharp_menuitem_override_activate (gtype.Val, ActivatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_base_activate (IntPtr menu_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuItem), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menuitem_base_activate (Handle);
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateItemVMDelegate (IntPtr menu_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_override_activate_item (IntPtr gtype, ActivateItemVMDelegate cb);

		static ActivateItemVMDelegate ActivateItemVMCallback;

		static void activateitem_cb (IntPtr menu_item)
		{
			try {
				MenuItem menu_item_managed = GLib.Object.GetObject (menu_item, false) as MenuItem;
				menu_item_managed.OnActivateItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivateItem (GLib.GType gtype)
		{
			if (ActivateItemVMCallback == null)
				ActivateItemVMCallback = new ActivateItemVMDelegate (activateitem_cb);
			gtksharp_menuitem_override_activate_item (gtype.Val, ActivateItemVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_base_activate_item (IntPtr menu_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuItem), ConnectionMethod="OverrideActivateItem")]
		protected virtual void OnActivateItem ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menuitem_base_activate_item (Handle);
		}

		[GLib.Signal("activate_item")]
		public event System.EventHandler ActivateItem {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_item");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate_item");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleSizeRequestedVMDelegate (IntPtr menu_item, out int requisition);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_override_toggle_size_request (IntPtr gtype, ToggleSizeRequestedVMDelegate cb);

		static ToggleSizeRequestedVMDelegate ToggleSizeRequestedVMCallback;

		static void togglesizerequested_cb (IntPtr menu_item, out int requisition)
		{
			try {
				MenuItem menu_item_managed = GLib.Object.GetObject (menu_item, false) as MenuItem;
				menu_item_managed.OnToggleSizeRequested (out requisition);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideToggleSizeRequested (GLib.GType gtype)
		{
			if (ToggleSizeRequestedVMCallback == null)
				ToggleSizeRequestedVMCallback = new ToggleSizeRequestedVMDelegate (togglesizerequested_cb);
			gtksharp_menuitem_override_toggle_size_request (gtype.Val, ToggleSizeRequestedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_base_toggle_size_request (IntPtr menu_item, out int requisition);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuItem), ConnectionMethod="OverrideToggleSizeRequested")]
		protected virtual void OnToggleSizeRequested (out int requisition)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menuitem_base_toggle_size_request (Handle, out requisition);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleSizeRequestedSignalDelegate (IntPtr arg0, out int arg1, IntPtr gch);

		static void ToggleSizeRequestedSignalCallback (IntPtr arg0, out int arg1, IntPtr gch)
		{
			Gtk.ToggleSizeRequestedArgs args = new Gtk.ToggleSizeRequestedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				Gtk.ToggleSizeRequestedHandler handler = (Gtk.ToggleSizeRequestedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			try {
				arg1 = ((int)args.Args[0]);
			} catch (Exception) {
				Exception ex = new Exception ("args.RetVal or 'out' property unset or set to incorrect type in Gtk.ToggleSizeRequestedHandler callback");
				GLib.ExceptionManager.RaiseUnhandledException (ex, true);
				// NOTREACHED: above call doesn't return.
				throw ex;
			}
		}

		[GLib.Signal("toggle_size_request")]
		public event Gtk.ToggleSizeRequestedHandler ToggleSizeRequested {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_size_request", new ToggleSizeRequestedSignalDelegate(ToggleSizeRequestedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_size_request", new ToggleSizeRequestedSignalDelegate(ToggleSizeRequestedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleSizeAllocatedVMDelegate (IntPtr menu_item, int allocation);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_override_toggle_size_allocate (IntPtr gtype, ToggleSizeAllocatedVMDelegate cb);

		static ToggleSizeAllocatedVMDelegate ToggleSizeAllocatedVMCallback;

		static void togglesizeallocated_cb (IntPtr menu_item, int allocation)
		{
			try {
				MenuItem menu_item_managed = GLib.Object.GetObject (menu_item, false) as MenuItem;
				menu_item_managed.OnToggleSizeAllocated (allocation);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggleSizeAllocated (GLib.GType gtype)
		{
			if (ToggleSizeAllocatedVMCallback == null)
				ToggleSizeAllocatedVMCallback = new ToggleSizeAllocatedVMDelegate (togglesizeallocated_cb);
			gtksharp_menuitem_override_toggle_size_allocate (gtype.Val, ToggleSizeAllocatedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_menuitem_base_toggle_size_allocate (IntPtr menu_item, int allocation);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.MenuItem), ConnectionMethod="OverrideToggleSizeAllocated")]
		protected virtual void OnToggleSizeAllocated (int allocation)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_menuitem_base_toggle_size_allocate (Handle, allocation);
		}

		[GLib.Signal("toggle_size_allocate")]
		public event Gtk.ToggleSizeAllocatedHandler ToggleSizeAllocated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_size_allocate", typeof (Gtk.ToggleSizeAllocatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_size_allocate", typeof (Gtk.ToggleSizeAllocatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_activate(IntPtr raw);

		public new void Activate() {
			gtk_menu_item_activate(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_deselect(IntPtr raw);

		public new void Deselect() {
			gtk_menu_item_deselect(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_menu_item_get_right_justified(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_set_right_justified(IntPtr raw, bool right_justified);

		public bool RightJustified { 
			get {
				bool raw_ret = gtk_menu_item_get_right_justified(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_menu_item_set_right_justified(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_menu_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_remove_submenu(IntPtr raw);

		[Obsolete]
		public void RemoveSubmenu() {
			gtk_menu_item_remove_submenu(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_select(IntPtr raw);

		public new void Select() {
			gtk_menu_item_select(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_toggle_size_allocate(IntPtr raw, int allocation);

		public void ToggleSizeAllocate(int allocation) {
			Gtk.Application.AssertMainThread();
			gtk_menu_item_toggle_size_allocate(Handle, allocation);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_menu_item_toggle_size_request(IntPtr raw, out int requisition);

		public int ToggleSizeRequest() {
			int requisition;
			Gtk.Application.AssertMainThread();
			gtk_menu_item_toggle_size_request(Handle, out requisition);
			return requisition;
		}

#endregion
#region Customized extensions
#line 1 "MenuItem.custom"
// Gtk.MenuItem.custom - Gtk MenuItem class customizations
//
// Author: Mike Kestner <mkestner@ximian.com> 
//
// Copyright (C) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_item_new_with_mnemonic (IntPtr label);

		public MenuItem (string label) : base (IntPtr.Zero)
		{
			if (GetType() != typeof (MenuItem)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				AccelLabel al = new AccelLabel ("");
				al.TextWithMnemonic = label;
				al.SetAlignment (0.0f, 0.5f);
				Add (al);
				al.AccelWidget = this;
				return;
			}

			owned = true;
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (label);
			Raw = gtk_menu_item_new_with_mnemonic (native);
			GLib.Marshaller.Free (native);
		}

#endregion
	}

	internal class MenuItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_menu_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_menu_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
