// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ScrolledWindow]
	public class ScrolledWindow : Gtk.Bin {

		[Obsolete]
		protected ScrolledWindow(GLib.GType gtype) : base(gtype) {}
		public ScrolledWindow(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_new(IntPtr hadjustment, IntPtr vadjustment);

		public ScrolledWindow (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ScrolledWindow)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (hadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("hadjustment");
						vals[param_count++] = new GLib.Value (hadjustment);
					}
					if (vadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("vadjustment");
						vals[param_count++] = new GLib.Value (vadjustment);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_scrolled_window_new(hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_hadjustment(IntPtr raw, IntPtr hadjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_scrolled_window_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scrolled_window_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_vadjustment(IntPtr raw, IntPtr vadjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_scrolled_window_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scrolled_window_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("hscrollbar-policy")]
		public Gtk.PolicyType HscrollbarPolicy {
			get {
				using (GLib.Value val = GetProperty ("hscrollbar-policy")) {
					Gtk.PolicyType ret = (Gtk.PolicyType) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("hscrollbar-policy", val);
				}
			}
		}

		[GLib.Property ("vscrollbar-policy")]
		public Gtk.PolicyType VscrollbarPolicy {
			get {
				using (GLib.Value val = GetProperty ("vscrollbar-policy")) {
					Gtk.PolicyType ret = (Gtk.PolicyType) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("vscrollbar-policy", val);
				}
			}
		}

		[GLib.Property ("window-placement")]
		public Gtk.CornerType WindowPlacement {
			get {
				using (GLib.Value val = GetProperty ("window-placement")) {
					Gtk.CornerType ret = (Gtk.CornerType) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("window-placement", val);
				}
			}
		}

		[GLib.Property ("window-placement-set")]
		public bool WindowPlacementSet {
			get {
				using (GLib.Value val = GetProperty ("window-placement-set")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value(value)) {
					SetProperty("window-placement-set", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_shadow_type(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_shadow_type(IntPtr raw, int type);

		[GLib.Property ("shadow-type")]
		public Gtk.ShadowType ShadowType {
			get  {
				int raw_ret = gtk_scrolled_window_get_shadow_type(Handle);
				Gtk.ShadowType ret = (Gtk.ShadowType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scrolled_window_set_shadow_type(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ScrollChildVMDelegate (IntPtr scrolled_window, int scroll, bool horizontal);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scrolledwindow_override_scroll_child (IntPtr gtype, ScrollChildVMDelegate cb);

		static ScrollChildVMDelegate ScrollChildVMCallback;

		static void scrollchild_cb (IntPtr scrolled_window, int scroll, bool horizontal)
		{
			try {
				ScrolledWindow scrolled_window_managed = GLib.Object.GetObject (scrolled_window, false) as ScrolledWindow;
				scrolled_window_managed.OnScrollChild ((Gtk.ScrollType) scroll, horizontal);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideScrollChild (GLib.GType gtype)
		{
			if (ScrollChildVMCallback == null)
				ScrollChildVMCallback = new ScrollChildVMDelegate (scrollchild_cb);
			gtksharp_scrolledwindow_override_scroll_child (gtype.Val, ScrollChildVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scrolledwindow_base_scroll_child (IntPtr scrolled_window, int scroll, bool horizontal);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScrolledWindow), ConnectionMethod="OverrideScrollChild")]
		protected virtual void OnScrollChild (Gtk.ScrollType scroll, bool horizontal)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_scrolledwindow_base_scroll_child (Handle, (int) scroll, horizontal);
		}

		[GLib.Signal("scroll_child")]
		public event Gtk.ScrollChildHandler ScrollChild {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll_child", typeof (Gtk.ScrollChildArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll_child", typeof (Gtk.ScrollChildArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveFocusOutVMDelegate (IntPtr scrolled_window, int direction);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scrolledwindow_override_move_focus_out (IntPtr gtype, MoveFocusOutVMDelegate cb);

		static MoveFocusOutVMDelegate MoveFocusOutVMCallback;

		static void movefocusout_cb (IntPtr scrolled_window, int direction)
		{
			try {
				ScrolledWindow scrolled_window_managed = GLib.Object.GetObject (scrolled_window, false) as ScrolledWindow;
				scrolled_window_managed.OnMoveFocusOut ((Gtk.DirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMoveFocusOut (GLib.GType gtype)
		{
			if (MoveFocusOutVMCallback == null)
				MoveFocusOutVMCallback = new MoveFocusOutVMDelegate (movefocusout_cb);
			gtksharp_scrolledwindow_override_move_focus_out (gtype.Val, MoveFocusOutVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scrolledwindow_base_move_focus_out (IntPtr scrolled_window, int direction);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScrolledWindow), ConnectionMethod="OverrideMoveFocusOut")]
		protected virtual void OnMoveFocusOut (Gtk.DirectionType direction)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_scrolledwindow_base_move_focus_out (Handle, (int) direction);
		}

		[GLib.Signal("move_focus_out")]
		public event Gtk.MoveFocusOutHandler MoveFocusOut {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_focus_out", typeof (Gtk.MoveFocusOutArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_focus_out", typeof (Gtk.MoveFocusOutArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_add_with_viewport(IntPtr raw, IntPtr child);

		public void AddWithViewport(Gtk.Widget child) {
			Gtk.Application.AssertMainThread();
			gtk_scrolled_window_add_with_viewport(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_hscrollbar(IntPtr raw);

		public Gtk.Widget HScrollbar { 
			get {
				IntPtr raw_ret = gtk_scrolled_window_get_hscrollbar(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrolled_window_get_placement(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_placement(IntPtr raw, int window_placement);

		public Gtk.CornerType Placement { 
			get {
				int raw_ret = gtk_scrolled_window_get_placement(Handle);
				Gtk.CornerType ret = (Gtk.CornerType) raw_ret;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_scrolled_window_set_placement(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_get_policy(IntPtr raw, out int hscrollbar_policy, out int vscrollbar_policy);

		public void GetPolicy(out Gtk.PolicyType hscrollbar_policy, out Gtk.PolicyType vscrollbar_policy) {
			Gtk.Application.AssertMainThread();
			int native_hscrollbar_policy;
			int native_vscrollbar_policy;
			gtk_scrolled_window_get_policy(Handle, out native_hscrollbar_policy, out native_vscrollbar_policy);
			hscrollbar_policy = (Gtk.PolicyType) native_hscrollbar_policy;
			vscrollbar_policy = (Gtk.PolicyType) native_vscrollbar_policy;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_scrolled_window_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_vscrollbar(IntPtr raw);

		public Gtk.Widget VScrollbar { 
			get {
				IntPtr raw_ret = gtk_scrolled_window_get_vscrollbar(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_set_policy(IntPtr raw, int hscrollbar_policy, int vscrollbar_policy);

		public void SetPolicy(Gtk.PolicyType hscrollbar_policy, Gtk.PolicyType vscrollbar_policy) {
			Gtk.Application.AssertMainThread();
			gtk_scrolled_window_set_policy(Handle, (int) hscrollbar_policy, (int) vscrollbar_policy);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrolled_window_unset_placement(IntPtr raw);

		public void UnsetPlacement() {
			gtk_scrolled_window_unset_placement(Handle);
		}

#endregion
#region Customized extensions
#line 1 "ScrolledWindow.custom"
		//
		// Gtk.ScrolledWindow.custom - Gtk ScrolledWindow class customizations
		//
		// Author: Radek Doulik  (rodo@ximian.com)
		//
		// Copyright (C) 2002 Ximian, Inc. 
		//
		// This code is inserted after the automatically generated code.
		//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
		public ScrolledWindow () : this (null, null) {
			SetPolicy (PolicyType.Automatic, PolicyType.Automatic);
		}

#endregion
	}

	internal class ScrolledWindowAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrolled_window_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_scrolled_window_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
