// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class TreeDragSourceAdapter : GLib.GInterfaceAdapter, Gtk.TreeDragSource {

		static TreeDragSourceIface iface;

		struct TreeDragSourceIface {
			public IntPtr gtype;
			public IntPtr itype;

			public RowDraggableDelegate row_draggable;
			public DragDataGetDelegate drag_data_get;
			public DragDataDeleteDelegate drag_data_delete;
		}

		static TreeDragSourceAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(TreeDragSourceAdapter));
			iface.row_draggable = new RowDraggableDelegate (RowDraggableCallback);
			iface.drag_data_get = new DragDataGetDelegate (DragDataGetCallback);
			iface.drag_data_delete = new DragDataDeleteDelegate (DragDataDeleteCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RowDraggableDelegate (IntPtr drag_source, IntPtr path);

		static bool RowDraggableCallback (IntPtr drag_source, IntPtr path)
		{
			try {
				Gtk.TreeDragSourceImplementor __obj = GLib.Object.GetObject (drag_source, false) as Gtk.TreeDragSourceImplementor;
				bool __result = __obj.RowDraggable (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DragDataGetDelegate (IntPtr drag_source, IntPtr path, IntPtr selection_data);

		static bool DragDataGetCallback (IntPtr drag_source, IntPtr path, IntPtr selection_data)
		{
			try {
				Gtk.TreeDragSourceImplementor __obj = GLib.Object.GetObject (drag_source, false) as Gtk.TreeDragSourceImplementor;
				bool __result = __obj.DragDataGet (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), selection_data == IntPtr.Zero ? null : (Gtk.SelectionData) GLib.Opaque.GetOpaque (selection_data, typeof (Gtk.SelectionData), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DragDataDeleteDelegate (IntPtr drag_source, IntPtr path);

		static bool DragDataDeleteCallback (IntPtr drag_source, IntPtr path)
		{
			try {
				Gtk.TreeDragSourceImplementor __obj = GLib.Object.GetObject (drag_source, false) as Gtk.TreeDragSourceImplementor;
				bool __result = __obj.DragDataDelete (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			TreeDragSourceIface native_iface = Marshal.PtrToStructure<TreeDragSourceIface> (ifaceptr);
			native_iface.row_draggable = iface.row_draggable;
			native_iface.drag_data_get = iface.drag_data_get;
			native_iface.drag_data_delete = iface.drag_data_delete;
			Marshal.StructureToPtr<TreeDragSourceIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public TreeDragSourceAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		TreeDragSourceImplementor implementor;

		public TreeDragSourceAdapter (TreeDragSourceImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public TreeDragSourceAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_drag_source_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_tree_drag_source_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static TreeDragSource GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static TreeDragSource GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is TreeDragSourceImplementor)
				return new TreeDragSourceAdapter (obj as TreeDragSourceImplementor);
			else if (obj as TreeDragSource == null)
				return new TreeDragSourceAdapter (obj.Handle);
			else
				return obj as TreeDragSource;
		}

		public TreeDragSourceImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_drag_source_drag_data_delete(IntPtr raw, IntPtr path);

		public bool DragDataDelete(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_drag_source_drag_data_delete(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_drag_source_drag_data_get(IntPtr raw, IntPtr path, IntPtr selection_data);

		public bool DragDataGet(Gtk.TreePath path, Gtk.SelectionData selection_data) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_drag_source_drag_data_get(Handle, path == null ? IntPtr.Zero : path.Handle, selection_data == null ? IntPtr.Zero : selection_data.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_drag_source_row_draggable(IntPtr raw, IntPtr path);

		public bool RowDraggable(Gtk.TreePath path) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_tree_drag_source_row_draggable(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
