// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[TargetList]
	public class TargetList : GLib.Opaque {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add(IntPtr raw, IntPtr target, uint flags, uint info);

		public void Add(Gdk.Atom target, uint flags, uint info) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add(Handle, target == null ? IntPtr.Zero : target.Handle, flags, info);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add_image_targets(IntPtr raw, uint info, bool writable);

		public void AddImageTargets(uint info, bool writable) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add_image_targets(Handle, info, writable);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add_rich_text_targets(IntPtr raw, uint info, bool deserializable, IntPtr buffer);

		public void AddRichTextTargets(uint info, bool deserializable, Gtk.TextBuffer buffer) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add_rich_text_targets(Handle, info, deserializable, buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add_table(IntPtr raw, Gtk.TargetEntry[] targets, uint n_targets);

		public void AddTable(Gtk.TargetEntry[] targets) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add_table(Handle, targets, (uint) (targets == null ? 0 : targets.Length));
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add_text_targets(IntPtr raw, uint info);

		public void AddTextTargets(uint info) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add_text_targets(Handle, info);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_add_uri_targets(IntPtr raw, uint info);

		public void AddUriTargets(uint info) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_add_uri_targets(Handle, info);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_target_list_find(IntPtr raw, IntPtr target, out uint info);

		public bool Find(Gdk.Atom target, out uint info) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_target_list_find(Handle, target == null ? IntPtr.Zero : target.Handle, out info);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_target_list_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_target_list_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_remove(IntPtr raw, IntPtr target);

		public void Remove(Gdk.Atom target) {
			Gtk.Application.AssertMainThread();
			gtk_target_list_remove(Handle, target == null ? IntPtr.Zero : target.Handle);
		}

		public TargetList(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_target_list_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gtk_target_list_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_target_list_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gtk_target_list_unref (raw);
				Owned = false;
			}
		}

#endregion
#region Customized extensions
#line 1 "TargetList.custom"
// TargetList.custom - customizations for Gtk.TargetList
//
// Copyright (c) 2004  Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_target_list_new(Gtk.TargetEntry[] targets, uint n_targets);

		public TargetList() : base(gtk_target_list_new(null, 0)) {}

		public TargetList (Gtk.TargetEntry[] targets) : this(gtk_target_list_new(targets, (uint) targets.Length)) {}

		public void Add(string target, uint flags, uint info) {
			Add(Gdk.Atom.Intern (target, false), flags, info);
		}

		public bool Find(string target, out uint info) {
			return Find(Gdk.Atom.Intern (target, false), out info);
		}

		public void Remove(string target) {
			Remove(Gdk.Atom.Intern (target, false));
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gtk_target_table_free (IntPtr list, int n_targets);
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_target_table_new_from_list (IntPtr list, out int n_targets);

		public static explicit operator TargetEntry[] (TargetList list)
		{
			int length;
			IntPtr ret = gtk_target_table_new_from_list (list.Handle, out length);
			TargetEntry[] entries = new TargetEntry[length];
			for (int i = 0; i < length; i++) {
				entries [i] = (TargetEntry) Marshal.PtrToStructure (new IntPtr (ret.ToInt64 () + i * Marshal.SizeOf (typeof (TargetEntry))), typeof (TargetEntry));
			}
			if (ret != IntPtr.Zero)
				gtk_target_table_free (ret, length);
			return entries;
		}

#endregion
	}

	internal class TargetListAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_target_list_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_target_list_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
