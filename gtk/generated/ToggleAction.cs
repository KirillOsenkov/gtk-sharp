// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ToggleAction]
	public class ToggleAction : Gtk.Action {

		[Obsolete]
		protected ToggleAction(GLib.GType gtype) : base(gtype) {}
		public ToggleAction(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_action_new(IntPtr name, IntPtr label, IntPtr tooltip, IntPtr stock_id);

		public ToggleAction (string name, string label, string tooltip, string stock_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ToggleAction)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[4];
					var names = stackalloc IntPtr[4];
					names[0] = GLib.Marshaller.StringToPtrGStrdup ("name");
					vals[0] = new GLib.Value (name);
					names[1] = GLib.Marshaller.StringToPtrGStrdup ("label");
					vals[1] = new GLib.Value (label);
					names[2] = GLib.Marshaller.StringToPtrGStrdup ("tooltip");
					vals[2] = new GLib.Value (tooltip);
					names[3] = GLib.Marshaller.StringToPtrGStrdup ("stock_id");
					vals[3] = new GLib.Value (stock_id);
					CreateNativeObject (names, vals, 4);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_tooltip = GLib.Marshaller.StringToPtrGStrdup (tooltip);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			owned = true;
			Raw = gtk_toggle_action_new(native_name, native_label, native_tooltip, native_stock_id);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_tooltip);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_action_get_draw_as_radio(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_action_set_draw_as_radio(IntPtr raw, bool draw_as_radio);

		[GLib.Property ("draw-as-radio")]
		public bool DrawAsRadio {
			get  {
				bool raw_ret = gtk_toggle_action_get_draw_as_radio(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_toggle_action_set_draw_as_radio(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_toggle_action_get_active(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_action_set_active(IntPtr raw, bool is_active);

		[GLib.Property ("active")]
		public bool Active {
			get  {
				bool raw_ret = gtk_toggle_action_get_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_toggle_action_set_active(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggledVMDelegate (IntPtr action);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toggleaction_override_toggled (IntPtr gtype, ToggledVMDelegate cb);

		static ToggledVMDelegate ToggledVMCallback;

		static void toggled_cb (IntPtr action)
		{
			try {
				ToggleAction action_managed = GLib.Object.GetObject (action, false) as ToggleAction;
				action_managed.OnToggled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggled (GLib.GType gtype)
		{
			if (ToggledVMCallback == null)
				ToggledVMCallback = new ToggledVMDelegate (toggled_cb);
			gtksharp_toggleaction_override_toggled (gtype.Val, ToggledVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_toggleaction_base_toggled (IntPtr action);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ToggleAction), ConnectionMethod="OverrideToggled")]
		protected virtual void OnToggled ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_toggleaction_base_toggled (Handle);
		}

		[GLib.Signal("toggled")]
		public event System.EventHandler Toggled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggled");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_action_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_toggle_action_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_toggle_action_toggled(IntPtr raw);

		public void Toggle() {
			gtk_toggle_action_toggled(Handle);
		}

#endregion
	}

	internal class ToggleActionAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_toggle_action_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_toggle_action_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
