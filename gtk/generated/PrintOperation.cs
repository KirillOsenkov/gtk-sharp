// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PrintOperation]
	public class PrintOperation : GLib.Object, Gtk.PrintOperationPreview {

		[Obsolete]
		protected PrintOperation(GLib.GType gtype) : base(gtype) {}
		public PrintOperation(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_new();

		public PrintOperation () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintOperation)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_print_operation_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_get_default_page_setup(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_default_page_setup(IntPtr raw, IntPtr default_page_setup);

		[GLib.Property ("default-page-setup")]
		public Gtk.PageSetup DefaultPageSetup {
			get  {
				IntPtr raw_ret = gtk_print_operation_get_default_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_default_page_setup(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_get_print_settings(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_print_settings(IntPtr raw, IntPtr print_settings);

		[GLib.Property ("print-settings")]
		public Gtk.PrintSettings PrintSettings {
			get  {
				IntPtr raw_ret = gtk_print_operation_get_print_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_print_settings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_job_name(IntPtr raw, IntPtr job_name);

		[GLib.Property ("job-name")]
		public string JobName {
			get {
				using (GLib.Value val = GetProperty ("job-name")) {
					string ret = (string) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_operation_set_job_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_n_pages(IntPtr raw, int n_pages);

		[GLib.Property ("n-pages")]
		public int NPages {
			get {
				using (GLib.Value val = GetProperty ("n-pages")) {
					int ret = (int) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_n_pages(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_current_page(IntPtr raw, int current_page);

		[GLib.Property ("current-page")]
		public int CurrentPage {
			get {
				using (GLib.Value val = GetProperty ("current-page")) {
					int ret = (int) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_current_page(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_use_full_page(IntPtr raw, bool full_page);

		[GLib.Property ("use-full-page")]
		public bool UseFullPage {
			get {
				using (GLib.Value val = GetProperty ("use-full-page")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_use_full_page(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_track_print_status(IntPtr raw, bool track_status);

		[GLib.Property ("track-print-status")]
		public bool TrackPrintStatus {
			get {
				using (GLib.Value val = GetProperty ("track-print-status")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_track_print_status(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_unit(IntPtr raw, int unit);

		[GLib.Property ("unit")]
		public Gtk.Unit Unit {
			get {
				using (GLib.Value val = GetProperty ("unit")) {
					Gtk.Unit ret = (Gtk.Unit) (Enum) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_unit(Handle, (int) value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_show_progress(IntPtr raw, bool show_progress);

		[GLib.Property ("show-progress")]
		public bool ShowProgress {
			get {
				using (GLib.Value val = GetProperty ("show-progress")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_show_progress(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_allow_async(IntPtr raw, bool allow_async);

		[GLib.Property ("allow-async")]
		public bool AllowAsync {
			get {
				using (GLib.Value val = GetProperty ("allow-async")) {
					bool ret = (bool) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_print_operation_set_allow_async(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_export_filename(IntPtr raw, IntPtr filename);

		[GLib.Property ("export-filename")]
		public string ExportFilename {
			get {
				using (GLib.Value val = GetProperty ("export-filename")) {
					string ret = (string) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_operation_set_export_filename(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_operation_get_status(IntPtr raw);

		[GLib.Property ("status")]
		public Gtk.PrintStatus Status {
			get  {
				int raw_ret = gtk_print_operation_get_status(Handle);
				Gtk.PrintStatus ret = (Gtk.PrintStatus) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_get_status_string(IntPtr raw);

		[GLib.Property ("status-string")]
		public string StatusString {
			get  {
				IntPtr raw_ret = gtk_print_operation_get_status_string(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_set_custom_tab_label(IntPtr raw, IntPtr label);

		[GLib.Property ("custom-tab-label")]
		public string CustomTabLabel {
			get {
				using (GLib.Value val = GetProperty ("custom-tab-label")) {
					string ret = (string) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_print_operation_set_custom_tab_label(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DoneVMDelegate (IntPtr operation, int result);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_done (IntPtr gtype, DoneVMDelegate cb);

		static DoneVMDelegate DoneVMCallback;

		static void done_cb (IntPtr operation, int result)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnDone ((Gtk.PrintOperationResult) result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDone (GLib.GType gtype)
		{
			if (DoneVMCallback == null)
				DoneVMCallback = new DoneVMDelegate (done_cb);
			gtksharp_printoperation_override_done (gtype.Val, DoneVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_done (IntPtr operation, int result);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideDone")]
		protected virtual void OnDone (Gtk.PrintOperationResult result)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_done (Handle, (int) result);
		}

		[GLib.Signal("done")]
		public event Gtk.DoneHandler Done {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "done", typeof (Gtk.DoneArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "done", typeof (Gtk.DoneArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BeginPrintVMDelegate (IntPtr operation, IntPtr context);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_begin_print (IntPtr gtype, BeginPrintVMDelegate cb);

		static BeginPrintVMDelegate BeginPrintVMCallback;

		static void beginprint_cb (IntPtr operation, IntPtr context)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnBeginPrint (GLib.Object.GetObject(context) as Gtk.PrintContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideBeginPrint (GLib.GType gtype)
		{
			if (BeginPrintVMCallback == null)
				BeginPrintVMCallback = new BeginPrintVMDelegate (beginprint_cb);
			gtksharp_printoperation_override_begin_print (gtype.Val, BeginPrintVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_begin_print (IntPtr operation, IntPtr context);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideBeginPrint")]
		protected virtual void OnBeginPrint (Gtk.PrintContext context)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_begin_print (Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[GLib.Signal("begin-print")]
		public event Gtk.BeginPrintHandler BeginPrint {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "begin-print", typeof (Gtk.BeginPrintArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "begin-print", typeof (Gtk.BeginPrintArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PaginateVMDelegate (IntPtr operation, IntPtr context);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_paginate (IntPtr gtype, PaginateVMDelegate cb);

		static PaginateVMDelegate PaginateVMCallback;

		static bool paginate_cb (IntPtr operation, IntPtr context)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				return operation_managed.OnPaginate (GLib.Object.GetObject(context) as Gtk.PrintContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverridePaginate (GLib.GType gtype)
		{
			if (PaginateVMCallback == null)
				PaginateVMCallback = new PaginateVMDelegate (paginate_cb);
			gtksharp_printoperation_override_paginate (gtype.Val, PaginateVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_printoperation_base_paginate (IntPtr operation, IntPtr context);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverridePaginate")]
		protected virtual bool OnPaginate (Gtk.PrintContext context)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_printoperation_base_paginate (Handle, context == null ? IntPtr.Zero : context.Handle);
			return __ret;
		}

		[GLib.Signal("paginate")]
		public event Gtk.PaginateHandler Paginate {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "paginate", typeof (Gtk.PaginateArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "paginate", typeof (Gtk.PaginateArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RequestPageSetupVMDelegate (IntPtr operation, IntPtr context, int page_nr, IntPtr setup);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_request_page_setup (IntPtr gtype, RequestPageSetupVMDelegate cb);

		static RequestPageSetupVMDelegate RequestPageSetupVMCallback;

		static void requestpagesetup_cb (IntPtr operation, IntPtr context, int page_nr, IntPtr setup)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnRequestPageSetup (GLib.Object.GetObject(context) as Gtk.PrintContext, page_nr, GLib.Object.GetObject(setup) as Gtk.PageSetup);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRequestPageSetup (GLib.GType gtype)
		{
			if (RequestPageSetupVMCallback == null)
				RequestPageSetupVMCallback = new RequestPageSetupVMDelegate (requestpagesetup_cb);
			gtksharp_printoperation_override_request_page_setup (gtype.Val, RequestPageSetupVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_request_page_setup (IntPtr operation, IntPtr context, int page_nr, IntPtr setup);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideRequestPageSetup")]
		protected virtual void OnRequestPageSetup (Gtk.PrintContext context, int page_nr, Gtk.PageSetup setup)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_request_page_setup (Handle, context == null ? IntPtr.Zero : context.Handle, page_nr, setup == null ? IntPtr.Zero : setup.Handle);
		}

		[GLib.Signal("request-page-setup")]
		public event Gtk.RequestPageSetupHandler RequestPageSetup {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "request-page-setup", typeof (Gtk.RequestPageSetupArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "request-page-setup", typeof (Gtk.RequestPageSetupArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DrawPageVMDelegate (IntPtr operation, IntPtr context, int page_nr);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_draw_page (IntPtr gtype, DrawPageVMDelegate cb);

		static DrawPageVMDelegate DrawPageVMCallback;

		static void drawpage_cb (IntPtr operation, IntPtr context, int page_nr)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnDrawPage (GLib.Object.GetObject(context) as Gtk.PrintContext, page_nr);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDrawPage (GLib.GType gtype)
		{
			if (DrawPageVMCallback == null)
				DrawPageVMCallback = new DrawPageVMDelegate (drawpage_cb);
			gtksharp_printoperation_override_draw_page (gtype.Val, DrawPageVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_draw_page (IntPtr operation, IntPtr context, int page_nr);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideDrawPage")]
		protected virtual void OnDrawPage (Gtk.PrintContext context, int page_nr)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_draw_page (Handle, context == null ? IntPtr.Zero : context.Handle, page_nr);
		}

		[GLib.Signal("draw-page")]
		public event Gtk.DrawPageHandler DrawPage {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "draw-page", typeof (Gtk.DrawPageArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "draw-page", typeof (Gtk.DrawPageArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EndPrintVMDelegate (IntPtr operation, IntPtr context);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_end_print (IntPtr gtype, EndPrintVMDelegate cb);

		static EndPrintVMDelegate EndPrintVMCallback;

		static void endprint_cb (IntPtr operation, IntPtr context)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnEndPrint (GLib.Object.GetObject(context) as Gtk.PrintContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEndPrint (GLib.GType gtype)
		{
			if (EndPrintVMCallback == null)
				EndPrintVMCallback = new EndPrintVMDelegate (endprint_cb);
			gtksharp_printoperation_override_end_print (gtype.Val, EndPrintVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_end_print (IntPtr operation, IntPtr context);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideEndPrint")]
		protected virtual void OnEndPrint (Gtk.PrintContext context)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_end_print (Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[GLib.Signal("end-print")]
		public event Gtk.EndPrintHandler EndPrint {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "end-print", typeof (Gtk.EndPrintArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "end-print", typeof (Gtk.EndPrintArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StatusChangedVMDelegate (IntPtr operation);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_status_changed (IntPtr gtype, StatusChangedVMDelegate cb);

		static StatusChangedVMDelegate StatusChangedVMCallback;

		static void statuschanged_cb (IntPtr operation)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnStatusChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStatusChanged (GLib.GType gtype)
		{
			if (StatusChangedVMCallback == null)
				StatusChangedVMCallback = new StatusChangedVMDelegate (statuschanged_cb);
			gtksharp_printoperation_override_status_changed (gtype.Val, StatusChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_status_changed (IntPtr operation);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideStatusChanged")]
		protected virtual void OnStatusChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_status_changed (Handle);
		}

		[GLib.Signal("status-changed")]
		public event System.EventHandler StatusChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status-changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status-changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateCustomWidgetVMDelegate (IntPtr operation);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_create_custom_widget (IntPtr gtype, CreateCustomWidgetVMDelegate cb);

		static CreateCustomWidgetVMDelegate CreateCustomWidgetVMCallback;

		static IntPtr createcustomwidget_cb (IntPtr operation)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				Gtk.Widget raw_ret = operation_managed.OnCreateCustomWidget ();
				return raw_ret == null ? IntPtr.Zero : raw_ret.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideCreateCustomWidget (GLib.GType gtype)
		{
			if (CreateCustomWidgetVMCallback == null)
				CreateCustomWidgetVMCallback = new CreateCustomWidgetVMDelegate (createcustomwidget_cb);
			gtksharp_printoperation_override_create_custom_widget (gtype.Val, CreateCustomWidgetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_printoperation_base_create_custom_widget (IntPtr operation);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideCreateCustomWidget")]
		protected virtual Gtk.Widget OnCreateCustomWidget ()
		{
			Gtk.Application.AssertMainThread();
			IntPtr __ret = gtksharp_printoperation_base_create_custom_widget (Handle);
			return GLib.Object.GetObject(__ret) as Gtk.Widget;
		}

		[GLib.Signal("create-custom-widget")]
		public event Gtk.CreateCustomWidgetHandler CreateCustomWidget {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "create-custom-widget", typeof (Gtk.CreateCustomWidgetArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "create-custom-widget", typeof (Gtk.CreateCustomWidgetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CustomWidgetApplyVMDelegate (IntPtr operation, IntPtr widget);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_custom_widget_apply (IntPtr gtype, CustomWidgetApplyVMDelegate cb);

		static CustomWidgetApplyVMDelegate CustomWidgetApplyVMCallback;

		static void customwidgetapply_cb (IntPtr operation, IntPtr widget)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				operation_managed.OnCustomWidgetApply (GLib.Object.GetObject(widget) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCustomWidgetApply (GLib.GType gtype)
		{
			if (CustomWidgetApplyVMCallback == null)
				CustomWidgetApplyVMCallback = new CustomWidgetApplyVMDelegate (customwidgetapply_cb);
			gtksharp_printoperation_override_custom_widget_apply (gtype.Val, CustomWidgetApplyVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_base_custom_widget_apply (IntPtr operation, IntPtr widget);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideCustomWidgetApply")]
		protected virtual void OnCustomWidgetApply (Gtk.Widget widget)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_printoperation_base_custom_widget_apply (Handle, widget == null ? IntPtr.Zero : widget.Handle);
		}

		[GLib.Signal("custom-widget-apply")]
		public event Gtk.CustomWidgetApplyHandler CustomWidgetApply {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "custom-widget-apply", typeof (Gtk.CustomWidgetApplyArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "custom-widget-apply", typeof (Gtk.CustomWidgetApplyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PreviewVMDelegate (IntPtr operation, IntPtr preview, IntPtr context, IntPtr parent);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_printoperation_override_preview (IntPtr gtype, PreviewVMDelegate cb);

		static PreviewVMDelegate PreviewVMCallback;

		static bool preview_cb (IntPtr operation, IntPtr preview, IntPtr context, IntPtr parent)
		{
			try {
				PrintOperation operation_managed = GLib.Object.GetObject (operation, false) as PrintOperation;
				return operation_managed.OnPreview (Gtk.PrintOperationPreviewAdapter.GetObject (preview, false), GLib.Object.GetObject(context) as Gtk.PrintContext, GLib.Object.GetObject(parent) as Gtk.Window);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverridePreview (GLib.GType gtype)
		{
			if (PreviewVMCallback == null)
				PreviewVMCallback = new PreviewVMDelegate (preview_cb);
			gtksharp_printoperation_override_preview (gtype.Val, PreviewVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtksharp_printoperation_base_preview (IntPtr operation, IntPtr preview, IntPtr context, IntPtr parent);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverridePreview")]
		protected virtual bool OnPreview (Gtk.PrintOperationPreview preview, Gtk.PrintContext context, Gtk.Window parent)
		{
			Gtk.Application.AssertMainThread();
			bool __ret = gtksharp_printoperation_base_preview (Handle, preview == null ? IntPtr.Zero : preview.Handle, context == null ? IntPtr.Zero : context.Handle, parent == null ? IntPtr.Zero : parent.Handle);
			return __ret;
		}

		[GLib.Signal("preview")]
		public event Gtk.PreviewHandler Preview {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "preview", typeof (Gtk.PreviewArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "preview", typeof (Gtk.PreviewArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_cancel(IntPtr raw);

		public void Cancel() {
			gtk_print_operation_cancel(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe void gtk_print_operation_get_error(IntPtr raw, out IntPtr error);

		public unsafe void GetError() {
			Gtk.Application.AssertMainThread();
			IntPtr error = IntPtr.Zero;
			gtk_print_operation_get_error(Handle, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_print_operation_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_operation_is_finished(IntPtr raw);

		public bool IsFinished { 
			get {
				bool raw_ret = gtk_print_operation_is_finished(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int gtk_print_operation_run(IntPtr raw, int action, IntPtr parent, out IntPtr error);

		public unsafe Gtk.PrintOperationResult Run(Gtk.PrintOperationAction action, Gtk.Window parent) {
			Gtk.Application.AssertMainThread();
			IntPtr error = IntPtr.Zero;
			int raw_ret = gtk_print_operation_run(Handle, (int) action, parent == null ? IntPtr.Zero : parent.Handle, out error);
			Gtk.PrintOperationResult ret = (Gtk.PrintOperationResult) raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_preview_end_preview(IntPtr raw);

		public void EndPreview() {
			gtk_print_operation_preview_end_preview(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_operation_preview_is_selected(IntPtr raw, int page_nr);

		public bool IsSelected(int page_nr) {
			Gtk.Application.AssertMainThread();
			bool raw_ret = gtk_print_operation_preview_is_selected(Handle, page_nr);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_operation_preview_render_page(IntPtr raw, int page_nr);

		public void RenderPage(int page_nr) {
			Gtk.Application.AssertMainThread();
			gtk_print_operation_preview_render_page(Handle, page_nr);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReadyVMDelegate (IntPtr preview, IntPtr context);

		static ReadyVMDelegate ReadyVMCallback;

		static void ready_cb (IntPtr preview, IntPtr context)
		{
			try {
				PrintOperation preview_managed = GLib.Object.GetObject (preview, false) as PrintOperation;
				preview_managed.OnReady (GLib.Object.GetObject(context) as Gtk.PrintContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideReady (GLib.GType gtype)
		{
			if (ReadyVMCallback == null)
				ReadyVMCallback = new ReadyVMDelegate (ready_cb);
			OverrideVirtualMethod (gtype, "ready", ReadyVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideReady")]
		protected virtual void OnReady (Gtk.PrintContext context)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [2];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (context)) {
						g_signal_chain_from_overridden (inst_and_params, ref ret);
					}
				}
			}
		}

		[GLib.Signal("ready")]
		public event Gtk.ReadyHandler Ready {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ready", typeof (Gtk.ReadyArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ready", typeof (Gtk.ReadyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GotPageSizeVMDelegate (IntPtr preview, IntPtr context, IntPtr page_setup);

		static GotPageSizeVMDelegate GotPageSizeVMCallback;

		static void gotpagesize_cb (IntPtr preview, IntPtr context, IntPtr page_setup)
		{
			try {
				PrintOperation preview_managed = GLib.Object.GetObject (preview, false) as PrintOperation;
				preview_managed.OnGotPageSize (GLib.Object.GetObject(context) as Gtk.PrintContext, GLib.Object.GetObject(page_setup) as Gtk.PageSetup);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideGotPageSize (GLib.GType gtype)
		{
			if (GotPageSizeVMCallback == null)
				GotPageSizeVMCallback = new GotPageSizeVMDelegate (gotpagesize_cb);
			OverrideVirtualMethod (gtype, "got-page-size", GotPageSizeVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.PrintOperation), ConnectionMethod="OverrideGotPageSize")]
		protected virtual void OnGotPageSize (Gtk.PrintContext context, Gtk.PageSetup page_setup)
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [3];
				using (inst_and_params[0] = new GLib.Value (this)) {
					using (inst_and_params [1] = new GLib.Value (context)) {
						using (inst_and_params [2] = new GLib.Value (page_setup)) {
							g_signal_chain_from_overridden (inst_and_params, ref ret);
						}
					}
				}
			}
		}

		[GLib.Signal("got-page-size")]
		public event Gtk.GotPageSizeHandler GotPageSize {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "got-page-size", typeof (Gtk.GotPageSizeArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "got-page-size", typeof (Gtk.GotPageSizeArgs));
				sig.RemoveDelegate (value);
			}
		}

#endregion
	}

	internal class PrintOperationAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_operation_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_print_operation_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
