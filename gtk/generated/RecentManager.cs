// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RecentManager]
	public class RecentManager : GLib.Object {

		[Obsolete]
		protected RecentManager(GLib.GType gtype) : base(gtype) {}
		public RecentManager(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_new();

		public RecentManager () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RecentManager)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_recent_manager_new();
		}

		[GLib.Property ("filename")]
		public string Filename {
			get {
				using (GLib.Value val = GetProperty ("filename")) {
					string ret = (string) val;
					return ret;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_manager_get_limit(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_manager_set_limit(IntPtr raw, int limit);

		[GLib.Property ("limit")]
		public int Limit {
			get  {
				int raw_ret = gtk_recent_manager_get_limit(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_recent_manager_set_limit(Handle, value);
			}
		}

		[GLib.Property ("size")]
		public int Size {
			get {
				using (GLib.Value val = GetProperty ("size")) {
					int ret = (int) val;
					return ret;
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr manager);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_recentmanager_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr manager)
		{
			try {
				RecentManager manager_managed = GLib.Object.GetObject (manager, false) as RecentManager;
				manager_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gtksharp_recentmanager_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_recentmanager_base_changed (IntPtr manager);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.RecentManager), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_recentmanager_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_manager_add_full(IntPtr raw, IntPtr uri, ref Gtk.RecentData recent_data);

		public bool AddFull(string uri, Gtk.RecentData recent_data) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_recent_manager_add_full(Handle, native_uri, ref recent_data);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_manager_add_item(IntPtr raw, IntPtr uri);

		public bool AddItem(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_recent_manager_add_item(Handle, native_uri);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_manager_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gtk_recent_manager_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_get_default();

		public static Gtk.RecentManager Default { 
			get {
				IntPtr raw_ret = gtk_recent_manager_get_default();
				Gtk.RecentManager ret = GLib.Object.GetObject(raw_ret) as Gtk.RecentManager;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_get_for_screen(IntPtr screen);

		[Obsolete]
		public static Gtk.RecentManager GetForScreen(Gdk.Screen screen) {
			Gtk.Application.AssertMainThread();
			IntPtr raw_ret = gtk_recent_manager_get_for_screen(screen == null ? IntPtr.Zero : screen.Handle);
			Gtk.RecentManager ret = GLib.Object.GetObject(raw_ret) as Gtk.RecentManager;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_get_items(IntPtr raw);

		public GLib.List Items { 
			get {
				IntPtr raw_ret = gtk_recent_manager_get_items(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_recent_manager_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_manager_has_item(IntPtr raw, IntPtr uri);

		public bool HasItem(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			bool raw_ret = gtk_recent_manager_has_item(Handle, native_uri);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gtk_recent_manager_lookup_item(IntPtr raw, IntPtr uri, out IntPtr error);

		public unsafe Gtk.RecentInfo LookupItem(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gtk_recent_manager_lookup_item(Handle, native_uri, out error);
			Gtk.RecentInfo ret = raw_ret == IntPtr.Zero ? null : (Gtk.RecentInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.RecentInfo), false);
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_recent_manager_move_item(IntPtr raw, IntPtr uri, IntPtr new_uri, out IntPtr error);

		public unsafe bool MoveItem(string uri, string new_uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr native_new_uri = GLib.Marshaller.StringToPtrGStrdup (new_uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_recent_manager_move_item(Handle, native_uri, native_new_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			GLib.Marshaller.Free (native_new_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe int gtk_recent_manager_purge_items(IntPtr raw, out IntPtr error);

		public unsafe int PurgeItems() {
			Gtk.Application.AssertMainThread();
			IntPtr error = IntPtr.Zero;
			int raw_ret = gtk_recent_manager_purge_items(Handle, out error);
			int ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_recent_manager_remove_item(IntPtr raw, IntPtr uri, out IntPtr error);

		public unsafe bool RemoveItem(string uri) {
			Gtk.Application.AssertMainThread();
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_recent_manager_remove_item(Handle, native_uri, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_manager_set_screen(IntPtr raw, IntPtr screen);

		[Obsolete]
		public Gdk.Screen Screen { 
			set {
				Gtk.Application.AssertMainThread();
				gtk_recent_manager_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

#endregion
	}

	internal class RecentManagerAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_manager_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_recent_manager_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
