// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Viewport]
	public class Viewport : Gtk.Bin {

		[Obsolete]
		protected Viewport(GLib.GType gtype) : base(gtype) {}
		public Viewport(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_viewport_new(IntPtr hadjustment, IntPtr vadjustment);

		public Viewport (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Viewport)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					if (hadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("hadjustment");
						vals[param_count++] = new GLib.Value (hadjustment);
					}
					if (vadjustment != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("vadjustment");
						vals[param_count++] = new GLib.Value (vadjustment);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_viewport_new(hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_viewport_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_viewport_set_hadjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_viewport_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_viewport_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_viewport_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_viewport_set_vadjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_viewport_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_viewport_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_viewport_get_shadow_type(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_viewport_set_shadow_type(IntPtr raw, int type);

		[GLib.Property ("shadow-type")]
		public Gtk.ShadowType ShadowType {
			get  {
				int raw_ret = gtk_viewport_get_shadow_type(Handle);
				Gtk.ShadowType ret = (Gtk.ShadowType) raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_viewport_set_shadow_type(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ScrollAdjustmentsSetVMDelegate (IntPtr viewport, IntPtr hadjustment, IntPtr vadjustment);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_viewport_override_set_scroll_adjustments (IntPtr gtype, ScrollAdjustmentsSetVMDelegate cb);

		static ScrollAdjustmentsSetVMDelegate ScrollAdjustmentsSetVMCallback;

		static void scrolladjustmentsset_cb (IntPtr viewport, IntPtr hadjustment, IntPtr vadjustment)
		{
			try {
				Viewport viewport_managed = GLib.Object.GetObject (viewport, false) as Viewport;
				viewport_managed.OnScrollAdjustmentsSet (GLib.Object.GetObject(hadjustment) as Gtk.Adjustment, GLib.Object.GetObject(vadjustment) as Gtk.Adjustment);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideScrollAdjustmentsSet (GLib.GType gtype)
		{
			if (ScrollAdjustmentsSetVMCallback == null)
				ScrollAdjustmentsSetVMCallback = new ScrollAdjustmentsSetVMDelegate (scrolladjustmentsset_cb);
			gtksharp_viewport_override_set_scroll_adjustments (gtype.Val, ScrollAdjustmentsSetVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_viewport_base_set_scroll_adjustments (IntPtr viewport, IntPtr hadjustment, IntPtr vadjustment);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Viewport), ConnectionMethod="OverrideScrollAdjustmentsSet")]
		protected virtual void OnScrollAdjustmentsSet (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_viewport_base_set_scroll_adjustments (Handle, hadjustment == null ? IntPtr.Zero : hadjustment.Handle, vadjustment == null ? IntPtr.Zero : vadjustment.Handle);
		}

		[GLib.Signal("set_scroll_adjustments")]
		public event Gtk.ScrollAdjustmentsSetHandler ScrollAdjustmentsSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_scroll_adjustments", typeof (Gtk.ScrollAdjustmentsSetArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "set_scroll_adjustments", typeof (Gtk.ScrollAdjustmentsSetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_viewport_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_viewport_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "Viewport.custom"
// Customizations for Viewport.
// Author: Lee Mallabone <gnome@fonicmonkey.net>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		// Make a default constructor that wraps typical usage.
		public Viewport (): this (null, null) {
		}

#endregion
	}

	internal class ViewportAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_viewport_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_viewport_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
