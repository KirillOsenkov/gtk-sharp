// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ScaleButton]
	public class ScaleButton : Gtk.Button {

		public ScaleButton(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_button_new(int size, double min, double max, double step, IntPtr[] icons);

		public ScaleButton (Gtk.IconSize size, double min, double max, double step, string[] icons) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ScaleButton)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			int cnt_icons = icons == null ? 0 : icons.Length;
			IntPtr[] native_icons = new IntPtr [cnt_icons + 1];
			for (int i = 0; i < cnt_icons; i++) {
				native_icons [i] = GLib.Marshaller.StringToPtrGStrdup (icons[i]);
			}
			native_icons [cnt_icons] = IntPtr.Zero;
			owned = true;
			Raw = gtk_scale_button_new((int) size, min, max, step, native_icons);
			for (int i = 0; i < cnt_icons; i++) {
				GLib.Marshaller.Free (native_icons[i]);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_scale_button_get_value(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_button_set_value(IntPtr raw, double value);

		[GLib.Property ("value")]
		public double Value {
			get  {
				double raw_ret = gtk_scale_button_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scale_button_set_value(Handle, value);
			}
		}

		[GLib.Property ("size")]
		public Gtk.IconSize Size {
			get {
				using (GLib.Value val = GetProperty ("size")) {
					Gtk.IconSize ret = (Gtk.IconSize) (Enum) val;
					return ret;
				}
			}
			set {
				using (GLib.Value val = new GLib.Value((Enum) value)) {
					SetProperty("size", val);
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_button_get_adjustment(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_button_set_adjustment(IntPtr raw, IntPtr adjustment);

		[GLib.Property ("adjustment")]
		public Gtk.Adjustment Adjustment {
			get  {
				IntPtr raw_ret = gtk_scale_button_get_adjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_scale_button_set_adjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scale_button_set_icons(IntPtr raw, IntPtr[] icons);

		[GLib.Property ("icons")]
		public string[] Icons {
			get {
				using (GLib.Value val = GetProperty ("icons")) {
					string[] ret = (string[]) val;
					return ret;
				}
			}
			set  {
				Gtk.Application.AssertMainThread();
				int cnt_value = value == null ? 0 : value.Length;
				IntPtr[] native_value = new IntPtr [cnt_value + 1];
				for (int i = 0; i < cnt_value; i++) {
					native_value [i] = GLib.Marshaller.StringToPtrGStrdup (value[i]);
				}
				native_value [cnt_value] = IntPtr.Zero;
				gtk_scale_button_set_icons(Handle, native_value);
				for (int i = 0; i < cnt_value; i++) {
					GLib.Marshaller.Free (native_value[i]);
				}
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ValueChangedVMDelegate (IntPtr button, double value);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scalebutton_override_value_changed (IntPtr gtype, ValueChangedVMDelegate cb);

		static ValueChangedVMDelegate ValueChangedVMCallback;

		static void valuechanged_cb (IntPtr button, double value)
		{
			try {
				ScaleButton button_managed = GLib.Object.GetObject (button, false) as ScaleButton;
				button_managed.OnValueChanged (value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideValueChanged (GLib.GType gtype)
		{
			if (ValueChangedVMCallback == null)
				ValueChangedVMCallback = new ValueChangedVMDelegate (valuechanged_cb);
			gtksharp_scalebutton_override_value_changed (gtype.Val, ValueChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_scalebutton_base_value_changed (IntPtr button, double value);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScaleButton), ConnectionMethod="OverrideValueChanged")]
		protected virtual void OnValueChanged (double value)
		{
			Gtk.Application.AssertMainThread();
			gtksharp_scalebutton_base_value_changed (Handle, value);
		}

		[GLib.Signal("value-changed")]
		public event Gtk.ValueChangedHandler ValueChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value-changed", typeof (Gtk.ValueChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "value-changed", typeof (Gtk.ValueChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopupVMDelegate (IntPtr inst);

		static PopupVMDelegate PopupVMCallback;

		static void popup_cb (IntPtr inst)
		{
			try {
				ScaleButton inst_managed = GLib.Object.GetObject (inst, false) as ScaleButton;
				inst_managed.OnPopup ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePopup (GLib.GType gtype)
		{
			if (PopupVMCallback == null)
				PopupVMCallback = new PopupVMDelegate (popup_cb);
			OverrideVirtualMethod (gtype, "popup", PopupVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScaleButton), ConnectionMethod="OverridePopup")]
		protected virtual void OnPopup ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("popup")]
		public event System.EventHandler Popup {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popup");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popup");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopdownVMDelegate (IntPtr inst);

		static PopdownVMDelegate PopdownVMCallback;

		static void popdown_cb (IntPtr inst)
		{
			try {
				ScaleButton inst_managed = GLib.Object.GetObject (inst, false) as ScaleButton;
				inst_managed.OnPopdown ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePopdown (GLib.GType gtype)
		{
			if (PopdownVMCallback == null)
				PopdownVMCallback = new PopdownVMDelegate (popdown_cb);
			OverrideVirtualMethod (gtype, "popdown", PopdownVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.ScaleButton), ConnectionMethod="OverridePopdown")]
		protected virtual void OnPopdown ()
		{
			GLib.Value ret = GLib.Value.Empty;
			unsafe {
				GLib.Value* inst_and_params = stackalloc GLib.Value [1];
				using (inst_and_params[0] = new GLib.Value (this)) {
					g_signal_chain_from_overridden (inst_and_params, ref ret);
				}
			}
		}

		[GLib.Signal("popdown")]
		public event System.EventHandler Popdown {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popdown");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "popdown");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_button_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_scale_button_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ScaleButtonAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scale_button_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_scale_button_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
