// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RadioMenuItem]
	public class RadioMenuItem : Gtk.CheckMenuItem {

		[Obsolete]
		protected RadioMenuItem(GLib.GType gtype) : base(gtype) {}
		public RadioMenuItem(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_new_from_widget(IntPtr group);

		public RadioMenuItem (Gtk.RadioMenuItem group) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioMenuItem)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (group != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("group");
						vals[param_count++] = new GLib.Value (group);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			owned = true;
			Raw = gtk_radio_menu_item_new_from_widget(group == null ? IntPtr.Zero : group.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_new_with_mnemonic(IntPtr group, IntPtr label);

		public RadioMenuItem (GLib.SList group, string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioMenuItem)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_radio_menu_item_new_with_mnemonic(group == null ? IntPtr.Zero : group.Handle, native_label);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_new_with_mnemonic_from_widget(IntPtr group, IntPtr label);

		public RadioMenuItem (Gtk.RadioMenuItem group, string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RadioMenuItem)) {
				Gtk.Application.AssertMainThread();
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_radio_menu_item_new_with_mnemonic_from_widget(group == null ? IntPtr.Zero : group.Handle, native_label);
			GLib.Marshaller.Free (native_label);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_get_group(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_radio_menu_item_set_group(IntPtr raw, IntPtr group);

		[GLib.Property ("group")]
		public GLib.SList Group {
			get  {
				IntPtr raw_ret = gtk_radio_menu_item_get_group(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
			set  {
				Gtk.Application.AssertMainThread();
				gtk_radio_menu_item_set_group(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GroupChangedVMDelegate (IntPtr radio_menu_item);

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_radiomenuitem_override_group_changed (IntPtr gtype, GroupChangedVMDelegate cb);

		static GroupChangedVMDelegate GroupChangedVMCallback;

		static void groupchanged_cb (IntPtr radio_menu_item)
		{
			try {
				RadioMenuItem radio_menu_item_managed = GLib.Object.GetObject (radio_menu_item, false) as RadioMenuItem;
				radio_menu_item_managed.OnGroupChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideGroupChanged (GLib.GType gtype)
		{
			if (GroupChangedVMCallback == null)
				GroupChangedVMCallback = new GroupChangedVMDelegate (groupchanged_cb);
			gtksharp_radiomenuitem_override_group_changed (gtype.Val, GroupChangedVMCallback);
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtksharp_radiomenuitem_base_group_changed (IntPtr radio_menu_item);

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.RadioMenuItem), ConnectionMethod="OverrideGroupChanged")]
		protected virtual void OnGroupChanged ()
		{
			Gtk.Application.AssertMainThread();
			gtksharp_radiomenuitem_base_group_changed (Handle);
		}

		[GLib.Signal("group-changed")]
		public event System.EventHandler GroupChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "group-changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "group-changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_radio_menu_item_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
#region Customized extensions
#line 1 "RadioMenuItem.custom"
//  Gtk.RadioMenuItem.custom - Gtk RadioMenuItem customizations
//
//  Authors:  John Luke  <jluke@cfl.rr.com>
//            Mike Kestner <mkestner@ximian.com>
//
//  Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		public RadioMenuItem (string label) : base (IntPtr.Zero)
		{
			if (GetType() != typeof (RadioMenuItem)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				AccelLabel al = new AccelLabel ("");
				al.TextWithMnemonic = label;
				al.SetAlignment (0.0f, 0.5f);
				Add (al);
				al.AccelWidget = this;
				return;
			}

			owned = true;
			IntPtr label_as_native = GLib.Marshaller.StringToPtrGStrdup (label);
			Raw = gtk_radio_menu_item_new_with_mnemonic (IntPtr.Zero, label_as_native);
			GLib.Marshaller.Free (label_as_native);
		}

#endregion
	}

	internal class RadioMenuItemAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_radio_menu_item_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_radio_menu_item_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
