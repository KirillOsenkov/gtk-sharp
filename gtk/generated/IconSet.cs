// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[IconSet]
	public class IconSet : GLib.Opaque {

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_set_add_source(IntPtr raw, IntPtr source);

		public void AddSource(Gtk.IconSource source) {
			Gtk.Application.AssertMainThread();
			gtk_icon_set_add_source(Handle, source == null ? IntPtr.Zero : source.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_copy(IntPtr raw);

		public Gtk.IconSet Copy() {
			IntPtr raw_ret = gtk_icon_set_copy(Handle);
			Gtk.IconSet ret = raw_ret == IntPtr.Zero ? null : (Gtk.IconSet) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.IconSet), true);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_icon_set_get_type());
		public static GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_render_icon(IntPtr raw, IntPtr style, int direction, int state, int size, IntPtr widget, IntPtr detail);

		public Gdk.Pixbuf RenderIcon(Gtk.Style style, Gtk.TextDirection direction, Gtk.StateType state, Gtk.IconSize size, Gtk.Widget widget, string detail) {
			Gtk.Application.AssertMainThread();
			IntPtr native_detail = GLib.Marshaller.StringToPtrGStrdup (detail);
			IntPtr raw_ret = gtk_icon_set_render_icon(Handle, style == null ? IntPtr.Zero : style.Handle, (int) direction, (int) state, (int) size, widget == null ? IntPtr.Zero : widget.Handle, native_detail);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			GLib.Marshaller.Free (native_detail);
			return ret;
		}

		public IconSet(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_new();

		public IconSet () 
		{
			Raw = gtk_icon_set_new();
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_new_from_pixbuf(IntPtr pixbuf);

		public IconSet (Gdk.Pixbuf pixbuf) 
		{
			Gtk.Application.AssertMainThread();
			Raw = gtk_icon_set_new_from_pixbuf(pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gtk_icon_set_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Gtk.IconSet is now refcounted automatically")]
		public IconSet Ref () { return this; }

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_set_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gtk_icon_set_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Gtk.IconSet is now refcounted automatically")]
		public void Unref () {}

#endregion
#region Customized extensions
#line 1 "IconSet.custom"
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

                [DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
                unsafe static extern void gtk_icon_set_get_sizes (
                        IntPtr raw, out int *pointer_to_enum, out int n_sizes);

                [DllImport("libglib-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		unsafe static extern void g_free (int *mem);

                /// <summary> Sizes Property </summary>
                /// <remarks> To be completed </remarks>
                public Gtk.IconSize [] Sizes {
                        get {

                            Gtk.IconSize [] retval;
                            
                            unsafe {
                                    int length;
                                    int *pointer_to_enum;
                                    gtk_icon_set_get_sizes (Handle, out pointer_to_enum, out length);
                                    retval = new Gtk.IconSize [length];
                                    for (int i = 0; i < length; i++)
                                            retval [i] = (Gtk.IconSize) pointer_to_enum [i];

                                    g_free (pointer_to_enum);
                            }
                            
                            return retval;
                        }
                }

#endregion
	}

	internal class IconSetAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_set_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_icon_set_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
