// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[PageSetupUnixDialog]
	public class PageSetupUnixDialog : Gtk.Dialog {

		[Obsolete]
		protected PageSetupUnixDialog(GLib.GType gtype) : base(gtype) {}
		public PageSetupUnixDialog(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_page_setup_unix_dialog_new(IntPtr title, IntPtr parent);

		public PageSetupUnixDialog (string title, Gtk.Window parent) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PageSetupUnixDialog)) {
				Gtk.Application.AssertMainThread();
				unsafe {
					var vals = stackalloc GLib.Value[2];
					var names = stackalloc IntPtr[2];
					var param_count = 0;
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("title");
					vals[param_count++] = new GLib.Value (title);
					if (parent != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("parent");
						vals[param_count++] = new GLib.Value (parent);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			Gtk.Application.AssertMainThread();
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			owned = true;
			Raw = gtk_page_setup_unix_dialog_new(native_title, parent == null ? IntPtr.Zero : parent.Handle);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_page_setup_unix_dialog_get_page_setup(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_page_setup_unix_dialog_set_page_setup(IntPtr raw, IntPtr page_setup);

		public Gtk.PageSetup PageSetup { 
			get {
				IntPtr raw_ret = gtk_page_setup_unix_dialog_get_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_page_setup_unix_dialog_set_page_setup(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_page_setup_unix_dialog_get_print_settings(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_page_setup_unix_dialog_set_print_settings(IntPtr raw, IntPtr print_settings);

		public Gtk.PrintSettings PrintSettings { 
			get {
				IntPtr raw_ret = gtk_page_setup_unix_dialog_get_print_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				gtk_page_setup_unix_dialog_set_print_settings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_page_setup_unix_dialog_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_page_setup_unix_dialog_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class PageSetupUnixDialogAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_page_setup_unix_dialog_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_page_setup_unix_dialog_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
