// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[RcStyle]
	public class RcStyle : GLib.Object {

		[Obsolete]
		protected RcStyle(GLib.GType gtype) : base(gtype) {}
		public RcStyle(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_style_new();

		public RcStyle () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RcStyle)) {
				Gtk.Application.AssertMainThread();
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_rc_style_new();
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_rcstyle_get_name_offset ();

		static uint name_offset = gtksharp_gtk_rcstyle_get_name_offset ();
		public string Name {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + name_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + name_offset);
					*raw_ptr = GLib.Marshaller.StringToPtrGStrdup (value);
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_rcstyle_get_font_desc_offset ();

		static uint font_desc_offset = gtksharp_gtk_rcstyle_get_font_desc_offset ();
		public Pango.FontDescription FontDesc {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_desc_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Pango.FontDescription), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + font_desc_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_rcstyle_get_xthickness_offset ();

		static uint xthickness_offset = gtksharp_gtk_rcstyle_get_xthickness_offset ();
		public int Xthickness {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + xthickness_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + xthickness_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gtksharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gtksharp_gtk_rcstyle_get_ythickness_offset ();

		static uint ythickness_offset = gtksharp_gtk_rcstyle_get_ythickness_offset ();
		public int Ythickness {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + ythickness_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + ythickness_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_style_copy(IntPtr raw);

		public Gtk.RcStyle Copy() {
			IntPtr raw_ret = gtk_rc_style_copy(Handle);
			Gtk.RcStyle ret = GLib.Object.GetObject(raw_ret, true) as Gtk.RcStyle;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_style_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_rc_style_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class RcStyleAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_rc_style_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_rc_style_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
